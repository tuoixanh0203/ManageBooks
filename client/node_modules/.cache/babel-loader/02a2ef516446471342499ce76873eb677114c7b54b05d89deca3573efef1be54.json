{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeDirective = exports.mergeDirectives = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"@graphql-tools/utils\");\nfunction directiveAlreadyExists(directivesArr, otherDirective) {\n  return !!directivesArr.find(directive => directive.name.value === otherDirective.name.value);\n}\nfunction nameAlreadyExists(name, namesArr) {\n  return namesArr.some(_ref => {\n    let {\n      value\n    } = _ref;\n    return value === name.value;\n  });\n}\nfunction mergeArguments(a1, a2) {\n  const result = [...a2];\n  for (const argument of a1) {\n    const existingIndex = result.findIndex(a => a.name.value === argument.name.value);\n    if (existingIndex > -1) {\n      const existingArg = result[existingIndex];\n      if (existingArg.value.kind === 'ListValue') {\n        const source = existingArg.value.values;\n        const target = argument.value.values;\n        // merge values of two lists\n        existingArg.value.values = deduplicateLists(source, target, (targetVal, source) => {\n          const value = targetVal.value;\n          return !value || !source.some(sourceVal => sourceVal.value === value);\n        });\n      } else {\n        existingArg.value = argument.value;\n      }\n    } else {\n      result.push(argument);\n    }\n  }\n  return result;\n}\nfunction deduplicateDirectives(directives) {\n  return directives.map((directive, i, all) => {\n    const firstAt = all.findIndex(d => d.name.value === directive.name.value);\n    if (firstAt !== i) {\n      const dup = all[firstAt];\n      directive.arguments = mergeArguments(directive.arguments, dup.arguments);\n      return null;\n    }\n    return directive;\n  }).filter(utils_1.isSome);\n}\nfunction mergeDirectives() {\n  let d1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let d2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let config = arguments.length > 2 ? arguments[2] : undefined;\n  const reverseOrder = config && config.reverseDirectives;\n  const asNext = reverseOrder ? d1 : d2;\n  const asFirst = reverseOrder ? d2 : d1;\n  const result = deduplicateDirectives([...asNext]);\n  for (const directive of asFirst) {\n    if (directiveAlreadyExists(result, directive)) {\n      const existingDirectiveIndex = result.findIndex(d => d.name.value === directive.name.value);\n      const existingDirective = result[existingDirectiveIndex];\n      result[existingDirectiveIndex].arguments = mergeArguments(directive.arguments || [], existingDirective.arguments || []);\n    } else {\n      result.push(directive);\n    }\n  }\n  return result;\n}\nexports.mergeDirectives = mergeDirectives;\nfunction validateInputs(node, existingNode) {\n  const printedNode = (0, graphql_1.print)({\n    ...node,\n    description: undefined\n  });\n  const printedExistingNode = (0, graphql_1.print)({\n    ...existingNode,\n    description: undefined\n  });\n  // eslint-disable-next-line\n  const leaveInputs = new RegExp('(directive @w*d*)|( on .*$)', 'g');\n  const sameArguments = printedNode.replace(leaveInputs, '') === printedExistingNode.replace(leaveInputs, '');\n  if (!sameArguments) {\n    throw new Error(`Unable to merge GraphQL directive \"${node.name.value}\". \\nExisting directive:  \\n\\t${printedExistingNode} \\nReceived directive: \\n\\t${printedNode}`);\n  }\n}\nfunction mergeDirective(node, existingNode) {\n  if (existingNode) {\n    validateInputs(node, existingNode);\n    return {\n      ...node,\n      locations: [...existingNode.locations, ...node.locations.filter(name => !nameAlreadyExists(name, existingNode.locations))]\n    };\n  }\n  return node;\n}\nexports.mergeDirective = mergeDirective;\nfunction deduplicateLists(source, target, filterFn) {\n  return source.concat(target.filter(val => filterFn(val, source)));\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","mergeDirective","mergeDirectives","graphql_1","require","utils_1","directiveAlreadyExists","directivesArr","otherDirective","find","directive","name","nameAlreadyExists","namesArr","some","mergeArguments","a1","a2","result","argument","existingIndex","findIndex","a","existingArg","kind","source","values","target","deduplicateLists","targetVal","sourceVal","push","deduplicateDirectives","directives","map","i","all","firstAt","d","dup","arguments","filter","isSome","d1","d2","config","reverseOrder","reverseDirectives","asNext","asFirst","existingDirectiveIndex","existingDirective","validateInputs","node","existingNode","printedNode","print","description","undefined","printedExistingNode","leaveInputs","RegExp","sameArguments","replace","Error","locations","filterFn","concat","val"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/mock/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeDirective = exports.mergeDirectives = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"@graphql-tools/utils\");\nfunction directiveAlreadyExists(directivesArr, otherDirective) {\n    return !!directivesArr.find(directive => directive.name.value === otherDirective.name.value);\n}\nfunction nameAlreadyExists(name, namesArr) {\n    return namesArr.some(({ value }) => value === name.value);\n}\nfunction mergeArguments(a1, a2) {\n    const result = [...a2];\n    for (const argument of a1) {\n        const existingIndex = result.findIndex(a => a.name.value === argument.name.value);\n        if (existingIndex > -1) {\n            const existingArg = result[existingIndex];\n            if (existingArg.value.kind === 'ListValue') {\n                const source = existingArg.value.values;\n                const target = argument.value.values;\n                // merge values of two lists\n                existingArg.value.values = deduplicateLists(source, target, (targetVal, source) => {\n                    const value = targetVal.value;\n                    return !value || !source.some((sourceVal) => sourceVal.value === value);\n                });\n            }\n            else {\n                existingArg.value = argument.value;\n            }\n        }\n        else {\n            result.push(argument);\n        }\n    }\n    return result;\n}\nfunction deduplicateDirectives(directives) {\n    return directives\n        .map((directive, i, all) => {\n        const firstAt = all.findIndex(d => d.name.value === directive.name.value);\n        if (firstAt !== i) {\n            const dup = all[firstAt];\n            directive.arguments = mergeArguments(directive.arguments, dup.arguments);\n            return null;\n        }\n        return directive;\n    })\n        .filter(utils_1.isSome);\n}\nfunction mergeDirectives(d1 = [], d2 = [], config) {\n    const reverseOrder = config && config.reverseDirectives;\n    const asNext = reverseOrder ? d1 : d2;\n    const asFirst = reverseOrder ? d2 : d1;\n    const result = deduplicateDirectives([...asNext]);\n    for (const directive of asFirst) {\n        if (directiveAlreadyExists(result, directive)) {\n            const existingDirectiveIndex = result.findIndex(d => d.name.value === directive.name.value);\n            const existingDirective = result[existingDirectiveIndex];\n            result[existingDirectiveIndex].arguments = mergeArguments(directive.arguments || [], existingDirective.arguments || []);\n        }\n        else {\n            result.push(directive);\n        }\n    }\n    return result;\n}\nexports.mergeDirectives = mergeDirectives;\nfunction validateInputs(node, existingNode) {\n    const printedNode = (0, graphql_1.print)({\n        ...node,\n        description: undefined,\n    });\n    const printedExistingNode = (0, graphql_1.print)({\n        ...existingNode,\n        description: undefined,\n    });\n    // eslint-disable-next-line\n    const leaveInputs = new RegExp('(directive @w*d*)|( on .*$)', 'g');\n    const sameArguments = printedNode.replace(leaveInputs, '') === printedExistingNode.replace(leaveInputs, '');\n    if (!sameArguments) {\n        throw new Error(`Unable to merge GraphQL directive \"${node.name.value}\". \\nExisting directive:  \\n\\t${printedExistingNode} \\nReceived directive: \\n\\t${printedNode}`);\n    }\n}\nfunction mergeDirective(node, existingNode) {\n    if (existingNode) {\n        validateInputs(node, existingNode);\n        return {\n            ...node,\n            locations: [\n                ...existingNode.locations,\n                ...node.locations.filter(name => !nameAlreadyExists(name, existingNode.locations)),\n            ],\n        };\n    }\n    return node;\n}\nexports.mergeDirective = mergeDirective;\nfunction deduplicateLists(source, target, filterFn) {\n    return source.concat(target.filter(val => filterFn(val, source)));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}