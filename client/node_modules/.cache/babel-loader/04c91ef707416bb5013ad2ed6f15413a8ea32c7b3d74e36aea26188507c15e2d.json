{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.astFromValueUntyped = void 0;\nconst graphql_1 = require(\"graphql\");\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using the following mapping.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String               |\n * | Number        | Int / Float          |\n * | null          | NullValue            |\n *\n */\nfunction astFromValueUntyped(value) {\n  // only explicit null, not undefined, NaN\n  if (value === null) {\n    return {\n      kind: graphql_1.Kind.NULL\n    };\n  }\n  // undefined\n  if (value === undefined) {\n    return null;\n  }\n  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n  if (Array.isArray(value)) {\n    const valuesNodes = [];\n    for (const item of value) {\n      const itemNode = astFromValueUntyped(item);\n      if (itemNode != null) {\n        valuesNodes.push(itemNode);\n      }\n    }\n    return {\n      kind: graphql_1.Kind.LIST,\n      values: valuesNodes\n    };\n  }\n  if (typeof value === 'object') {\n    const fieldNodes = [];\n    for (const fieldName in value) {\n      const fieldValue = value[fieldName];\n      const ast = astFromValueUntyped(fieldValue);\n      if (ast) {\n        fieldNodes.push({\n          kind: graphql_1.Kind.OBJECT_FIELD,\n          name: {\n            kind: graphql_1.Kind.NAME,\n            value: fieldName\n          },\n          value: ast\n        });\n      }\n    }\n    return {\n      kind: graphql_1.Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n  // Others serialize based on their corresponding JavaScript scalar types.\n  if (typeof value === 'boolean') {\n    return {\n      kind: graphql_1.Kind.BOOLEAN,\n      value\n    };\n  }\n  // JavaScript numbers can be Int or Float values.\n  if (typeof value === 'number' && isFinite(value)) {\n    const stringNum = String(value);\n    return integerStringRegExp.test(stringNum) ? {\n      kind: graphql_1.Kind.INT,\n      value: stringNum\n    } : {\n      kind: graphql_1.Kind.FLOAT,\n      value: stringNum\n    };\n  }\n  if (typeof value === 'string') {\n    return {\n      kind: graphql_1.Kind.STRING,\n      value\n    };\n  }\n  throw new TypeError(`Cannot convert value to AST: ${value}.`);\n}\nexports.astFromValueUntyped = astFromValueUntyped;\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;","map":{"version":3,"names":["Object","defineProperty","exports","value","astFromValueUntyped","graphql_1","require","kind","Kind","NULL","undefined","Array","isArray","valuesNodes","item","itemNode","push","LIST","values","fieldNodes","fieldName","fieldValue","ast","OBJECT_FIELD","name","NAME","OBJECT","fields","BOOLEAN","isFinite","stringNum","String","integerStringRegExp","test","INT","FLOAT","STRING","TypeError"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/schema/node_modules/@graphql-tools/utils/cjs/astFromValueUntyped.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.astFromValueUntyped = void 0;\nconst graphql_1 = require(\"graphql\");\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using the following mapping.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String               |\n * | Number        | Int / Float          |\n * | null          | NullValue            |\n *\n */\nfunction astFromValueUntyped(value) {\n    // only explicit null, not undefined, NaN\n    if (value === null) {\n        return { kind: graphql_1.Kind.NULL };\n    }\n    // undefined\n    if (value === undefined) {\n        return null;\n    }\n    // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n    // the value is not an array, convert the value using the list's item type.\n    if (Array.isArray(value)) {\n        const valuesNodes = [];\n        for (const item of value) {\n            const itemNode = astFromValueUntyped(item);\n            if (itemNode != null) {\n                valuesNodes.push(itemNode);\n            }\n        }\n        return { kind: graphql_1.Kind.LIST, values: valuesNodes };\n    }\n    if (typeof value === 'object') {\n        const fieldNodes = [];\n        for (const fieldName in value) {\n            const fieldValue = value[fieldName];\n            const ast = astFromValueUntyped(fieldValue);\n            if (ast) {\n                fieldNodes.push({\n                    kind: graphql_1.Kind.OBJECT_FIELD,\n                    name: { kind: graphql_1.Kind.NAME, value: fieldName },\n                    value: ast,\n                });\n            }\n        }\n        return { kind: graphql_1.Kind.OBJECT, fields: fieldNodes };\n    }\n    // Others serialize based on their corresponding JavaScript scalar types.\n    if (typeof value === 'boolean') {\n        return { kind: graphql_1.Kind.BOOLEAN, value };\n    }\n    // JavaScript numbers can be Int or Float values.\n    if (typeof value === 'number' && isFinite(value)) {\n        const stringNum = String(value);\n        return integerStringRegExp.test(stringNum)\n            ? { kind: graphql_1.Kind.INT, value: stringNum }\n            : { kind: graphql_1.Kind.FLOAT, value: stringNum };\n    }\n    if (typeof value === 'string') {\n        return { kind: graphql_1.Kind.STRING, value };\n    }\n    throw new TypeError(`Cannot convert value to AST: ${value}.`);\n}\nexports.astFromValueUntyped = astFromValueUntyped;\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}