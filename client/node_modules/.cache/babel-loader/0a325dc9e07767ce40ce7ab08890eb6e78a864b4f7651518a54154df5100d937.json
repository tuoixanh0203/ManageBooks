{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pluginIsInternal = void 0;\nfunction pluginIsInternal(plugin) {\n  return '__internal_plugin_id__' in plugin;\n}\nexports.pluginIsInternal = pluginIsInternal;","map":{"version":3,"mappings":";;;;;;AAyBA,SAAgBA,gBAAgB,CAC9BC,MAA0B;EAI1B,OAAO,wBAAwB,IAAIA,MAAM;AAC3C;AANAC","names":["pluginIsInternal","plugin","exports"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\internalPlugin.ts"],"sourcesContent":["import type { BaseContext } from 'apollo-server-types';\nimport type { ApolloServerPlugin } from 'apollo-server-plugin-base';\n\n// This file's exports should not be exported from the overall\n// apollo-server-core module.\n\n// The internal plugins implement this interface which\n// ApolloServer.ensurePluginInstantiation uses to figure out if the plugins have\n// already been installed (or explicitly disabled via the matching Disable\n// plugins).\nexport interface InternalApolloServerPlugin<\n  TContext extends BaseContext = BaseContext,\n> extends ApolloServerPlugin<TContext> {\n  // Used to identify a few specific plugins that are instantiated\n  // by default if not explicitly used or disabled.\n  __internal_plugin_id__(): InternalPluginId;\n}\n\nexport type InternalPluginId =\n  | 'CacheControl'\n  | 'LandingPageDisabled'\n  | 'SchemaReporting'\n  | 'InlineTrace'\n  | 'UsageReporting';\n\nexport function pluginIsInternal(\n  plugin: ApolloServerPlugin,\n): plugin is InternalApolloServerPlugin {\n  // We could call the function and compare it to the list above, but this seems\n  // good enough.\n  return '__internal_plugin_id__' in plugin;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}