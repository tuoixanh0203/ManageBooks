{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeTraceDetails = void 0;\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\nfunction makeTraceDetails(variables, sendVariableValues, operationString) {\n  const details = new apollo_reporting_protobuf_1.Trace.Details();\n  const variablesToRecord = (() => {\n    if (sendVariableValues && 'transform' in sendVariableValues) {\n      const originalKeys = Object.keys(variables);\n      try {\n        const modifiedVariables = sendVariableValues.transform({\n          variables: variables,\n          operationString: operationString\n        });\n        return cleanModifiedVariables(originalKeys, modifiedVariables);\n      } catch (e) {\n        return handleVariableValueTransformError(originalKeys);\n      }\n    } else {\n      return variables;\n    }\n  })();\n  Object.keys(variablesToRecord).forEach(name => {\n    if (!sendVariableValues || 'none' in sendVariableValues && sendVariableValues.none || 'all' in sendVariableValues && !sendVariableValues.all || 'exceptNames' in sendVariableValues && sendVariableValues.exceptNames.includes(name) || 'onlyNames' in sendVariableValues && !sendVariableValues.onlyNames.includes(name)) {\n      details.variablesJson[name] = '';\n    } else {\n      try {\n        details.variablesJson[name] = typeof variablesToRecord[name] === 'undefined' ? '' : JSON.stringify(variablesToRecord[name]);\n      } catch (e) {\n        details.variablesJson[name] = JSON.stringify('[Unable to convert value to JSON]');\n      }\n    }\n  });\n  return details;\n}\nexports.makeTraceDetails = makeTraceDetails;\nfunction handleVariableValueTransformError(variableNames) {\n  const modifiedVariables = Object.create(null);\n  variableNames.forEach(name => {\n    modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n  });\n  return modifiedVariables;\n}\nfunction cleanModifiedVariables(originalKeys, modifiedVariables) {\n  const cleanedVariables = Object.create(null);\n  originalKeys.forEach(name => {\n    cleanedVariables[name] = modifiedVariables[name];\n  });\n  return cleanedVariables;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AAUA,SAAgBA,gBAAgB,CAC9BC,SAA8B,EAC9BC,kBAAyC,EACzCC,eAAwB;EAExB,MAAMC,OAAO,GAAG,IAAIC,iCAAK,CAACC,OAAO,EAAE;EACnC,MAAMC,iBAAiB,GAAG,CAAC,MAAK;IAC9B,IAAIL,kBAAkB,IAAI,WAAW,IAAIA,kBAAkB,EAAE;MAC3D,MAAMM,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACT,SAAS,CAAC;MAC3C,IAAI;QAEF,MAAMU,iBAAiB,GAAGT,kBAAkB,CAACU,SAAS,CAAC;UACrDX,SAAS,EAAEA,SAAS;UACpBE,eAAe,EAAEA;SAClB,CAAC;QACF,OAAOU,sBAAsB,CAACL,YAAY,EAAEG,iBAAiB,CAAC;OAC/D,CAAC,OAAOG,CAAC,EAAE;QAGV,OAAOC,iCAAiC,CAACP,YAAY,CAAC;;KAEzD,MAAM;MACL,OAAOP,SAAS;;EAEpB,CAAC,GAAG;EAOJQ,MAAM,CAACC,IAAI,CAACH,iBAAiB,CAAC,CAACS,OAAO,CAAEC,IAAI,IAAI;IAC9C,IACE,CAACf,kBAAkB,IAClB,MAAM,IAAIA,kBAAkB,IAAIA,kBAAkB,CAACgB,IAAK,IACxD,KAAK,IAAIhB,kBAAkB,IAAI,CAACA,kBAAkB,CAACiB,GAAI,IACvD,aAAa,IAAIjB,kBAAkB,IAIlCA,kBAAkB,CAACkB,WAAW,CAACC,QAAQ,CAACJ,IAAI,CAAE,IAC/C,WAAW,IAAIf,kBAAkB,IAChC,CAACA,kBAAkB,CAACoB,SAAS,CAACD,QAAQ,CAACJ,IAAI,CAAE,EAC/C;MAIAb,OAAO,CAACmB,aAAc,CAACN,IAAI,CAAC,GAAG,EAAE;KAClC,MAAM;MACL,IAAI;QACFb,OAAO,CAACmB,aAAc,CAACN,IAAI,CAAC,GAC1B,OAAOV,iBAAiB,CAACU,IAAI,CAAC,KAAK,WAAW,GAC1C,EAAE,GACFO,IAAI,CAACC,SAAS,CAAClB,iBAAiB,CAACU,IAAI,CAAC,CAAC;OAC9C,CAAC,OAAOH,CAAC,EAAE;QACVV,OAAO,CAACmB,aAAc,CAACN,IAAI,CAAC,GAAGO,IAAI,CAACC,SAAS,CAC3C,mCAAmC,CACpC;;;EAGP,CAAC,CAAC;EACF,OAAOrB,OAAO;AAChB;AA9DAsB;AAgEA,SAASX,iCAAiC,CACxCY,aAAuB;EAEvB,MAAMhB,iBAAiB,GAAGF,MAAM,CAACmB,MAAM,CAAC,IAAI,CAAC;EAC7CD,aAAa,CAACX,OAAO,CAAEC,IAAI,IAAI;IAC7BN,iBAAiB,CAACM,IAAI,CAAC,GAAG,4BAA4B;EACxD,CAAC,CAAC;EACF,OAAON,iBAAiB;AAC1B;AAIA,SAASE,sBAAsB,CAC7BL,YAA2B,EAC3BG,iBAAsC;EAEtC,MAAMkB,gBAAgB,GAAwBpB,MAAM,CAACmB,MAAM,CAAC,IAAI,CAAC;EACjEpB,YAAY,CAACQ,OAAO,CAAEC,IAAI,IAAI;IAC5BY,gBAAgB,CAACZ,IAAI,CAAC,GAAGN,iBAAiB,CAACM,IAAI,CAAC;EAClD,CAAC,CAAC;EACF,OAAOY,gBAAgB;AACzB","names":["makeTraceDetails","variables","sendVariableValues","operationString","details","apollo_reporting_protobuf_1","Details","variablesToRecord","originalKeys","Object","keys","modifiedVariables","transform","cleanModifiedVariables","e","handleVariableValueTransformError","forEach","name","none","all","exceptNames","includes","onlyNames","variablesJson","JSON","stringify","exports","variableNames","create","cleanedVariables"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\plugin\\usageReporting\\traceDetails.ts"],"sourcesContent":["import { Trace } from 'apollo-reporting-protobuf';\nimport type { VariableValueOptions } from './options';\n\n// Creates trace details from request variables, given a specification for modifying\n// values of private or sensitive variables.\n// The details will include all variable names and their (possibly hidden or modified) values.\n// If sendVariableValues is {all: bool}, {none: bool} or {exceptNames: Array}, the option will act similarly to\n// to the to-be-deprecated options.privateVariables, except that the redacted variable\n// names will still be visible in the UI even if the values are hidden.\n// If sendVariableValues is null or undefined, we default to the {none: true} case.\nexport function makeTraceDetails(\n  variables: Record<string, any>,\n  sendVariableValues?: VariableValueOptions,\n  operationString?: string,\n): Trace.Details {\n  const details = new Trace.Details();\n  const variablesToRecord = (() => {\n    if (sendVariableValues && 'transform' in sendVariableValues) {\n      const originalKeys = Object.keys(variables);\n      try {\n        // Custom function to allow user to specify what variablesJson will look like\n        const modifiedVariables = sendVariableValues.transform({\n          variables: variables,\n          operationString: operationString,\n        });\n        return cleanModifiedVariables(originalKeys, modifiedVariables);\n      } catch (e) {\n        // If the custom function provided by the user throws an exception,\n        // change all the variable values to an appropriate error message.\n        return handleVariableValueTransformError(originalKeys);\n      }\n    } else {\n      return variables;\n    }\n  })();\n\n  // Note: we explicitly do *not* include the details.rawQuery field. The\n  // Studio web app currently does nothing with this other than store it in\n  // the database and offer it up via its GraphQL API, and sending it means\n  // that using calculateSignature to hide sensitive data in the query\n  // string is ineffective.\n  Object.keys(variablesToRecord).forEach((name) => {\n    if (\n      !sendVariableValues ||\n      ('none' in sendVariableValues && sendVariableValues.none) ||\n      ('all' in sendVariableValues && !sendVariableValues.all) ||\n      ('exceptNames' in sendVariableValues &&\n        // We assume that most users will have only a few variables values to hide,\n        // or will just set {none: true}; we can change this\n        // linear-time operation if it causes real performance issues.\n        sendVariableValues.exceptNames.includes(name)) ||\n      ('onlyNames' in sendVariableValues &&\n        !sendVariableValues.onlyNames.includes(name))\n    ) {\n      // Special case for private variables. Note that this is a different\n      // representation from a variable containing the empty string, as that\n      // will be sent as '\"\"'.\n      details.variablesJson![name] = '';\n    } else {\n      try {\n        details.variablesJson![name] =\n          typeof variablesToRecord[name] === 'undefined'\n            ? ''\n            : JSON.stringify(variablesToRecord[name]);\n      } catch (e) {\n        details.variablesJson![name] = JSON.stringify(\n          '[Unable to convert value to JSON]',\n        );\n      }\n    }\n  });\n  return details;\n}\n\nfunction handleVariableValueTransformError(\n  variableNames: string[],\n): Record<string, any> {\n  const modifiedVariables = Object.create(null);\n  variableNames.forEach((name) => {\n    modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n  });\n  return modifiedVariables;\n}\n\n// Helper for makeTraceDetails() to enforce that the keys of a modified 'variables'\n// matches that of the original 'variables'\nfunction cleanModifiedVariables(\n  originalKeys: Array<string>,\n  modifiedVariables: Record<string, any>,\n): Record<string, any> {\n  const cleanedVariables: Record<string, any> = Object.create(null);\n  originalKeys.forEach((name) => {\n    cleanedVariables[name] = modifiedVariables[name];\n  });\n  return cleanedVariables;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}