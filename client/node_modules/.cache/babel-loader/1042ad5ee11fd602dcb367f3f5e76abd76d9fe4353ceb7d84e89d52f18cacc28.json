{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rewireTypes = void 0;\nconst graphql_1 = require(\"graphql\");\nconst stub_js_1 = require(\"./stub.js\");\nfunction rewireTypes(originalTypeMap, directives) {\n  const referenceTypeMap = Object.create(null);\n  for (const typeName in originalTypeMap) {\n    referenceTypeMap[typeName] = originalTypeMap[typeName];\n  }\n  const newTypeMap = Object.create(null);\n  for (const typeName in referenceTypeMap) {\n    const namedType = referenceTypeMap[typeName];\n    if (namedType == null || typeName.startsWith('__')) {\n      continue;\n    }\n    const newName = namedType.name;\n    if (newName.startsWith('__')) {\n      continue;\n    }\n    if (newTypeMap[newName] != null) {\n      throw new Error(`Duplicate schema type name ${newName}`);\n    }\n    newTypeMap[newName] = namedType;\n  }\n  for (const typeName in newTypeMap) {\n    newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);\n  }\n  const newDirectives = directives.map(directive => rewireDirective(directive));\n  return {\n    typeMap: newTypeMap,\n    directives: newDirectives\n  };\n  function rewireDirective(directive) {\n    if ((0, graphql_1.isSpecifiedDirective)(directive)) {\n      return directive;\n    }\n    const directiveConfig = directive.toConfig();\n    directiveConfig.args = rewireArgs(directiveConfig.args);\n    return new graphql_1.GraphQLDirective(directiveConfig);\n  }\n  function rewireArgs(args) {\n    const rewiredArgs = {};\n    for (const argName in args) {\n      const arg = args[argName];\n      const rewiredArgType = rewireType(arg.type);\n      if (rewiredArgType != null) {\n        arg.type = rewiredArgType;\n        rewiredArgs[argName] = arg;\n      }\n    }\n    return rewiredArgs;\n  }\n  function rewireNamedType(type) {\n    if ((0, graphql_1.isObjectType)(type)) {\n      const config = type.toConfig();\n      const newConfig = {\n        ...config,\n        fields: () => rewireFields(config.fields),\n        interfaces: () => rewireNamedTypes(config.interfaces)\n      };\n      return new graphql_1.GraphQLObjectType(newConfig);\n    } else if ((0, graphql_1.isInterfaceType)(type)) {\n      const config = type.toConfig();\n      const newConfig = {\n        ...config,\n        fields: () => rewireFields(config.fields)\n      };\n      if ('interfaces' in newConfig) {\n        newConfig.interfaces = () => rewireNamedTypes(config.interfaces);\n      }\n      return new graphql_1.GraphQLInterfaceType(newConfig);\n    } else if ((0, graphql_1.isUnionType)(type)) {\n      const config = type.toConfig();\n      const newConfig = {\n        ...config,\n        types: () => rewireNamedTypes(config.types)\n      };\n      return new graphql_1.GraphQLUnionType(newConfig);\n    } else if ((0, graphql_1.isInputObjectType)(type)) {\n      const config = type.toConfig();\n      const newConfig = {\n        ...config,\n        fields: () => rewireInputFields(config.fields)\n      };\n      return new graphql_1.GraphQLInputObjectType(newConfig);\n    } else if ((0, graphql_1.isEnumType)(type)) {\n      const enumConfig = type.toConfig();\n      return new graphql_1.GraphQLEnumType(enumConfig);\n    } else if ((0, graphql_1.isScalarType)(type)) {\n      if ((0, graphql_1.isSpecifiedScalarType)(type)) {\n        return type;\n      }\n      const scalarConfig = type.toConfig();\n      return new graphql_1.GraphQLScalarType(scalarConfig);\n    }\n    throw new Error(`Unexpected schema type: ${type}`);\n  }\n  function rewireFields(fields) {\n    const rewiredFields = {};\n    for (const fieldName in fields) {\n      const field = fields[fieldName];\n      const rewiredFieldType = rewireType(field.type);\n      if (rewiredFieldType != null && field.args) {\n        field.type = rewiredFieldType;\n        field.args = rewireArgs(field.args);\n        rewiredFields[fieldName] = field;\n      }\n    }\n    return rewiredFields;\n  }\n  function rewireInputFields(fields) {\n    const rewiredFields = {};\n    for (const fieldName in fields) {\n      const field = fields[fieldName];\n      const rewiredFieldType = rewireType(field.type);\n      if (rewiredFieldType != null) {\n        field.type = rewiredFieldType;\n        rewiredFields[fieldName] = field;\n      }\n    }\n    return rewiredFields;\n  }\n  function rewireNamedTypes(namedTypes) {\n    const rewiredTypes = [];\n    for (const namedType of namedTypes) {\n      const rewiredType = rewireType(namedType);\n      if (rewiredType != null) {\n        rewiredTypes.push(rewiredType);\n      }\n    }\n    return rewiredTypes;\n  }\n  function rewireType(type) {\n    if ((0, graphql_1.isListType)(type)) {\n      const rewiredType = rewireType(type.ofType);\n      return rewiredType != null ? new graphql_1.GraphQLList(rewiredType) : null;\n    } else if ((0, graphql_1.isNonNullType)(type)) {\n      const rewiredType = rewireType(type.ofType);\n      return rewiredType != null ? new graphql_1.GraphQLNonNull(rewiredType) : null;\n    } else if ((0, graphql_1.isNamedType)(type)) {\n      let rewiredType = referenceTypeMap[type.name];\n      if (rewiredType === undefined) {\n        rewiredType = (0, stub_js_1.isNamedStub)(type) ? (0, stub_js_1.getBuiltInForStub)(type) : rewireNamedType(type);\n        newTypeMap[rewiredType.name] = referenceTypeMap[type.name] = rewiredType;\n      }\n      return rewiredType != null ? newTypeMap[rewiredType.name] : null;\n    }\n    return null;\n  }\n}\nexports.rewireTypes = rewireTypes;","map":{"version":3,"names":["Object","defineProperty","exports","value","rewireTypes","graphql_1","require","stub_js_1","originalTypeMap","directives","referenceTypeMap","create","typeName","newTypeMap","namedType","startsWith","newName","name","Error","rewireNamedType","newDirectives","map","directive","rewireDirective","typeMap","isSpecifiedDirective","directiveConfig","toConfig","args","rewireArgs","GraphQLDirective","rewiredArgs","argName","arg","rewiredArgType","rewireType","type","isObjectType","config","newConfig","fields","rewireFields","interfaces","rewireNamedTypes","GraphQLObjectType","isInterfaceType","GraphQLInterfaceType","isUnionType","types","GraphQLUnionType","isInputObjectType","rewireInputFields","GraphQLInputObjectType","isEnumType","enumConfig","GraphQLEnumType","isScalarType","isSpecifiedScalarType","scalarConfig","GraphQLScalarType","rewiredFields","fieldName","field","rewiredFieldType","namedTypes","rewiredTypes","rewiredType","push","isListType","ofType","GraphQLList","isNonNullType","GraphQLNonNull","isNamedType","undefined","isNamedStub","getBuiltInForStub"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/schema/node_modules/@graphql-tools/utils/cjs/rewire.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rewireTypes = void 0;\nconst graphql_1 = require(\"graphql\");\nconst stub_js_1 = require(\"./stub.js\");\nfunction rewireTypes(originalTypeMap, directives) {\n    const referenceTypeMap = Object.create(null);\n    for (const typeName in originalTypeMap) {\n        referenceTypeMap[typeName] = originalTypeMap[typeName];\n    }\n    const newTypeMap = Object.create(null);\n    for (const typeName in referenceTypeMap) {\n        const namedType = referenceTypeMap[typeName];\n        if (namedType == null || typeName.startsWith('__')) {\n            continue;\n        }\n        const newName = namedType.name;\n        if (newName.startsWith('__')) {\n            continue;\n        }\n        if (newTypeMap[newName] != null) {\n            throw new Error(`Duplicate schema type name ${newName}`);\n        }\n        newTypeMap[newName] = namedType;\n    }\n    for (const typeName in newTypeMap) {\n        newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);\n    }\n    const newDirectives = directives.map(directive => rewireDirective(directive));\n    return {\n        typeMap: newTypeMap,\n        directives: newDirectives,\n    };\n    function rewireDirective(directive) {\n        if ((0, graphql_1.isSpecifiedDirective)(directive)) {\n            return directive;\n        }\n        const directiveConfig = directive.toConfig();\n        directiveConfig.args = rewireArgs(directiveConfig.args);\n        return new graphql_1.GraphQLDirective(directiveConfig);\n    }\n    function rewireArgs(args) {\n        const rewiredArgs = {};\n        for (const argName in args) {\n            const arg = args[argName];\n            const rewiredArgType = rewireType(arg.type);\n            if (rewiredArgType != null) {\n                arg.type = rewiredArgType;\n                rewiredArgs[argName] = arg;\n            }\n        }\n        return rewiredArgs;\n    }\n    function rewireNamedType(type) {\n        if ((0, graphql_1.isObjectType)(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireFields(config.fields),\n                interfaces: () => rewireNamedTypes(config.interfaces),\n            };\n            return new graphql_1.GraphQLObjectType(newConfig);\n        }\n        else if ((0, graphql_1.isInterfaceType)(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireFields(config.fields),\n            };\n            if ('interfaces' in newConfig) {\n                newConfig.interfaces = () => rewireNamedTypes(config.interfaces);\n            }\n            return new graphql_1.GraphQLInterfaceType(newConfig);\n        }\n        else if ((0, graphql_1.isUnionType)(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                types: () => rewireNamedTypes(config.types),\n            };\n            return new graphql_1.GraphQLUnionType(newConfig);\n        }\n        else if ((0, graphql_1.isInputObjectType)(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireInputFields(config.fields),\n            };\n            return new graphql_1.GraphQLInputObjectType(newConfig);\n        }\n        else if ((0, graphql_1.isEnumType)(type)) {\n            const enumConfig = type.toConfig();\n            return new graphql_1.GraphQLEnumType(enumConfig);\n        }\n        else if ((0, graphql_1.isScalarType)(type)) {\n            if ((0, graphql_1.isSpecifiedScalarType)(type)) {\n                return type;\n            }\n            const scalarConfig = type.toConfig();\n            return new graphql_1.GraphQLScalarType(scalarConfig);\n        }\n        throw new Error(`Unexpected schema type: ${type}`);\n    }\n    function rewireFields(fields) {\n        const rewiredFields = {};\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            const rewiredFieldType = rewireType(field.type);\n            if (rewiredFieldType != null && field.args) {\n                field.type = rewiredFieldType;\n                field.args = rewireArgs(field.args);\n                rewiredFields[fieldName] = field;\n            }\n        }\n        return rewiredFields;\n    }\n    function rewireInputFields(fields) {\n        const rewiredFields = {};\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            const rewiredFieldType = rewireType(field.type);\n            if (rewiredFieldType != null) {\n                field.type = rewiredFieldType;\n                rewiredFields[fieldName] = field;\n            }\n        }\n        return rewiredFields;\n    }\n    function rewireNamedTypes(namedTypes) {\n        const rewiredTypes = [];\n        for (const namedType of namedTypes) {\n            const rewiredType = rewireType(namedType);\n            if (rewiredType != null) {\n                rewiredTypes.push(rewiredType);\n            }\n        }\n        return rewiredTypes;\n    }\n    function rewireType(type) {\n        if ((0, graphql_1.isListType)(type)) {\n            const rewiredType = rewireType(type.ofType);\n            return rewiredType != null ? new graphql_1.GraphQLList(rewiredType) : null;\n        }\n        else if ((0, graphql_1.isNonNullType)(type)) {\n            const rewiredType = rewireType(type.ofType);\n            return rewiredType != null ? new graphql_1.GraphQLNonNull(rewiredType) : null;\n        }\n        else if ((0, graphql_1.isNamedType)(type)) {\n            let rewiredType = referenceTypeMap[type.name];\n            if (rewiredType === undefined) {\n                rewiredType = (0, stub_js_1.isNamedStub)(type) ? (0, stub_js_1.getBuiltInForStub)(type) : rewireNamedType(type);\n                newTypeMap[rewiredType.name] = referenceTypeMap[type.name] = rewiredType;\n            }\n            return rewiredType != null ? newTypeMap[rewiredType.name] : null;\n        }\n        return null;\n    }\n}\nexports.rewireTypes = rewireTypes;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}