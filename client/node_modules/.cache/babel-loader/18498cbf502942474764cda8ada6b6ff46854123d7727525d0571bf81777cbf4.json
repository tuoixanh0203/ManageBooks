{"ast":null,"code":"\"use strict\";\n\nconst MIMETypeParameters = require(\"./mime-type-parameters.js\");\nconst parse = require(\"./parser.js\");\nconst serialize = require(\"./serializer.js\");\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints\n} = require(\"./utils.js\");\nmodule.exports = class MIMEType {\n  constructor(string) {\n    string = String(string);\n    const result = parse(string);\n    if (result === null) {\n      throw new Error(`Could not parse MIME type string \"${string}\"`);\n    }\n    this._type = result.type;\n    this._subtype = result.subtype;\n    this._parameters = new MIMETypeParameters(result.parameters);\n  }\n  static parse(string) {\n    try {\n      return new this(string);\n    } catch (e) {\n      return null;\n    }\n  }\n  get essence() {\n    return `${this.type}/${this.subtype}`;\n  }\n  get type() {\n    return this._type;\n  }\n  set type(value) {\n    value = asciiLowercase(String(value));\n    if (value.length === 0) {\n      throw new Error(\"Invalid type: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);\n    }\n    this._type = value;\n  }\n  get subtype() {\n    return this._subtype;\n  }\n  set subtype(value) {\n    value = asciiLowercase(String(value));\n    if (value.length === 0) {\n      throw new Error(\"Invalid subtype: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);\n    }\n    this._subtype = value;\n  }\n  get parameters() {\n    return this._parameters;\n  }\n  toString() {\n    // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\n    // this class's interface is identical.\n    return serialize(this);\n  }\n  isJavaScript() {\n    let {\n      prohibitParameters = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switch (this._type) {\n      case \"text\":\n        {\n          switch (this._subtype) {\n            case \"ecmascript\":\n            case \"javascript\":\n            case \"javascript1.0\":\n            case \"javascript1.1\":\n            case \"javascript1.2\":\n            case \"javascript1.3\":\n            case \"javascript1.4\":\n            case \"javascript1.5\":\n            case \"jscript\":\n            case \"livescript\":\n            case \"x-ecmascript\":\n            case \"x-javascript\":\n              {\n                return !prohibitParameters || this._parameters.size === 0;\n              }\n            default:\n              {\n                return false;\n              }\n          }\n        }\n      case \"application\":\n        {\n          switch (this._subtype) {\n            case \"ecmascript\":\n            case \"javascript\":\n            case \"x-ecmascript\":\n            case \"x-javascript\":\n              {\n                return !prohibitParameters || this._parameters.size === 0;\n              }\n            default:\n              {\n                return false;\n              }\n          }\n        }\n      default:\n        {\n          return false;\n        }\n    }\n  }\n  isXML() {\n    return this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\") || this._subtype.endsWith(\"+xml\");\n  }\n  isHTML() {\n    return this._subtype === \"html\" && this._type === \"text\";\n  }\n};","map":{"version":3,"names":["MIMETypeParameters","require","parse","serialize","asciiLowercase","solelyContainsHTTPTokenCodePoints","module","exports","MIMEType","constructor","string","String","result","Error","_type","type","_subtype","subtype","_parameters","parameters","e","essence","value","length","toString","isJavaScript","prohibitParameters","size","isXML","endsWith","isHTML"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/whatwg-mimetype/lib/mime-type.js"],"sourcesContent":["\"use strict\";\nconst MIMETypeParameters = require(\"./mime-type-parameters.js\");\nconst parse = require(\"./parser.js\");\nconst serialize = require(\"./serializer.js\");\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMEType {\n  constructor(string) {\n    string = String(string);\n    const result = parse(string);\n    if (result === null) {\n      throw new Error(`Could not parse MIME type string \"${string}\"`);\n    }\n\n    this._type = result.type;\n    this._subtype = result.subtype;\n    this._parameters = new MIMETypeParameters(result.parameters);\n  }\n\n  static parse(string) {\n    try {\n      return new this(string);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  get essence() {\n    return `${this.type}/${this.subtype}`;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid type: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);\n    }\n\n    this._type = value;\n  }\n\n  get subtype() {\n    return this._subtype;\n  }\n\n  set subtype(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid subtype: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);\n    }\n\n    this._subtype = value;\n  }\n\n  get parameters() {\n    return this._parameters;\n  }\n\n  toString() {\n    // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\n    // this class's interface is identical.\n    return serialize(this);\n  }\n\n  isJavaScript({ prohibitParameters = false } = {}) {\n    switch (this._type) {\n      case \"text\": {\n        switch (this._subtype) {\n          case \"ecmascript\":\n          case \"javascript\":\n          case \"javascript1.0\":\n          case \"javascript1.1\":\n          case \"javascript1.2\":\n          case \"javascript1.3\":\n          case \"javascript1.4\":\n          case \"javascript1.5\":\n          case \"jscript\":\n          case \"livescript\":\n          case \"x-ecmascript\":\n          case \"x-javascript\": {\n            return !prohibitParameters || this._parameters.size === 0;\n          }\n          default: {\n            return false;\n          }\n        }\n      }\n      case \"application\": {\n        switch (this._subtype) {\n          case \"ecmascript\":\n          case \"javascript\":\n          case \"x-ecmascript\":\n          case \"x-javascript\": {\n            return !prohibitParameters || this._parameters.size === 0;\n          }\n          default: {\n            return false;\n          }\n        }\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  isXML() {\n    return (this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\")) ||\n           this._subtype.endsWith(\"+xml\");\n  }\n  isHTML() {\n    return this._subtype === \"html\" && this._type === \"text\";\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}