{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveGraphqlOptions = void 0;\nasync function resolveGraphqlOptions(options) {\n  if (typeof options === 'function') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return await options(...args);\n  } else {\n    return options;\n  }\n}\nexports.resolveGraphqlOptions = resolveGraphqlOptions;","map":{"version":3,"mappings":";;;;;;AAuFO,eAAeA,qBAAqB,CACzCC,OAEmE,EAChD;EAEnB,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;IAAA,kCAFhCC,IAAgB;MAAhBA,IAAgB;IAAA;IAGjB,OAAO,MAAMD,OAAO,CAAC,GAAGC,IAAI,CAAC;GAC9B,MAAM;IACL,OAAOD,OAAO;;AAElB;AAXAE","names":["resolveGraphqlOptions","options","args","exports"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\graphqlOptions.ts"],"sourcesContent":["import type {\n  GraphQLSchema,\n  ValidationContext,\n  GraphQLFieldResolver,\n  DocumentNode,\n  GraphQLError,\n  GraphQLFormattedError,\n  ParseOptions,\n} from 'graphql';\nimport type { KeyValueCache } from '@apollo/utils.keyvaluecache';\nimport type { DataSource } from 'apollo-datasource';\nimport type { ApolloServerPlugin } from 'apollo-server-plugin-base';\nimport type {\n  GraphQLExecutor,\n  ValueOrPromise,\n  GraphQLResponse,\n  GraphQLRequestContext,\n  SchemaHash,\n} from 'apollo-server-types';\nimport type { Logger } from '@apollo/utils.logger';\nimport type { DocumentStore } from './types';\n\n/*\n * GraphQLServerOptions\n *\n * - schema: an executable GraphQL schema used to fulfill requests.\n * - (optional) logger: a `Logger`-compatible implementation to be used for server-level messages.\n * - (optional) formatError: Formatting function applied to all errors before response is sent\n * - (optional) rootValue: rootValue passed to GraphQL execution, or a function to resolving the rootValue from the DocumentNode\n * - (optional) context: the context passed to GraphQL execution\n * - (optional) validationRules: extra validation rules applied to requests\n * - (optional) formatResponse: a function applied to each graphQL execution result\n * - (optional) fieldResolver: a custom default field resolver\n * - (optional) debug: a boolean that will print additional debug logging if execution errors occur\n * - (optional) parseOptions: options to pass when parsing schemas and queries\n * - (optional) allowBatchedHttpRequests: a boolean to toggle whether a single request can contain an array of queries. True by default\n *\n */\nexport interface GraphQLServerOptions<\n  TContext = Record<string, any>,\n  TRootValue = any,\n> {\n  schema: GraphQLSchema;\n  /**\n   * @deprecated: a not particularly stable or useful hash of the schema.\n   */\n  schemaHash: SchemaHash;\n  logger?: Logger;\n  formatError?: (error: GraphQLError) => GraphQLFormattedError;\n  rootValue?: ((parsedQuery: DocumentNode) => TRootValue) | TRootValue;\n  context?: TContext | (() => never);\n  validationRules?: Array<(context: ValidationContext) => any>;\n  executor?: GraphQLExecutor;\n  formatResponse?: (\n    response: GraphQLResponse,\n    requestContext: GraphQLRequestContext<TContext>,\n  ) => GraphQLResponse | null;\n  fieldResolver?: GraphQLFieldResolver<any, TContext>;\n  debug?: boolean;\n  dataSources?: () => DataSources<TContext>;\n  cache?: KeyValueCache;\n  persistedQueries?: PersistedQueryOptions;\n  plugins?: ApolloServerPlugin[];\n  documentStore?: DocumentStore | null;\n  parseOptions?: ParseOptions;\n  nodeEnv?: string;\n  allowBatchedHttpRequests?: boolean;\n}\n\nexport type DataSources<TContext> = {\n  [name: string]: DataSource<TContext>;\n};\n\nexport interface PersistedQueryOptions {\n  cache?: KeyValueCache;\n  /**\n   * Specified in **seconds**, this time-to-live (TTL) value limits the lifespan\n   * of how long the persisted query should be cached.  To specify a desired\n   * lifespan of \"infinite\", set this to `null`, in which case the eviction will\n   * be determined by the cache's eviction policy, but the record will never\n   * simply expire.\n   */\n  ttl?: number | null;\n}\n\nexport default GraphQLServerOptions;\n\nexport async function resolveGraphqlOptions(\n  options:\n    | GraphQLServerOptions\n    | ((...args: Array<any>) => ValueOrPromise<GraphQLServerOptions>),\n  ...args: Array<any>\n): Promise<GraphQLServerOptions> {\n  if (typeof options === 'function') {\n    return await options(...args);\n  } else {\n    return options;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}