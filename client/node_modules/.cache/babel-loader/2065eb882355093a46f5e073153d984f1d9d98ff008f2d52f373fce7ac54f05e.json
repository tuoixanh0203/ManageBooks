{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeCoreSchemaHash = exports.ApolloServerPluginSchemaReporting = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst graphql_1 = require(\"graphql\");\nconst schemaReporter_1 = require(\"./schemaReporter\");\nconst createSHA_1 = __importDefault(require(\"../../utils/createSHA\"));\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\nfunction ApolloServerPluginSchemaReporting() {\n  let {\n    initialDelayMaxMs,\n    overrideReportedSchema,\n    endpointUrl,\n    fetcher\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  const bootId = (0, uuid_1.v4)();\n  return {\n    __internal_plugin_id__() {\n      return 'SchemaReporting';\n    },\n    async serverWillStart(_ref) {\n      let {\n        apollo,\n        schema,\n        logger\n      } = _ref;\n      const {\n        key,\n        graphRef\n      } = apollo;\n      if (!key) {\n        throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' + 'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n      }\n      if (!graphRef) {\n        throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' + \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" + 'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n      }\n      if (overrideReportedSchema) {\n        try {\n          const validationErrors = (0, graphql_1.validateSchema)((0, graphql_1.buildSchema)(overrideReportedSchema, {\n            noLocation: true\n          }));\n          if (validationErrors.length) {\n            throw new Error(validationErrors.map(error => error.message).join('\\n'));\n          }\n        } catch (err) {\n          throw new Error('The schema provided to overrideReportedSchema failed to parse or ' + `validate: ${err.message}`);\n        }\n      }\n      if ((0, schemaIsFederated_1.schemaIsFederated)(schema)) {\n        throw Error(['Schema reporting is not yet compatible with federated services.', \"If you're interested in using schema reporting with federated\", 'services, please contact Apollo support. To set up managed federation, see', 'https://go.apollo.dev/s/managed-federation'].join(' '));\n      }\n      if (endpointUrl !== undefined) {\n        logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n      }\n      const baseSchemaReport = {\n        bootId,\n        graphRef,\n        platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n        runtimeVersion: `node ${process.version}`,\n        userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n        serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os_1.default.hostname(),\n        libraryVersion: `apollo-server-core@${require('../../../package.json').version}`\n      };\n      let currentSchemaReporter;\n      return {\n        schemaDidLoadOrUpdate(_ref2) {\n          let {\n            apiSchema,\n            coreSupergraphSdl\n          } = _ref2;\n          var _a;\n          if (overrideReportedSchema !== undefined) {\n            if (currentSchemaReporter) {\n              return;\n            } else {\n              logger.info('Apollo schema reporting: schema to report has been overridden');\n            }\n          }\n          const coreSchema = (_a = overrideReportedSchema !== null && overrideReportedSchema !== void 0 ? overrideReportedSchema : coreSupergraphSdl) !== null && _a !== void 0 ? _a : (0, graphql_1.printSchema)(apiSchema);\n          const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n          const schemaReport = {\n            ...baseSchemaReport,\n            coreSchemaHash\n          };\n          currentSchemaReporter === null || currentSchemaReporter === void 0 ? void 0 : currentSchemaReporter.stop();\n          currentSchemaReporter = new schemaReporter_1.SchemaReporter({\n            schemaReport,\n            coreSchema,\n            apiKey: key,\n            endpointUrl,\n            logger,\n            initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs !== null && initialDelayMaxMs !== void 0 ? initialDelayMaxMs : 10000)),\n            fallbackReportingDelayInMs: 20000,\n            fetcher\n          });\n          currentSchemaReporter.start();\n          logger.info('Apollo schema reporting: reporting a new schema to Studio! See your graph at ' + `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n        },\n        async serverWillStop() {\n          currentSchemaReporter === null || currentSchemaReporter === void 0 ? void 0 : currentSchemaReporter.stop();\n        }\n      };\n    }\n  };\n}\nexports.ApolloServerPluginSchemaReporting = ApolloServerPluginSchemaReporting;\nfunction computeCoreSchemaHash(schema) {\n  return (0, createSHA_1.default)('sha256').update(schema).digest('hex');\n}\nexports.computeCoreSchemaHash = computeCoreSchemaHash;","map":{"version":3,"mappings":"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","names":["ApolloServerPluginSchemaReporting","initialDelayMaxMs","overrideReportedSchema","endpointUrl","fetcher","Object","create","bootId","__internal_plugin_id__","serverWillStart","apollo","schema","logger","key","graphRef","Error","validationErrors","noLocation","length","map","error","message","join","err","undefined","info","baseSchemaReport","platform","process","env","APOLLO_SERVER_PLATFORM","runtimeVersion","version","userVersion","APOLLO_SERVER_USER_VERSION","serverId","APOLLO_SERVER_ID","HOSTNAME","os_1","hostname","libraryVersion","require","currentSchemaReporter","schemaDidLoadOrUpdate","apiSchema","coreSupergraphSdl","coreSchema","coreSchemaHash","computeCoreSchemaHash","schemaReport","stop","schemaReporter_1","apiKey","initialReportingDelayInMs","Math","floor","random","fallbackReportingDelayInMs","start","encodeURI","JSON","stringify","serverWillStop","exports","update","digest"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\plugin\\schemaReporting\\index.ts"],"sourcesContent":["import os from 'os';\nimport type { InternalApolloServerPlugin } from '../../internalPlugin';\nimport { v4 as uuidv4 } from 'uuid';\nimport { printSchema, validateSchema, buildSchema } from 'graphql';\nimport type { fetch } from 'apollo-server-env';\nimport { SchemaReporter } from './schemaReporter';\nimport createSHA from '../../utils/createSHA';\nimport { schemaIsFederated } from '../schemaIsFederated';\nimport type { SchemaReport } from './generated/operations';\n\nexport interface ApolloServerPluginSchemaReportingOptions {\n  /**\n   * The schema reporter waits before starting reporting.\n   * By default, the report waits some random amount of time between 0 and 10 seconds.\n   * A longer interval leads to more staggered starts which means it is less likely\n   * multiple servers will get asked to upload the same schema.\n   *\n   * If this server runs in lambda or in other constrained environments it would be useful\n   * to decrease the schema reporting max wait time to be less than default.\n   *\n   * This number will be the max for the range in ms that the schema reporter will\n   * wait before starting to report.\n   */\n  initialDelayMaxMs?: number;\n  /**\n   * Override the reported schema that is reported to the Apollo registry. This\n   * schema does not go through any normalizations and the string is directly\n   * sent to the Apollo registry. This can be useful for comments or other\n   * ordering and whitespace changes that get stripped when generating a\n   * `GraphQLSchema`.\n   *\n   * **If you pass this option to this plugin, you should explicitly configure\n   * `ApolloServerPluginUsageReporting` and pass the same value to its\n   * `overrideReportedSchema` option.** This ensures that the schema ID\n   * associated with requests reported by the usage reporting plugin matches the\n   * schema ID that this plugin reports. For example:\n   *\n   * ```js\n   * new ApolloServer({\n   *   plugins: [\n   *     ApolloServerPluginSchemaReporting({overrideReportedSchema: schema}),\n   *     ApolloServerPluginUsageReporting({overrideReportedSchema: schema}),\n   *   ],\n   * })\n   * ```\n   */\n  overrideReportedSchema?: string;\n  /**\n   * The URL to use for reporting schemas. Primarily for testing and internal\n   * Apollo use.\n   */\n  endpointUrl?: string;\n  /**\n   * Specifies which Fetch API implementation to use when reporting schemas.\n   */\n  fetcher?: typeof fetch;\n}\n\nexport function ApolloServerPluginSchemaReporting(\n  {\n    initialDelayMaxMs,\n    overrideReportedSchema,\n    endpointUrl,\n    fetcher,\n  }: ApolloServerPluginSchemaReportingOptions = Object.create(null),\n): InternalApolloServerPlugin {\n  const bootId = uuidv4();\n\n  return {\n    __internal_plugin_id__() {\n      return 'SchemaReporting';\n    },\n    async serverWillStart({ apollo, schema, logger }) {\n      const { key, graphRef } = apollo;\n      if (!key) {\n        throw Error(\n          'To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' +\n            'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`',\n        );\n      }\n      if (!graphRef) {\n        // This error is a bit imprecise as you can also specify ID and variant separately,\n        // or rely on API-key parsing (before AS3), but this is \"best practices\".\n        throw Error(\n          'To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' +\n            \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" +\n            'variable or passing `new ApolloServer({apollo: {graphRef}})`.',\n        );\n      }\n\n      // Ensure a provided override schema can be parsed and validated\n      if (overrideReportedSchema) {\n        try {\n          const validationErrors = validateSchema(\n            buildSchema(overrideReportedSchema, { noLocation: true }),\n          );\n          if (validationErrors.length) {\n            throw new Error(\n              validationErrors.map((error) => error.message).join('\\n'),\n            );\n          }\n        } catch (err) {\n          throw new Error(\n            'The schema provided to overrideReportedSchema failed to parse or ' +\n              `validate: ${(err as Error).message}`,\n          );\n        }\n      }\n\n      if (schemaIsFederated(schema)) {\n        throw Error(\n          [\n            'Schema reporting is not yet compatible with federated services.',\n            \"If you're interested in using schema reporting with federated\",\n            'services, please contact Apollo support. To set up managed federation, see',\n            'https://go.apollo.dev/s/managed-federation',\n          ].join(' '),\n        );\n      }\n\n      if (endpointUrl !== undefined) {\n        logger.info(\n          `Apollo schema reporting: schema reporting URL override: ${endpointUrl}`,\n        );\n      }\n\n      const baseSchemaReport: Omit<SchemaReport, 'coreSchemaHash'> = {\n        bootId,\n        graphRef,\n        // The infra environment in which this edge server is running, e.g. localhost, Kubernetes\n        // Length must be <= 256 characters.\n        platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n        runtimeVersion: `node ${process.version}`,\n        // An identifier used to distinguish the version of the server code such as git or docker sha.\n        // Length must be <= 256 characters\n        userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n        // \"An identifier for the server instance. Length must be <= 256 characters.\n        serverId:\n          process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os.hostname(),\n        libraryVersion: `apollo-server-core@${\n          require('../../../package.json').version\n        }`,\n      };\n      let currentSchemaReporter: SchemaReporter | undefined;\n\n      return {\n        schemaDidLoadOrUpdate({ apiSchema, coreSupergraphSdl }): void {\n          if (overrideReportedSchema !== undefined) {\n            if (currentSchemaReporter) {\n              // When the schema to report has been overridden, there is no need\n              // to create a new schema reporter.\n              return;\n            } else {\n              logger.info(\n                'Apollo schema reporting: schema to report has been overridden',\n              );\n            }\n          }\n\n          const coreSchema =\n            overrideReportedSchema ??\n            coreSupergraphSdl ??\n            printSchema(apiSchema);\n          const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n          const schemaReport: SchemaReport = {\n            ...baseSchemaReport,\n            coreSchemaHash,\n          };\n\n          currentSchemaReporter?.stop();\n          currentSchemaReporter = new SchemaReporter({\n            schemaReport,\n            coreSchema,\n            apiKey: key,\n            endpointUrl,\n            logger,\n            // Jitter the startup between 0 and 10 seconds\n            initialReportingDelayInMs: Math.floor(\n              Math.random() * (initialDelayMaxMs ?? 10_000),\n            ),\n            fallbackReportingDelayInMs: 20_000,\n            fetcher,\n          });\n          currentSchemaReporter.start();\n\n          logger.info(\n            'Apollo schema reporting: reporting a new schema to Studio! See your graph at ' +\n              `https://studio.apollographql.com/graph/${encodeURI(\n                graphRef,\n              )}/ with server info ${JSON.stringify(schemaReport)}`,\n          );\n        },\n        async serverWillStop() {\n          currentSchemaReporter?.stop();\n        },\n      };\n    },\n  };\n}\n\nexport function computeCoreSchemaHash(schema: string): string {\n  return createSHA('sha256').update(schema).digest('hex');\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}