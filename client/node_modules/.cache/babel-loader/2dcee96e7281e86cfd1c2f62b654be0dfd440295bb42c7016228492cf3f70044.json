{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.modifyObjectFields = exports.selectObjectFields = exports.removeObjectFields = exports.appendObjectFields = void 0;\nconst graphql_1 = require(\"graphql\");\nconst Interfaces_js_1 = require(\"./Interfaces.js\");\nconst mapSchema_js_1 = require(\"./mapSchema.js\");\nconst addTypes_js_1 = require(\"./addTypes.js\");\nfunction appendObjectFields(schema, typeName, additionalFields) {\n  if (schema.getType(typeName) == null) {\n    return (0, addTypes_js_1.addTypes)(schema, [new graphql_1.GraphQLObjectType({\n      name: typeName,\n      fields: additionalFields\n    })]);\n  }\n  return (0, mapSchema_js_1.mapSchema)(schema, {\n    [Interfaces_js_1.MapperKind.OBJECT_TYPE]: type => {\n      if (type.name === typeName) {\n        const config = type.toConfig();\n        const originalFieldConfigMap = config.fields;\n        const newFieldConfigMap = {};\n        for (const fieldName in originalFieldConfigMap) {\n          newFieldConfigMap[fieldName] = originalFieldConfigMap[fieldName];\n        }\n        for (const fieldName in additionalFields) {\n          newFieldConfigMap[fieldName] = additionalFields[fieldName];\n        }\n        return (0, mapSchema_js_1.correctASTNodes)(new graphql_1.GraphQLObjectType({\n          ...config,\n          fields: newFieldConfigMap\n        }));\n      }\n    }\n  });\n}\nexports.appendObjectFields = appendObjectFields;\nfunction removeObjectFields(schema, typeName, testFn) {\n  const removedFields = {};\n  const newSchema = (0, mapSchema_js_1.mapSchema)(schema, {\n    [Interfaces_js_1.MapperKind.OBJECT_TYPE]: type => {\n      if (type.name === typeName) {\n        const config = type.toConfig();\n        const originalFieldConfigMap = config.fields;\n        const newFieldConfigMap = {};\n        for (const fieldName in originalFieldConfigMap) {\n          const originalFieldConfig = originalFieldConfigMap[fieldName];\n          if (testFn(fieldName, originalFieldConfig)) {\n            removedFields[fieldName] = originalFieldConfig;\n          } else {\n            newFieldConfigMap[fieldName] = originalFieldConfig;\n          }\n        }\n        return (0, mapSchema_js_1.correctASTNodes)(new graphql_1.GraphQLObjectType({\n          ...config,\n          fields: newFieldConfigMap\n        }));\n      }\n    }\n  });\n  return [newSchema, removedFields];\n}\nexports.removeObjectFields = removeObjectFields;\nfunction selectObjectFields(schema, typeName, testFn) {\n  const selectedFields = {};\n  (0, mapSchema_js_1.mapSchema)(schema, {\n    [Interfaces_js_1.MapperKind.OBJECT_TYPE]: type => {\n      if (type.name === typeName) {\n        const config = type.toConfig();\n        const originalFieldConfigMap = config.fields;\n        for (const fieldName in originalFieldConfigMap) {\n          const originalFieldConfig = originalFieldConfigMap[fieldName];\n          if (testFn(fieldName, originalFieldConfig)) {\n            selectedFields[fieldName] = originalFieldConfig;\n          }\n        }\n      }\n      return undefined;\n    }\n  });\n  return selectedFields;\n}\nexports.selectObjectFields = selectObjectFields;\nfunction modifyObjectFields(schema, typeName, testFn, newFields) {\n  const removedFields = {};\n  const newSchema = (0, mapSchema_js_1.mapSchema)(schema, {\n    [Interfaces_js_1.MapperKind.OBJECT_TYPE]: type => {\n      if (type.name === typeName) {\n        const config = type.toConfig();\n        const originalFieldConfigMap = config.fields;\n        const newFieldConfigMap = {};\n        for (const fieldName in originalFieldConfigMap) {\n          const originalFieldConfig = originalFieldConfigMap[fieldName];\n          if (testFn(fieldName, originalFieldConfig)) {\n            removedFields[fieldName] = originalFieldConfig;\n          } else {\n            newFieldConfigMap[fieldName] = originalFieldConfig;\n          }\n        }\n        for (const fieldName in newFields) {\n          const fieldConfig = newFields[fieldName];\n          newFieldConfigMap[fieldName] = fieldConfig;\n        }\n        return (0, mapSchema_js_1.correctASTNodes)(new graphql_1.GraphQLObjectType({\n          ...config,\n          fields: newFieldConfigMap\n        }));\n      }\n    }\n  });\n  return [newSchema, removedFields];\n}\nexports.modifyObjectFields = modifyObjectFields;","map":{"version":3,"names":["Object","defineProperty","exports","value","modifyObjectFields","selectObjectFields","removeObjectFields","appendObjectFields","graphql_1","require","Interfaces_js_1","mapSchema_js_1","addTypes_js_1","schema","typeName","additionalFields","getType","addTypes","GraphQLObjectType","name","fields","mapSchema","MapperKind","OBJECT_TYPE","type","config","toConfig","originalFieldConfigMap","newFieldConfigMap","fieldName","correctASTNodes","testFn","removedFields","newSchema","originalFieldConfig","selectedFields","undefined","newFields","fieldConfig"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/schema/node_modules/@graphql-tools/utils/cjs/fields.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.modifyObjectFields = exports.selectObjectFields = exports.removeObjectFields = exports.appendObjectFields = void 0;\nconst graphql_1 = require(\"graphql\");\nconst Interfaces_js_1 = require(\"./Interfaces.js\");\nconst mapSchema_js_1 = require(\"./mapSchema.js\");\nconst addTypes_js_1 = require(\"./addTypes.js\");\nfunction appendObjectFields(schema, typeName, additionalFields) {\n    if (schema.getType(typeName) == null) {\n        return (0, addTypes_js_1.addTypes)(schema, [\n            new graphql_1.GraphQLObjectType({\n                name: typeName,\n                fields: additionalFields,\n            }),\n        ]);\n    }\n    return (0, mapSchema_js_1.mapSchema)(schema, {\n        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    newFieldConfigMap[fieldName] = originalFieldConfigMap[fieldName];\n                }\n                for (const fieldName in additionalFields) {\n                    newFieldConfigMap[fieldName] = additionalFields[fieldName];\n                }\n                return (0, mapSchema_js_1.correctASTNodes)(new graphql_1.GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n}\nexports.appendObjectFields = appendObjectFields;\nfunction removeObjectFields(schema, typeName, testFn) {\n    const removedFields = {};\n    const newSchema = (0, mapSchema_js_1.mapSchema)(schema, {\n        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        removedFields[fieldName] = originalFieldConfig;\n                    }\n                    else {\n                        newFieldConfigMap[fieldName] = originalFieldConfig;\n                    }\n                }\n                return (0, mapSchema_js_1.correctASTNodes)(new graphql_1.GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n    return [newSchema, removedFields];\n}\nexports.removeObjectFields = removeObjectFields;\nfunction selectObjectFields(schema, typeName, testFn) {\n    const selectedFields = {};\n    (0, mapSchema_js_1.mapSchema)(schema, {\n        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        selectedFields[fieldName] = originalFieldConfig;\n                    }\n                }\n            }\n            return undefined;\n        },\n    });\n    return selectedFields;\n}\nexports.selectObjectFields = selectObjectFields;\nfunction modifyObjectFields(schema, typeName, testFn, newFields) {\n    const removedFields = {};\n    const newSchema = (0, mapSchema_js_1.mapSchema)(schema, {\n        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        removedFields[fieldName] = originalFieldConfig;\n                    }\n                    else {\n                        newFieldConfigMap[fieldName] = originalFieldConfig;\n                    }\n                }\n                for (const fieldName in newFields) {\n                    const fieldConfig = newFields[fieldName];\n                    newFieldConfigMap[fieldName] = fieldConfig;\n                }\n                return (0, mapSchema_js_1.correctASTNodes)(new graphql_1.GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n    return [newSchema, removedFields];\n}\nexports.modifyObjectFields = modifyObjectFields;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}