{"ast":null,"code":"const perf = typeof performance === 'object' && performance && typeof performance.now === 'function' ? performance : Date;\nconst hasAbortController = typeof AbortController === 'function';\n\n// minimal backwards-compatibility polyfill\n// this doesn't have nearly all the checks and whatnot that\n// actual AbortController/Signal has, but it's enough for\n// our purposes, and if used properly, behaves the same.\nconst AC = hasAbortController ? AbortController : class AbortController {\n  constructor() {\n    this.signal = new AS();\n  }\n  abort() {\n    this.signal.dispatchEvent('abort');\n  }\n};\nconst hasAbortSignal = typeof AbortSignal === 'function';\n// Some polyfills put this on the AC class, not global\nconst hasACAbortSignal = typeof AC.AbortSignal === 'function';\nconst AS = hasAbortSignal ? AbortSignal : hasACAbortSignal ? AC.AbortController : class AbortSignal {\n  constructor() {\n    this.aborted = false;\n    this._listeners = [];\n  }\n  dispatchEvent(type) {\n    if (type === 'abort') {\n      this.aborted = true;\n      const e = {\n        type,\n        target: this\n      };\n      this.onabort(e);\n      this._listeners.forEach(f => f(e), this);\n    }\n  }\n  onabort() {}\n  addEventListener(ev, fn) {\n    if (ev === 'abort') {\n      this._listeners.push(fn);\n    }\n  }\n  removeEventListener(ev, fn) {\n    if (ev === 'abort') {\n      this._listeners = this._listeners.filter(f => f !== fn);\n    }\n  }\n};\nconst warned = new Set();\nconst deprecatedOption = (opt, instead) => {\n  const code = `LRU_CACHE_OPTION_${opt}`;\n  if (shouldWarn(code)) {\n    warn(code, `${opt} option`, `options.${instead}`, LRUCache);\n  }\n};\nconst deprecatedMethod = (method, instead) => {\n  const code = `LRU_CACHE_METHOD_${method}`;\n  if (shouldWarn(code)) {\n    const {\n      prototype\n    } = LRUCache;\n    const {\n      get\n    } = Object.getOwnPropertyDescriptor(prototype, method);\n    warn(code, `${method} method`, `cache.${instead}()`, get);\n  }\n};\nconst deprecatedProperty = (field, instead) => {\n  const code = `LRU_CACHE_PROPERTY_${field}`;\n  if (shouldWarn(code)) {\n    const {\n      prototype\n    } = LRUCache;\n    const {\n      get\n    } = Object.getOwnPropertyDescriptor(prototype, field);\n    warn(code, `${field} property`, `cache.${instead}`, get);\n  }\n};\nconst emitWarning = function () {\n  typeof process === 'object' && process && typeof process.emitWarning === 'function' ? process.emitWarning(...arguments) : console.error(...arguments);\n};\nconst shouldWarn = code => !warned.has(code);\nconst warn = (code, what, instead, fn) => {\n  warned.add(code);\n  const msg = `The ${what} is deprecated. Please use ${instead} instead.`;\n  emitWarning(msg, 'DeprecationWarning', code, fn);\n};\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n);\n\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */\nconst getUintArray = max => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;\nclass ZeroArray extends Array {\n  constructor(size) {\n    super(size);\n    this.fill(0);\n  }\n}\nclass Stack {\n  constructor(max) {\n    if (max === 0) {\n      return [];\n    }\n    const UintArray = getUintArray(max);\n    this.heap = new UintArray(max);\n    this.length = 0;\n  }\n  push(n) {\n    this.heap[this.length++] = n;\n  }\n  pop() {\n    return this.heap[--this.length];\n  }\n}\nclass LRUCache {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      sizeCalculation,\n      fetchMethod,\n      fetchContext,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet\n    } = options;\n\n    // deprecated options, don't trigger a warning for getting them if\n    // the thing being passed in is another LRUCache we're copying.\n    const {\n      length,\n      maxAge,\n      stale\n    } = options instanceof LRUCache ? {} : options;\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer');\n    }\n    const UintArray = max ? getUintArray(max) : Array;\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max);\n    }\n    this.max = max;\n    this.maxSize = maxSize;\n    this.sizeCalculation = sizeCalculation || length;\n    if (this.sizeCalculation) {\n      if (!this.maxSize) {\n        throw new TypeError('cannot set sizeCalculation without setting maxSize');\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function');\n      }\n    }\n    this.fetchMethod = fetchMethod || null;\n    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {\n      throw new TypeError('fetchMethod must be a function if specified');\n    }\n    this.fetchContext = fetchContext;\n    if (!this.fetchMethod && fetchContext !== undefined) {\n      throw new TypeError('cannot set fetchContext without fetchMethod');\n    }\n    this.keyMap = new Map();\n    this.keyList = new Array(max).fill(null);\n    this.valList = new Array(max).fill(null);\n    this.next = new UintArray(max);\n    this.prev = new UintArray(max);\n    this.head = 0;\n    this.tail = 0;\n    this.free = new Stack(max);\n    this.initialFill = 1;\n    this.size = 0;\n    if (typeof dispose === 'function') {\n      this.dispose = dispose;\n    }\n    if (typeof disposeAfter === 'function') {\n      this.disposeAfter = disposeAfter;\n      this.disposed = [];\n    } else {\n      this.disposeAfter = null;\n      this.disposed = null;\n    }\n    this.noDisposeOnSet = !!noDisposeOnSet;\n    this.noUpdateTTL = !!noUpdateTTL;\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;\n    if (this.maxSize !== 0) {\n      if (!isPosInt(this.maxSize)) {\n        throw new TypeError('maxSize must be a positive integer if specified');\n      }\n      this.initializeSizeTracking();\n    }\n    this.allowStale = !!allowStale || !!stale;\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;\n    this.updateAgeOnGet = !!updateAgeOnGet;\n    this.updateAgeOnHas = !!updateAgeOnHas;\n    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;\n    this.ttlAutopurge = !!ttlAutopurge;\n    this.ttl = ttl || maxAge || 0;\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError('ttl must be a positive integer if specified');\n      }\n      this.initializeTTLTracking();\n    }\n\n    // do not allow completely unbounded caches\n    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n      throw new TypeError('At least one of max, maxSize, or ttl is required');\n    }\n    if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED';\n      if (shouldWarn(code)) {\n        warned.add(code);\n        const msg = 'TTL caching without ttlAutopurge, max, or maxSize can ' + 'result in unbounded memory consumption.';\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);\n      }\n    }\n    if (stale) {\n      deprecatedOption('stale', 'allowStale');\n    }\n    if (maxAge) {\n      deprecatedOption('maxAge', 'ttl');\n    }\n    if (length) {\n      deprecatedOption('length', 'sizeCalculation');\n    }\n  }\n  getRemainingTTL(key) {\n    return this.has(key, {\n      updateAgeOnHas: false\n    }) ? Infinity : 0;\n  }\n  initializeTTLTracking() {\n    var _this = this;\n    this.ttls = new ZeroArray(this.max);\n    this.starts = new ZeroArray(this.max);\n    this.setItemTTL = function (index, ttl) {\n      let start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : perf.now();\n      _this.starts[index] = ttl !== 0 ? start : 0;\n      _this.ttls[index] = ttl;\n      if (ttl !== 0 && _this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (_this.isStale(index)) {\n            _this.delete(_this.keyList[index]);\n          }\n        }, ttl + 1);\n        /* istanbul ignore else - unref() not supported on all platforms */\n        if (t.unref) {\n          t.unref();\n        }\n      }\n    };\n    this.updateItemAge = index => {\n      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0;\n    };\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0;\n    const getNow = () => {\n      const n = perf.now();\n      if (this.ttlResolution > 0) {\n        cachedNow = n;\n        const t = setTimeout(() => cachedNow = 0, this.ttlResolution);\n        /* istanbul ignore else - not available on all platforms */\n        if (t.unref) {\n          t.unref();\n        }\n      }\n      return n;\n    };\n    this.getRemainingTTL = key => {\n      const index = this.keyMap.get(key);\n      if (index === undefined) {\n        return 0;\n      }\n      return this.ttls[index] === 0 || this.starts[index] === 0 ? Infinity : this.starts[index] + this.ttls[index] - (cachedNow || getNow());\n    };\n    this.isStale = index => {\n      return this.ttls[index] !== 0 && this.starts[index] !== 0 && (cachedNow || getNow()) - this.starts[index] > this.ttls[index];\n    };\n  }\n  updateItemAge(index) {}\n  setItemTTL(index, ttl, start) {}\n  isStale(index) {\n    return false;\n  }\n  initializeSizeTracking() {\n    this.calculatedSize = 0;\n    this.sizes = new ZeroArray(this.max);\n    this.removeItemSize = index => {\n      this.calculatedSize -= this.sizes[index];\n      this.sizes[index] = 0;\n    };\n    this.requireSize = (k, v, size, sizeCalculation) => {\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function');\n          }\n          size = sizeCalculation(v, k);\n          if (!isPosInt(size)) {\n            throw new TypeError('sizeCalculation return invalid (expect positive integer)');\n          }\n        } else {\n          throw new TypeError('invalid size value (must be positive integer)');\n        }\n      }\n      return size;\n    };\n    this.addItemSize = (index, size) => {\n      this.sizes[index] = size;\n      const maxSize = this.maxSize - this.sizes[index];\n      while (this.calculatedSize > maxSize) {\n        this.evict(true);\n      }\n      this.calculatedSize += this.sizes[index];\n    };\n  }\n  removeItemSize(index) {}\n  addItemSize(index, size) {}\n  requireSize(k, v, size, sizeCalculation) {\n    if (size || sizeCalculation) {\n      throw new TypeError('cannot set size without setting maxSize on cache');\n    }\n  }\n  indexes() {\n    var _this2 = this;\n    let {\n      allowStale = this.allowStale\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function* () {\n      if (_this2.size) {\n        for (let i = _this2.tail; true;) {\n          if (!_this2.isValidIndex(i)) {\n            break;\n          }\n          if (allowStale || !_this2.isStale(i)) {\n            yield i;\n          }\n          if (i === _this2.head) {\n            break;\n          } else {\n            i = _this2.prev[i];\n          }\n        }\n      }\n    }();\n  }\n  rindexes() {\n    var _this3 = this;\n    let {\n      allowStale = this.allowStale\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function* () {\n      if (_this3.size) {\n        for (let i = _this3.head; true;) {\n          if (!_this3.isValidIndex(i)) {\n            break;\n          }\n          if (allowStale || !_this3.isStale(i)) {\n            yield i;\n          }\n          if (i === _this3.tail) {\n            break;\n          } else {\n            i = _this3.next[i];\n          }\n        }\n      }\n    }();\n  }\n  isValidIndex(index) {\n    return this.keyMap.get(this.keyList[index]) === index;\n  }\n  *entries() {\n    for (const i of this.indexes()) {\n      yield [this.keyList[i], this.valList[i]];\n    }\n  }\n  *rentries() {\n    for (const i of this.rindexes()) {\n      yield [this.keyList[i], this.valList[i]];\n    }\n  }\n  *keys() {\n    for (const i of this.indexes()) {\n      yield this.keyList[i];\n    }\n  }\n  *rkeys() {\n    for (const i of this.rindexes()) {\n      yield this.keyList[i];\n    }\n  }\n  *values() {\n    for (const i of this.indexes()) {\n      yield this.valList[i];\n    }\n  }\n  *rvalues() {\n    for (const i of this.rindexes()) {\n      yield this.valList[i];\n    }\n  }\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  find(fn) {\n    let getOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (const i of this.indexes()) {\n      if (fn(this.valList[i], this.keyList[i], this)) {\n        return this.get(this.keyList[i], getOptions);\n      }\n    }\n  }\n  forEach(fn) {\n    let thisp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    for (const i of this.indexes()) {\n      fn.call(thisp, this.valList[i], this.keyList[i], this);\n    }\n  }\n  rforEach(fn) {\n    let thisp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    for (const i of this.rindexes()) {\n      fn.call(thisp, this.valList[i], this.keyList[i], this);\n    }\n  }\n  get prune() {\n    deprecatedMethod('prune', 'purgeStale');\n    return this.purgeStale;\n  }\n  purgeStale() {\n    let deleted = false;\n    for (const i of this.rindexes({\n      allowStale: true\n    })) {\n      if (this.isStale(i)) {\n        this.delete(this.keyList[i]);\n        deleted = true;\n      }\n    }\n    return deleted;\n  }\n  dump() {\n    const arr = [];\n    for (const i of this.indexes({\n      allowStale: true\n    })) {\n      const key = this.keyList[i];\n      const v = this.valList[i];\n      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n      const entry = {\n        value\n      };\n      if (this.ttls) {\n        entry.ttl = this.ttls[i];\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - this.starts[i];\n        entry.start = Math.floor(Date.now() - age);\n      }\n      if (this.sizes) {\n        entry.size = this.sizes[i];\n      }\n      arr.unshift([key, entry]);\n    }\n    return arr;\n  }\n  load(arr) {\n    this.clear();\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset.\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start;\n        entry.start = perf.now() - age;\n      }\n      this.set(key, entry.value, entry);\n    }\n  }\n  dispose(v, k, reason) {}\n  set(k, v) {\n    let {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    size = this.requireSize(k, v, size, sizeCalculation);\n    // if the item doesn't fit, don't do anything\n    if (this.maxSize && size > this.maxSize) {\n      return this;\n    }\n    let index = this.size === 0 ? undefined : this.keyMap.get(k);\n    if (index === undefined) {\n      // addition\n      index = this.newIndex();\n      this.keyList[index] = k;\n      this.valList[index] = v;\n      this.keyMap.set(k, index);\n      this.next[this.tail] = index;\n      this.prev[index] = this.tail;\n      this.tail = index;\n      this.size++;\n      this.addItemSize(index, size);\n      noUpdateTTL = false;\n    } else {\n      // update\n      const oldVal = this.valList[index];\n      if (v !== oldVal) {\n        if (this.isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort();\n        } else {\n          if (!noDisposeOnSet) {\n            this.dispose(oldVal, k, 'set');\n            if (this.disposeAfter) {\n              this.disposed.push([oldVal, k, 'set']);\n            }\n          }\n        }\n        this.removeItemSize(index);\n        this.valList[index] = v;\n        this.addItemSize(index, size);\n      }\n      this.moveToTail(index);\n    }\n    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n      this.initializeTTLTracking();\n    }\n    if (!noUpdateTTL) {\n      this.setItemTTL(index, ttl, start);\n    }\n    if (this.disposeAfter) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift());\n      }\n    }\n    return this;\n  }\n  newIndex() {\n    if (this.size === 0) {\n      return this.tail;\n    }\n    if (this.size === this.max && this.max !== 0) {\n      return this.evict(false);\n    }\n    if (this.free.length !== 0) {\n      return this.free.pop();\n    }\n    // initial fill, just keep writing down the list\n    return this.initialFill++;\n  }\n  pop() {\n    if (this.size) {\n      const val = this.valList[this.head];\n      this.evict(true);\n      return val;\n    }\n  }\n  evict(free) {\n    const head = this.head;\n    const k = this.keyList[head];\n    const v = this.valList[head];\n    if (this.isBackgroundFetch(v)) {\n      v.__abortController.abort();\n    } else {\n      this.dispose(v, k, 'evict');\n      if (this.disposeAfter) {\n        this.disposed.push([v, k, 'evict']);\n      }\n    }\n    this.removeItemSize(head);\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.keyList[head] = null;\n      this.valList[head] = null;\n      this.free.push(head);\n    }\n    this.head = this.next[head];\n    this.keyMap.delete(k);\n    this.size--;\n    return head;\n  }\n  has(k) {\n    let {\n      updateAgeOnHas = this.updateAgeOnHas\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const index = this.keyMap.get(k);\n    if (index !== undefined) {\n      if (!this.isStale(index)) {\n        if (updateAgeOnHas) {\n          this.updateItemAge(index);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // like get(), but without any LRU updating or TTL expiration\n  peek(k) {\n    let {\n      allowStale = this.allowStale\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const index = this.keyMap.get(k);\n    if (index !== undefined && (allowStale || !this.isStale(index))) {\n      const v = this.valList[index];\n      // either stale and allowed, or forcing a refresh of non-stale value\n      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n    }\n  }\n  backgroundFetch(k, index, options, context) {\n    const v = index === undefined ? undefined : this.valList[index];\n    if (this.isBackgroundFetch(v)) {\n      return v;\n    }\n    const ac = new AC();\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context\n    };\n    const cb = v => {\n      if (!ac.signal.aborted) {\n        this.set(k, v, fetchOpts.options);\n      }\n      return v;\n    };\n    const eb = er => {\n      if (this.valList[index] === p) {\n        const del = !options.noDeleteOnFetchRejection || p.__staleWhileFetching === undefined;\n        if (del) {\n          this.delete(k);\n        } else {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          this.valList[index] = p.__staleWhileFetching;\n        }\n      }\n      if (p.__returned === p) {\n        throw er;\n      }\n    };\n    const pcall = res => res(this.fetchMethod(k, v, fetchOpts));\n    const p = new Promise(pcall).then(cb, eb);\n    p.__abortController = ac;\n    p.__staleWhileFetching = v;\n    p.__returned = null;\n    if (index === undefined) {\n      this.set(k, p, fetchOpts.options);\n      index = this.keyMap.get(k);\n    } else {\n      this.valList[index] = p;\n    }\n    return p;\n  }\n  isBackgroundFetch(p) {\n    return p && typeof p === 'object' && typeof p.then === 'function' && Object.prototype.hasOwnProperty.call(p, '__staleWhileFetching') && Object.prototype.hasOwnProperty.call(p, '__returned') && (p.__returned === p || p.__returned === null);\n  }\n\n  // this takes the union of get() and set() opts, because it does both\n  async fetch(k) {\n    let {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      fetchContext = this.fetchContext,\n      forceRefresh = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this.fetchMethod) {\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet\n      });\n    }\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection\n    };\n    let index = this.keyMap.get(k);\n    if (index === undefined) {\n      const p = this.backgroundFetch(k, index, options, fetchContext);\n      return p.__returned = p;\n    } else {\n      // in cache, maybe already fetching\n      const v = this.valList[index];\n      if (this.isBackgroundFetch(v)) {\n        return allowStale && v.__staleWhileFetching !== undefined ? v.__staleWhileFetching : v.__returned = v;\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      if (!forceRefresh && !this.isStale(index)) {\n        this.moveToTail(index);\n        if (updateAgeOnGet) {\n          this.updateItemAge(index);\n        }\n        return v;\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.backgroundFetch(k, index, options, fetchContext);\n      return allowStale && p.__staleWhileFetching !== undefined ? p.__staleWhileFetching : p.__returned = p;\n    }\n  }\n  get(k) {\n    let {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const index = this.keyMap.get(k);\n    if (index !== undefined) {\n      const value = this.valList[index];\n      const fetching = this.isBackgroundFetch(value);\n      if (this.isStale(index)) {\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k);\n          }\n          return allowStale ? value : undefined;\n        } else {\n          return allowStale ? value.__staleWhileFetching : undefined;\n        }\n      } else {\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching,\n        // so we just return undefined\n        if (fetching) {\n          return undefined;\n        }\n        this.moveToTail(index);\n        if (updateAgeOnGet) {\n          this.updateItemAge(index);\n        }\n        return value;\n      }\n    }\n  }\n  connect(p, n) {\n    this.prev[n] = p;\n    this.next[p] = n;\n  }\n  moveToTail(index) {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.tail) {\n      if (index === this.head) {\n        this.head = this.next[index];\n      } else {\n        this.connect(this.prev[index], this.next[index]);\n      }\n      this.connect(this.tail, index);\n      this.tail = index;\n    }\n  }\n  get del() {\n    deprecatedMethod('del', 'delete');\n    return this.delete;\n  }\n  delete(k) {\n    let deleted = false;\n    if (this.size !== 0) {\n      const index = this.keyMap.get(k);\n      if (index !== undefined) {\n        deleted = true;\n        if (this.size === 1) {\n          this.clear();\n        } else {\n          this.removeItemSize(index);\n          const v = this.valList[index];\n          if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort();\n          } else {\n            this.dispose(v, k, 'delete');\n            if (this.disposeAfter) {\n              this.disposed.push([v, k, 'delete']);\n            }\n          }\n          this.keyMap.delete(k);\n          this.keyList[index] = null;\n          this.valList[index] = null;\n          if (index === this.tail) {\n            this.tail = this.prev[index];\n          } else if (index === this.head) {\n            this.head = this.next[index];\n          } else {\n            this.next[this.prev[index]] = this.next[index];\n            this.prev[this.next[index]] = this.prev[index];\n          }\n          this.size--;\n          this.free.push(index);\n        }\n      }\n    }\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift());\n      }\n    }\n    return deleted;\n  }\n  clear() {\n    for (const index of this.rindexes({\n      allowStale: true\n    })) {\n      const v = this.valList[index];\n      if (this.isBackgroundFetch(v)) {\n        v.__abortController.abort();\n      } else {\n        const k = this.keyList[index];\n        this.dispose(v, k, 'delete');\n        if (this.disposeAfter) {\n          this.disposed.push([v, k, 'delete']);\n        }\n      }\n    }\n    this.keyMap.clear();\n    this.valList.fill(null);\n    this.keyList.fill(null);\n    if (this.ttls) {\n      this.ttls.fill(0);\n      this.starts.fill(0);\n    }\n    if (this.sizes) {\n      this.sizes.fill(0);\n    }\n    this.head = 0;\n    this.tail = 0;\n    this.initialFill = 1;\n    this.free.length = 0;\n    this.calculatedSize = 0;\n    this.size = 0;\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift());\n      }\n    }\n  }\n  get reset() {\n    deprecatedMethod('reset', 'clear');\n    return this.clear;\n  }\n  get length() {\n    deprecatedProperty('length', 'size');\n    return this.size;\n  }\n  static get AbortController() {\n    return AC;\n  }\n  static get AbortSignal() {\n    return AS;\n  }\n}\nmodule.exports = LRUCache;","map":{"version":3,"names":["perf","performance","now","Date","hasAbortController","AbortController","AC","constructor","signal","AS","abort","dispatchEvent","hasAbortSignal","AbortSignal","hasACAbortSignal","aborted","_listeners","type","e","target","onabort","forEach","f","addEventListener","ev","fn","push","removeEventListener","filter","warned","Set","deprecatedOption","opt","instead","code","shouldWarn","warn","LRUCache","deprecatedMethod","method","prototype","get","Object","getOwnPropertyDescriptor","deprecatedProperty","field","emitWarning","process","console","error","has","what","add","msg","isPosInt","n","Math","floor","isFinite","getUintArray","max","pow","Uint8Array","Uint16Array","Uint32Array","Number","MAX_SAFE_INTEGER","ZeroArray","Array","size","fill","Stack","UintArray","heap","length","pop","options","ttl","ttlResolution","ttlAutopurge","updateAgeOnGet","updateAgeOnHas","allowStale","dispose","disposeAfter","noDisposeOnSet","noUpdateTTL","maxSize","sizeCalculation","fetchMethod","fetchContext","noDeleteOnFetchRejection","noDeleteOnStaleGet","maxAge","stale","TypeError","Error","undefined","keyMap","Map","keyList","valList","next","prev","head","tail","free","initialFill","disposed","initializeSizeTracking","initializeTTLTracking","getRemainingTTL","key","Infinity","ttls","starts","setItemTTL","index","start","t","setTimeout","isStale","delete","unref","updateItemAge","cachedNow","getNow","calculatedSize","sizes","removeItemSize","requireSize","k","v","addItemSize","evict","indexes","i","isValidIndex","rindexes","entries","rentries","keys","rkeys","values","rvalues","Symbol","iterator","find","getOptions","thisp","call","rforEach","prune","purgeStale","deleted","dump","arr","value","isBackgroundFetch","__staleWhileFetching","entry","age","unshift","load","clear","set","reason","newIndex","oldVal","__abortController","moveToTail","shift","val","peek","backgroundFetch","context","ac","fetchOpts","cb","eb","er","p","del","__returned","pcall","res","Promise","then","hasOwnProperty","fetch","forceRefresh","fetching","connect","reset","module","exports"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@apollo/utils.keyvaluecache/node_modules/lru-cache/index.js"],"sourcesContent":["const perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst hasAbortController = typeof AbortController === 'function'\n\n// minimal backwards-compatibility polyfill\n// this doesn't have nearly all the checks and whatnot that\n// actual AbortController/Signal has, but it's enough for\n// our purposes, and if used properly, behaves the same.\nconst AC = hasAbortController\n  ? AbortController\n  : class AbortController {\n      constructor() {\n        this.signal = new AS()\n      }\n      abort() {\n        this.signal.dispatchEvent('abort')\n      }\n    }\n\nconst hasAbortSignal = typeof AbortSignal === 'function'\n// Some polyfills put this on the AC class, not global\nconst hasACAbortSignal = typeof AC.AbortSignal === 'function'\nconst AS = hasAbortSignal\n  ? AbortSignal\n  : hasACAbortSignal\n  ? AC.AbortController\n  : class AbortSignal {\n      constructor() {\n        this.aborted = false\n        this._listeners = []\n      }\n      dispatchEvent(type) {\n        if (type === 'abort') {\n          this.aborted = true\n          const e = { type, target: this }\n          this.onabort(e)\n          this._listeners.forEach(f => f(e), this)\n        }\n      }\n      onabort() {}\n      addEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners.push(fn)\n        }\n      }\n      removeEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners = this._listeners.filter(f => f !== fn)\n        }\n      }\n    }\n\nconst warned = new Set()\nconst deprecatedOption = (opt, instead) => {\n  const code = `LRU_CACHE_OPTION_${opt}`\n  if (shouldWarn(code)) {\n    warn(code, `${opt} option`, `options.${instead}`, LRUCache)\n  }\n}\nconst deprecatedMethod = (method, instead) => {\n  const code = `LRU_CACHE_METHOD_${method}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, method)\n    warn(code, `${method} method`, `cache.${instead}()`, get)\n  }\n}\nconst deprecatedProperty = (field, instead) => {\n  const code = `LRU_CACHE_PROPERTY_${field}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, field)\n    warn(code, `${field} property`, `cache.${instead}`, get)\n  }\n}\n\nconst emitWarning = (...a) => {\n  typeof process === 'object' &&\n  process &&\n  typeof process.emitWarning === 'function'\n    ? process.emitWarning(...a)\n    : console.error(...a)\n}\n\nconst shouldWarn = code => !warned.has(code)\n\nconst warn = (code, what, instead, fn) => {\n  warned.add(code)\n  const msg = `The ${what} is deprecated. Please use ${instead} instead.`\n  emitWarning(msg, 'DeprecationWarning', code, fn)\n}\n\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)\n\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */\nconst getUintArray = max =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n\nclass ZeroArray extends Array {\n  constructor(size) {\n    super(size)\n    this.fill(0)\n  }\n}\n\nclass Stack {\n  constructor(max) {\n    if (max === 0) {\n      return []\n    }\n    const UintArray = getUintArray(max)\n    this.heap = new UintArray(max)\n    this.length = 0\n  }\n  push(n) {\n    this.heap[this.length++] = n\n  }\n  pop() {\n    return this.heap[--this.length]\n  }\n}\n\nclass LRUCache {\n  constructor(options = {}) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      sizeCalculation,\n      fetchMethod,\n      fetchContext,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n    } = options\n\n    // deprecated options, don't trigger a warning for getting them if\n    // the thing being passed in is another LRUCache we're copying.\n    const { length, maxAge, stale } =\n      options instanceof LRUCache ? {} : options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.max = max\n    this.maxSize = maxSize\n    this.sizeCalculation = sizeCalculation || length\n    if (this.sizeCalculation) {\n      if (!this.maxSize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    this.fetchMethod = fetchMethod || null\n    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n\n    this.fetchContext = fetchContext\n    if (!this.fetchMethod && fetchContext !== undefined) {\n      throw new TypeError(\n        'cannot set fetchContext without fetchMethod'\n      )\n    }\n\n    this.keyMap = new Map()\n    this.keyList = new Array(max).fill(null)\n    this.valList = new Array(max).fill(null)\n    this.next = new UintArray(max)\n    this.prev = new UintArray(max)\n    this.head = 0\n    this.tail = 0\n    this.free = new Stack(max)\n    this.initialFill = 1\n    this.size = 0\n\n    if (typeof dispose === 'function') {\n      this.dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.disposeAfter = disposeAfter\n      this.disposed = []\n    } else {\n      this.disposeAfter = null\n      this.disposed = null\n    }\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n\n    if (this.maxSize !== 0) {\n      if (!isPosInt(this.maxSize)) {\n        throw new TypeError(\n          'maxSize must be a positive integer if specified'\n        )\n      }\n      this.initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale || !!stale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || maxAge || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n\n    if (stale) {\n      deprecatedOption('stale', 'allowStale')\n    }\n    if (maxAge) {\n      deprecatedOption('maxAge', 'ttl')\n    }\n    if (length) {\n      deprecatedOption('length', 'sizeCalculation')\n    }\n  }\n\n  getRemainingTTL(key) {\n    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0\n  }\n\n  initializeTTLTracking() {\n    this.ttls = new ZeroArray(this.max)\n    this.starts = new ZeroArray(this.max)\n\n    this.setItemTTL = (index, ttl, start = perf.now()) => {\n      this.starts[index] = ttl !== 0 ? start : 0\n      this.ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.isStale(index)) {\n            this.delete(this.keyList[index])\n          }\n        }, ttl + 1)\n        /* istanbul ignore else - unref() not supported on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n    }\n\n    this.updateItemAge = index => {\n      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        /* istanbul ignore else - not available on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      return this.ttls[index] === 0 || this.starts[index] === 0\n        ? Infinity\n        : this.starts[index] +\n            this.ttls[index] -\n            (cachedNow || getNow())\n    }\n\n    this.isStale = index => {\n      return (\n        this.ttls[index] !== 0 &&\n        this.starts[index] !== 0 &&\n        (cachedNow || getNow()) - this.starts[index] >\n          this.ttls[index]\n      )\n    }\n  }\n  updateItemAge(index) {}\n  setItemTTL(index, ttl, start) {}\n  isStale(index) {\n    return false\n  }\n\n  initializeSizeTracking() {\n    this.calculatedSize = 0\n    this.sizes = new ZeroArray(this.max)\n    this.removeItemSize = index => {\n      this.calculatedSize -= this.sizes[index]\n      this.sizes[index] = 0\n    }\n    this.requireSize = (k, v, size, sizeCalculation) => {\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer)'\n          )\n        }\n      }\n      return size\n    }\n    this.addItemSize = (index, size) => {\n      this.sizes[index] = size\n      const maxSize = this.maxSize - this.sizes[index]\n      while (this.calculatedSize > maxSize) {\n        this.evict(true)\n      }\n      this.calculatedSize += this.sizes[index]\n    }\n  }\n  removeItemSize(index) {}\n  addItemSize(index, size) {}\n  requireSize(k, v, size, sizeCalculation) {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize on cache'\n      )\n    }\n  }\n\n  *indexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.tail; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.head) {\n          break\n        } else {\n          i = this.prev[i]\n        }\n      }\n    }\n  }\n\n  *rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.head; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.tail) {\n          break\n        } else {\n          i = this.next[i]\n        }\n      }\n    }\n  }\n\n  isValidIndex(index) {\n    return this.keyMap.get(this.keyList[index]) === index\n  }\n\n  *entries() {\n    for (const i of this.indexes()) {\n      yield [this.keyList[i], this.valList[i]]\n    }\n  }\n  *rentries() {\n    for (const i of this.rindexes()) {\n      yield [this.keyList[i], this.valList[i]]\n    }\n  }\n\n  *keys() {\n    for (const i of this.indexes()) {\n      yield this.keyList[i]\n    }\n  }\n  *rkeys() {\n    for (const i of this.rindexes()) {\n      yield this.keyList[i]\n    }\n  }\n\n  *values() {\n    for (const i of this.indexes()) {\n      yield this.valList[i]\n    }\n  }\n  *rvalues() {\n    for (const i of this.rindexes()) {\n      yield this.valList[i]\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  find(fn, getOptions = {}) {\n    for (const i of this.indexes()) {\n      if (fn(this.valList[i], this.keyList[i], this)) {\n        return this.get(this.keyList[i], getOptions)\n      }\n    }\n  }\n\n  forEach(fn, thisp = this) {\n    for (const i of this.indexes()) {\n      fn.call(thisp, this.valList[i], this.keyList[i], this)\n    }\n  }\n\n  rforEach(fn, thisp = this) {\n    for (const i of this.rindexes()) {\n      fn.call(thisp, this.valList[i], this.keyList[i], this)\n    }\n  }\n\n  get prune() {\n    deprecatedMethod('prune', 'purgeStale')\n    return this.purgeStale\n  }\n\n  purgeStale() {\n    let deleted = false\n    for (const i of this.rindexes({ allowStale: true })) {\n      if (this.isStale(i)) {\n        this.delete(this.keyList[i])\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  dump() {\n    const arr = []\n    for (const i of this.indexes({ allowStale: true })) {\n      const key = this.keyList[i]\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      const entry = { value }\n      if (this.ttls) {\n        entry.ttl = this.ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - this.starts[i]\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.sizes) {\n        entry.size = this.sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  load(arr) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset.\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  dispose(v, k, reason) {}\n\n  set(\n    k,\n    v,\n    {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n    } = {}\n  ) {\n    size = this.requireSize(k, v, size, sizeCalculation)\n    // if the item doesn't fit, don't do anything\n    if (this.maxSize && size > this.maxSize) {\n      return this\n    }\n    let index = this.size === 0 ? undefined : this.keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = this.newIndex()\n      this.keyList[index] = k\n      this.valList[index] = v\n      this.keyMap.set(k, index)\n      this.next[this.tail] = index\n      this.prev[index] = this.tail\n      this.tail = index\n      this.size++\n      this.addItemSize(index, size)\n      noUpdateTTL = false\n    } else {\n      // update\n      const oldVal = this.valList[index]\n      if (v !== oldVal) {\n        if (this.isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort()\n        } else {\n          if (!noDisposeOnSet) {\n            this.dispose(oldVal, k, 'set')\n            if (this.disposeAfter) {\n              this.disposed.push([oldVal, k, 'set'])\n            }\n          }\n        }\n        this.removeItemSize(index)\n        this.valList[index] = v\n        this.addItemSize(index, size)\n      }\n      this.moveToTail(index)\n    }\n    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n      this.initializeTTLTracking()\n    }\n    if (!noUpdateTTL) {\n      this.setItemTTL(index, ttl, start)\n    }\n    if (this.disposeAfter) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return this\n  }\n\n  newIndex() {\n    if (this.size === 0) {\n      return this.tail\n    }\n    if (this.size === this.max && this.max !== 0) {\n      return this.evict(false)\n    }\n    if (this.free.length !== 0) {\n      return this.free.pop()\n    }\n    // initial fill, just keep writing down the list\n    return this.initialFill++\n  }\n\n  pop() {\n    if (this.size) {\n      const val = this.valList[this.head]\n      this.evict(true)\n      return val\n    }\n  }\n\n  evict(free) {\n    const head = this.head\n    const k = this.keyList[head]\n    const v = this.valList[head]\n    if (this.isBackgroundFetch(v)) {\n      v.__abortController.abort()\n    } else {\n      this.dispose(v, k, 'evict')\n      if (this.disposeAfter) {\n        this.disposed.push([v, k, 'evict'])\n      }\n    }\n    this.removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.keyList[head] = null\n      this.valList[head] = null\n      this.free.push(head)\n    }\n    this.head = this.next[head]\n    this.keyMap.delete(k)\n    this.size--\n    return head\n  }\n\n  has(k, { updateAgeOnHas = this.updateAgeOnHas } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      if (!this.isStale(index)) {\n        if (updateAgeOnHas) {\n          this.updateItemAge(index)\n        }\n        return true\n      }\n    }\n    return false\n  }\n\n  // like get(), but without any LRU updating or TTL expiration\n  peek(k, { allowStale = this.allowStale } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined && (allowStale || !this.isStale(index))) {\n      const v = this.valList[index]\n      // either stale and allowed, or forcing a refresh of non-stale value\n      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v\n    }\n  }\n\n  backgroundFetch(k, index, options, context) {\n    const v = index === undefined ? undefined : this.valList[index]\n    if (this.isBackgroundFetch(v)) {\n      return v\n    }\n    const ac = new AC()\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n    const cb = v => {\n      if (!ac.signal.aborted) {\n        this.set(k, v, fetchOpts.options)\n      }\n      return v\n    }\n    const eb = er => {\n      if (this.valList[index] === p) {\n        const del =\n          !options.noDeleteOnFetchRejection ||\n          p.__staleWhileFetching === undefined\n        if (del) {\n          this.delete(k)\n        } else {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          this.valList[index] = p.__staleWhileFetching\n        }\n      }\n      if (p.__returned === p) {\n        throw er\n      }\n    }\n    const pcall = res => res(this.fetchMethod(k, v, fetchOpts))\n    const p = new Promise(pcall).then(cb, eb)\n    p.__abortController = ac\n    p.__staleWhileFetching = v\n    p.__returned = null\n    if (index === undefined) {\n      this.set(k, p, fetchOpts.options)\n      index = this.keyMap.get(k)\n    } else {\n      this.valList[index] = p\n    }\n    return p\n  }\n\n  isBackgroundFetch(p) {\n    return (\n      p &&\n      typeof p === 'object' &&\n      typeof p.then === 'function' &&\n      Object.prototype.hasOwnProperty.call(\n        p,\n        '__staleWhileFetching'\n      ) &&\n      Object.prototype.hasOwnProperty.call(p, '__returned') &&\n      (p.__returned === p || p.__returned === null)\n    )\n  }\n\n  // this takes the union of get() and set() opts, because it does both\n  async fetch(\n    k,\n    {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      fetchContext = this.fetchContext,\n      forceRefresh = false,\n    } = {}\n  ) {\n    if (!this.fetchMethod) {\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n    }\n\n    let index = this.keyMap.get(k)\n    if (index === undefined) {\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        return allowStale && v.__staleWhileFetching !== undefined\n          ? v.__staleWhileFetching\n          : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      if (!forceRefresh && !this.isStale(index)) {\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      return allowStale && p.__staleWhileFetching !== undefined\n        ? p.__staleWhileFetching\n        : (p.__returned = p)\n    }\n  }\n\n  get(\n    k,\n    {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n    } = {}\n  ) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.valList[index]\n      const fetching = this.isBackgroundFetch(value)\n      if (this.isStale(index)) {\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k)\n          }\n          return allowStale ? value : undefined\n        } else {\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching,\n        // so we just return undefined\n        if (fetching) {\n          return undefined\n        }\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        return value\n      }\n    }\n  }\n\n  connect(p, n) {\n    this.prev[n] = p\n    this.next[p] = n\n  }\n\n  moveToTail(index) {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.tail) {\n      if (index === this.head) {\n        this.head = this.next[index]\n      } else {\n        this.connect(this.prev[index], this.next[index])\n      }\n      this.connect(this.tail, index)\n      this.tail = index\n    }\n  }\n\n  get del() {\n    deprecatedMethod('del', 'delete')\n    return this.delete\n  }\n\n  delete(k) {\n    let deleted = false\n    if (this.size !== 0) {\n      const index = this.keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.size === 1) {\n          this.clear()\n        } else {\n          this.removeItemSize(index)\n          const v = this.valList[index]\n          if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort()\n          } else {\n            this.dispose(v, k, 'delete')\n            if (this.disposeAfter) {\n              this.disposed.push([v, k, 'delete'])\n            }\n          }\n          this.keyMap.delete(k)\n          this.keyList[index] = null\n          this.valList[index] = null\n          if (index === this.tail) {\n            this.tail = this.prev[index]\n          } else if (index === this.head) {\n            this.head = this.next[index]\n          } else {\n            this.next[this.prev[index]] = this.next[index]\n            this.prev[this.next[index]] = this.prev[index]\n          }\n          this.size--\n          this.free.push(index)\n        }\n      }\n    }\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return deleted\n  }\n\n  clear() {\n    for (const index of this.rindexes({ allowStale: true })) {\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        v.__abortController.abort()\n      } else {\n        const k = this.keyList[index]\n        this.dispose(v, k, 'delete')\n        if (this.disposeAfter) {\n          this.disposed.push([v, k, 'delete'])\n        }\n      }\n    }\n\n    this.keyMap.clear()\n    this.valList.fill(null)\n    this.keyList.fill(null)\n    if (this.ttls) {\n      this.ttls.fill(0)\n      this.starts.fill(0)\n    }\n    if (this.sizes) {\n      this.sizes.fill(0)\n    }\n    this.head = 0\n    this.tail = 0\n    this.initialFill = 1\n    this.free.length = 0\n    this.calculatedSize = 0\n    this.size = 0\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n  }\n\n  get reset() {\n    deprecatedMethod('reset', 'clear')\n    return this.clear\n  }\n\n  get length() {\n    deprecatedProperty('length', 'size')\n    return this.size\n  }\n\n  static get AbortController() {\n    return AC\n  }\n  static get AbortSignal() {\n    return AS\n  }\n}\n\nmodule.exports = LRUCache\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}