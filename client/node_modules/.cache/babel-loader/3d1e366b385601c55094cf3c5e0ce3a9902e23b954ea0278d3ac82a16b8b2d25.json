{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeAliases = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction removeAliases(ast) {\n  return (0, graphql_1.visit)(ast, {\n    Field(node) {\n      const {\n        alias,\n        ...rest\n      } = node;\n      return rest;\n    }\n  });\n}\nexports.removeAliases = removeAliases;","map":{"version":3,"mappings":";;;;;;AAOA;AAEA,SAAgBA,aAAa,CAACC,GAAiB;EAC7C,OAAO,mBAAK,EAACA,GAAG,EAAE;IAChBC,KAAK,CAACC,IAAe;MACnB,MAAM;QAAEC,KAAK;QAAE,GAAGC;MAAI,CAAE,GAAGF,IAAI;MAC/B,OAAOE,IAAI;IACb;GACD,CAAC;AACJ;AAPAC","names":["removeAliases","ast","Field","node","alias","rest","exports"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\@apollo\\utils.removealiases\\src\\index.ts"],"sourcesContent":["// removeAliases gets rid of GraphQL aliases, a feature by which you can tell a\n// server to return a field's data under a different name from the field name.\n// Maybe this is useful if somebody somewhere inserts random aliases into their\n// queries. Note that this function makes no guarantees about the output and its\n// validity as a GraphQL operation, for example:\n// { x(a: 1) alias: x(a:2) } (valid) will yield\n// { x(a:1) x(a:2) } (invalid)\nimport { DocumentNode, FieldNode, visit } from \"graphql\";\n\nexport function removeAliases(ast: DocumentNode): DocumentNode {\n  return visit(ast, {\n    Field(node: FieldNode): FieldNode {\n      const { alias, ...rest } = node;\n      return rest;\n    },\n  });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}