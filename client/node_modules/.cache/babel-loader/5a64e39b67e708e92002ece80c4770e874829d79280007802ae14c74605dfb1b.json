{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortAST = void 0;\nconst graphql_1 = require(\"graphql\");\nconst lodash_sortby_1 = __importDefault(require(\"lodash.sortby\"));\nfunction sortAST(ast) {\n  return (0, graphql_1.visit)(ast, {\n    Document(node) {\n      return {\n        ...node,\n        definitions: (0, lodash_sortby_1.default)(node.definitions, \"kind\", \"name.value\")\n      };\n    },\n    OperationDefinition(node) {\n      return sortVariableDefinitions(node);\n    },\n    SelectionSet(node) {\n      return {\n        ...node,\n        selections: (0, lodash_sortby_1.default)(node.selections, \"kind\", \"name.value\")\n      };\n    },\n    Field(node) {\n      return sortArguments(node);\n    },\n    FragmentSpread(node) {\n      return sortDirectives(node);\n    },\n    InlineFragment(node) {\n      return sortDirectives(node);\n    },\n    FragmentDefinition(node) {\n      return sortDirectives(sortVariableDefinitions(node));\n    },\n    Directive(node) {\n      return sortArguments(node);\n    }\n  });\n}\nexports.sortAST = sortAST;\nfunction sortDirectives(node) {\n  return \"directives\" in node ? {\n    ...node,\n    directives: (0, lodash_sortby_1.default)(node.directives, \"name.value\")\n  } : node;\n}\nfunction sortArguments(node) {\n  return \"arguments\" in node ? {\n    ...node,\n    arguments: (0, lodash_sortby_1.default)(node.arguments, \"name.value\")\n  } : node;\n}\nfunction sortVariableDefinitions(node) {\n  return \"variableDefinitions\" in node ? {\n    ...node,\n    variableDefinitions: (0, lodash_sortby_1.default)(node.variableDefinitions, \"variable.name.value\")\n  } : node;\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAGA;AAaA;AAOA,SAAgBA,OAAO,CAACC,GAAiB;EACvC,OAAO,mBAAK,EAACA,GAAG,EAAE;IAChBC,QAAQ,CAACC,IAAkB;MACzB,OAAO;QACL,GAAGA,IAAI;QAEPC,WAAW,EAAE,2BAAM,EAACD,IAAI,CAACC,WAAW,EAAE,MAAM,EAAE,YAAY;OAC3D;IACH,CAAC;IACDC,mBAAmB,CACjBF,IAA6B;MAE7B,OAAOG,uBAAuB,CAACH,IAAI,CAAC;IACtC,CAAC;IACDI,YAAY,CAACJ,IAAI;MACf,OAAO;QACL,GAAGA,IAAI;QAKPK,UAAU,EAAE,2BAAM,EAACL,IAAI,CAACK,UAAU,EAAE,MAAM,EAAE,YAAY;OACzD;IACH,CAAC;IACDC,KAAK,CAACN,IAAI;MACR,OAAOO,aAAa,CAACP,IAAI,CAAC;IAC5B,CAAC;IACDQ,cAAc,CAACR,IAAI;MACjB,OAAOS,cAAc,CAACT,IAAI,CAAC;IAC7B,CAAC;IACDU,cAAc,CAACV,IAAI;MACjB,OAAOS,cAAc,CAACT,IAAI,CAAC;IAC7B,CAAC;IACDW,kBAAkB,CAACX,IAAI;MACrB,OAAOS,cAAc,CAACN,uBAAuB,CAACH,IAAI,CAAC,CAAC;IACtD,CAAC;IACDY,SAAS,CAACZ,IAAI;MACZ,OAAOO,aAAa,CAACP,IAAI,CAAC;IAC5B;GACD,CAAC;AACJ;AAxCAa;AA0CA,SAASJ,cAAc,CACrBT,IAAO;EAEP,OAAO,YAAY,IAAIA,IAAI,GACvB;IAAE,GAAGA,IAAI;IAAEc,UAAU,EAAE,2BAAM,EAACd,IAAI,CAACc,UAAU,EAAE,YAAY;EAAC,CAAE,GAC9Dd,IAAI;AACV;AAEA,SAASO,aAAa,CACpBP,IAAO;EAEP,OAAO,WAAW,IAAIA,IAAI,GACtB;IAAE,GAAGA,IAAI;IAAEe,SAAS,EAAE,2BAAM,EAACf,IAAI,CAACe,SAAS,EAAE,YAAY;EAAC,CAAE,GAC5Df,IAAI;AACV;AAEA,SAASG,uBAAuB,CAE9BH,IAAO;EACP,OAAO,qBAAqB,IAAIA,IAAI,GAChC;IACE,GAAGA,IAAI;IACPgB,mBAAmB,EAAE,2BAAM,EACzBhB,IAAI,CAACgB,mBAAmB,EACxB,qBAAqB;GAExB,GACDhB,IAAI;AACV","names":["sortAST","ast","Document","node","definitions","OperationDefinition","sortVariableDefinitions","SelectionSet","selections","Field","sortArguments","FragmentSpread","sortDirectives","InlineFragment","FragmentDefinition","Directive","exports","directives","arguments","variableDefinitions"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\@apollo\\utils.sortast\\src\\index.ts"],"sourcesContent":["// We'll only fetch the `ListIteratee` type from the `@types/lodash`, but get\n// `sortBy` from the modularized version of the package to avoid bringing in\n// all of `lodash`.\nimport {\n  visit,\n  DocumentNode,\n  OperationDefinitionNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  FragmentSpreadNode,\n  FieldNode,\n  SelectionSetNode,\n  ArgumentNode,\n  VariableDefinitionNode,\n} from \"graphql\";\nimport sortBy from \"lodash.sortby\";\n\n// sortAST sorts most multi-child nodes alphabetically. Using this as part of\n// your signature calculation function may make it easier to tell the difference\n// between queries that are similar to each other, and if for some reason your\n// GraphQL client generates query strings with elements in nondeterministic\n// order, it can make sure the queries are treated as identical.\nexport function sortAST(ast: DocumentNode): DocumentNode {\n  return visit(ast, {\n    Document(node: DocumentNode) {\n      return {\n        ...node,\n        // The sort on \"kind\" places fragments before operations within the document\n        definitions: sortBy(node.definitions, \"kind\", \"name.value\"),\n      };\n    },\n    OperationDefinition(\n      node: OperationDefinitionNode,\n    ): OperationDefinitionNode {\n      return sortVariableDefinitions(node);\n    },\n    SelectionSet(node): SelectionSetNode {\n      return {\n        ...node,\n        // Define an ordering for field names in a SelectionSet.  Field first,\n        // then FragmentSpread, then InlineFragment.  By a lovely coincidence,\n        // the order we want them to appear in is alphabetical by node.kind.\n        // Use sortBy instead of sorted because 'selections' is not optional.\n        selections: sortBy(node.selections, \"kind\", \"name.value\"),\n      };\n    },\n    Field(node): FieldNode {\n      return sortArguments(node);\n    },\n    FragmentSpread(node): FragmentSpreadNode {\n      return sortDirectives(node);\n    },\n    InlineFragment(node): InlineFragmentNode {\n      return sortDirectives(node);\n    },\n    FragmentDefinition(node): FragmentDefinitionNode {\n      return sortDirectives(sortVariableDefinitions(node));\n    },\n    Directive(node): DirectiveNode {\n      return sortArguments(node);\n    },\n  });\n}\n\nfunction sortDirectives<T extends { directives?: readonly DirectiveNode[] }>(\n  node: T,\n): T {\n  return \"directives\" in node\n    ? { ...node, directives: sortBy(node.directives, \"name.value\") }\n    : node;\n}\n\nfunction sortArguments<T extends { arguments?: readonly ArgumentNode[] }>(\n  node: T,\n): T {\n  return \"arguments\" in node\n    ? { ...node, arguments: sortBy(node.arguments, \"name.value\") }\n    : node;\n}\n\nfunction sortVariableDefinitions<\n  T extends { variableDefinitions?: readonly VariableDefinitionNode[] },\n>(node: T): T {\n  return \"variableDefinitions\" in node\n    ? {\n        ...node,\n        variableDefinitions: sortBy(\n          node.variableDefinitions,\n          \"variable.name.value\",\n        ),\n      }\n    : node;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}