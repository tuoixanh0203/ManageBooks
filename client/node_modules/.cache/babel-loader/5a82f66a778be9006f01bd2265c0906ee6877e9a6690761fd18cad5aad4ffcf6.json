{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printWithReducedWhitespace = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction printWithReducedWhitespace(ast) {\n  const sanitizedAST = (0, graphql_1.visit)(ast, {\n    StringValue(node) {\n      return {\n        ...node,\n        value: Buffer.from(node.value, \"utf8\").toString(\"hex\"),\n        block: false\n      };\n    }\n  });\n  const withWhitespace = (0, graphql_1.print)(sanitizedAST);\n  const minimizedButStillHex = withWhitespace.replace(/\\s+/g, \" \").replace(/([^_a-zA-Z0-9]) /g, (_, c) => c).replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n  return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\nexports.printWithReducedWhitespace = printWithReducedWhitespace;","map":{"version":3,"mappings":";;;;;;AAAA;AAKA,SAAgBA,0BAA0B,CAACC,GAAiB;EAU1D,MAAMC,YAAY,GAAG,mBAAK,EAACD,GAAG,EAAE;IAC9BE,WAAW,CAACC,IAAqB;MAC/B,OAAO;QACL,GAAGA,IAAI;QACPC,KAAK,EAAEC,MAAM,CAACC,IAAI,CAACH,IAAI,CAACC,KAAK,EAAE,MAAM,CAAC,CAACG,QAAQ,CAAC,KAAK,CAAC;QACtDC,KAAK,EAAE;OACR;IACH;GACD,CAAC;EACF,MAAMC,cAAc,GAAG,mBAAK,EAACR,YAAY,CAAC;EAC1C,MAAMS,oBAAoB,GAAGD,cAAc,CACxCE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBA,OAAO,CAAC,mBAAmB,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CACzCF,OAAO,CAAC,mBAAmB,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC;EAC5C,OAAOH,oBAAoB,CAACC,OAAO,CAAC,gBAAgB,EAAE,CAACC,CAAC,EAAEE,GAAG,KAC3DC,IAAI,CAACC,SAAS,CAACX,MAAM,CAACC,IAAI,CAACQ,GAAG,EAAE,KAAK,CAAC,CAACP,QAAQ,CAAC,MAAM,CAAC,CAAC,CACzD;AACH;AA3BAU","names":["printWithReducedWhitespace","ast","sanitizedAST","StringValue","node","value","Buffer","from","toString","block","withWhitespace","minimizedButStillHex","replace","_","c","hex","JSON","stringify","exports"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\@apollo\\utils.printwithreducedwhitespace\\src\\index.ts"],"sourcesContent":["import { visit, print, DocumentNode, StringValueNode } from \"graphql\";\n// Like the graphql-js print function, but deleting whitespace wherever\n// feasible. Specifically, all whitespace (outside of string literals) is\n// reduced to at most one space, and even that space is removed anywhere except\n// for between two alphanumerics.\nexport function printWithReducedWhitespace(ast: DocumentNode): string {\n  // In a GraphQL AST (which notably does not contain comments), the only place\n  // where meaningful whitespace (or double quotes) can exist is in\n  // StringNodes. So to print with reduced whitespace, we:\n  // - temporarily sanitize strings by replacing their contents with hex\n  // - use the default GraphQL printer\n  // - minimize the whitespace with a simple regexp replacement\n  // - convert strings back to their actual value\n  // We normalize all strings to non-block strings for simplicity.\n\n  const sanitizedAST = visit(ast, {\n    StringValue(node: StringValueNode): StringValueNode {\n      return {\n        ...node,\n        value: Buffer.from(node.value, \"utf8\").toString(\"hex\"),\n        block: false,\n      };\n    },\n  });\n  const withWhitespace = print(sanitizedAST);\n  const minimizedButStillHex = withWhitespace\n    .replace(/\\s+/g, \" \")\n    .replace(/([^_a-zA-Z0-9]) /g, (_, c) => c)\n    .replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n  return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) =>\n    JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")),\n  );\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}