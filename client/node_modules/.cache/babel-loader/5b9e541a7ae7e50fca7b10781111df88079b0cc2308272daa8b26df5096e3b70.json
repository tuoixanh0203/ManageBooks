{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendResolversFromInterfaces = void 0;\nfunction extendResolversFromInterfaces(schema, resolvers) {\n  const extendedResolvers = {};\n  const typeMap = schema.getTypeMap();\n  for (const typeName in typeMap) {\n    const type = typeMap[typeName];\n    if ('getInterfaces' in type) {\n      extendedResolvers[typeName] = {};\n      for (const iFace of type.getInterfaces()) {\n        if (resolvers[iFace.name]) {\n          for (const fieldName in resolvers[iFace.name]) {\n            if (fieldName === '__isTypeOf' || !fieldName.startsWith('__')) {\n              extendedResolvers[typeName][fieldName] = resolvers[iFace.name][fieldName];\n            }\n          }\n        }\n      }\n      const typeResolvers = resolvers[typeName];\n      extendedResolvers[typeName] = {\n        ...extendedResolvers[typeName],\n        ...typeResolvers\n      };\n    } else {\n      const typeResolvers = resolvers[typeName];\n      if (typeResolvers != null) {\n        extendedResolvers[typeName] = typeResolvers;\n      }\n    }\n  }\n  return extendedResolvers;\n}\nexports.extendResolversFromInterfaces = extendResolversFromInterfaces;","map":{"version":3,"names":["Object","defineProperty","exports","value","extendResolversFromInterfaces","schema","resolvers","extendedResolvers","typeMap","getTypeMap","typeName","type","iFace","getInterfaces","name","fieldName","startsWith","typeResolvers"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/mock/node_modules/@graphql-tools/schema/cjs/extendResolversFromInterfaces.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendResolversFromInterfaces = void 0;\nfunction extendResolversFromInterfaces(schema, resolvers) {\n    const extendedResolvers = {};\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        if ('getInterfaces' in type) {\n            extendedResolvers[typeName] = {};\n            for (const iFace of type.getInterfaces()) {\n                if (resolvers[iFace.name]) {\n                    for (const fieldName in resolvers[iFace.name]) {\n                        if (fieldName === '__isTypeOf' || !fieldName.startsWith('__')) {\n                            extendedResolvers[typeName][fieldName] = resolvers[iFace.name][fieldName];\n                        }\n                    }\n                }\n            }\n            const typeResolvers = resolvers[typeName];\n            extendedResolvers[typeName] = {\n                ...extendedResolvers[typeName],\n                ...typeResolvers,\n            };\n        }\n        else {\n            const typeResolvers = resolvers[typeName];\n            if (typeResolvers != null) {\n                extendedResolvers[typeName] = typeResolvers;\n            }\n        }\n    }\n    return extendedResolvers;\n}\nexports.extendResolversFromInterfaces = extendResolversFromInterfaces;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,6BAA6B,GAAG,KAAK,CAAC;AAC9C,SAASA,6BAA6B,CAACC,MAAM,EAAEC,SAAS,EAAE;EACtD,MAAMC,iBAAiB,GAAG,CAAC,CAAC;EAC5B,MAAMC,OAAO,GAAGH,MAAM,CAACI,UAAU,EAAE;EACnC,KAAK,MAAMC,QAAQ,IAAIF,OAAO,EAAE;IAC5B,MAAMG,IAAI,GAAGH,OAAO,CAACE,QAAQ,CAAC;IAC9B,IAAI,eAAe,IAAIC,IAAI,EAAE;MACzBJ,iBAAiB,CAACG,QAAQ,CAAC,GAAG,CAAC,CAAC;MAChC,KAAK,MAAME,KAAK,IAAID,IAAI,CAACE,aAAa,EAAE,EAAE;QACtC,IAAIP,SAAS,CAACM,KAAK,CAACE,IAAI,CAAC,EAAE;UACvB,KAAK,MAAMC,SAAS,IAAIT,SAAS,CAACM,KAAK,CAACE,IAAI,CAAC,EAAE;YAC3C,IAAIC,SAAS,KAAK,YAAY,IAAI,CAACA,SAAS,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;cAC3DT,iBAAiB,CAACG,QAAQ,CAAC,CAACK,SAAS,CAAC,GAAGT,SAAS,CAACM,KAAK,CAACE,IAAI,CAAC,CAACC,SAAS,CAAC;YAC7E;UACJ;QACJ;MACJ;MACA,MAAME,aAAa,GAAGX,SAAS,CAACI,QAAQ,CAAC;MACzCH,iBAAiB,CAACG,QAAQ,CAAC,GAAG;QAC1B,GAAGH,iBAAiB,CAACG,QAAQ,CAAC;QAC9B,GAAGO;MACP,CAAC;IACL,CAAC,MACI;MACD,MAAMA,aAAa,GAAGX,SAAS,CAACI,QAAQ,CAAC;MACzC,IAAIO,aAAa,IAAI,IAAI,EAAE;QACvBV,iBAAiB,CAACG,QAAQ,CAAC,GAAGO,aAAa;MAC/C;IACJ;EACJ;EACA,OAAOV,iBAAiB;AAC5B;AACAL,OAAO,CAACE,6BAA6B,GAAGA,6BAA6B"},"metadata":{},"sourceType":"script","externalDependencies":[]}