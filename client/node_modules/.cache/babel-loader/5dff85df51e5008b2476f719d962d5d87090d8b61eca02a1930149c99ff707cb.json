{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.operationDerivedDataCacheKey = exports.createOperationDerivedDataCache = void 0;\nconst lru_cache_1 = __importDefault(require(\"lru-cache\"));\nfunction createOperationDerivedDataCache(_ref) {\n  let {\n    logger\n  } = _ref;\n  let lastWarn;\n  let lastDisposals = 0;\n  return new lru_cache_1.default({\n    length(obj) {\n      return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n    },\n    max: Math.pow(2, 20) * 10,\n    dispose() {\n      lastDisposals++;\n      if (!lastWarn || new Date().getTime() - lastWarn.getTime() > 60000) {\n        lastWarn = new Date();\n        logger.warn(['This server is processing a high number of unique operations.  ', `A total of ${lastDisposals} records have been `, 'ejected from the ApolloServerPluginUsageReporting signature cache in the past ', 'interval.  If you see this warning frequently, please open an ', 'issue on the Apollo Server repository.'].join(''));\n        lastDisposals = 0;\n      }\n    }\n  });\n}\nexports.createOperationDerivedDataCache = createOperationDerivedDataCache;\nfunction operationDerivedDataCacheKey(queryHash, operationName) {\n  return `${queryHash}${operationName && ':' + operationName}`;\n}\nexports.operationDerivedDataCacheKey = operationDerivedDataCacheKey;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AASA,SAAgBA,+BAA+B,OAI9C;EAAA,IAJ+C;IAC9CC;EAAM,CAGP;EACC,IAAIC,QAAc;EAClB,IAAIC,aAAa,GAAW,CAAC;EAC7B,OAAO,IAAIC,mBAAQ,CAA+B;IAEhDC,MAAM,CAACC,GAAG;MACR,OAAOC,MAAM,CAACC,UAAU,CAACC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,EAAE,MAAM,CAAC;IACvD,CAAC;IASDK,GAAG,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE;IACzBC,OAAO;MAELX,aAAa,EAAE;MAGf,IAAI,CAACD,QAAQ,IAAI,IAAIa,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGd,QAAQ,CAACc,OAAO,EAAE,GAAG,KAAK,EAAE;QAElEd,QAAQ,GAAG,IAAIa,IAAI,EAAE;QACrBd,MAAM,CAACgB,IAAI,CACT,CACE,iEAAiE,EACjE,cAAcd,aAAa,qBAAqB,EAChD,gFAAgF,EAChF,gEAAgE,EAChE,wCAAwC,CACzC,CAACe,IAAI,CAAC,EAAE,CAAC,CACX;QAGDf,aAAa,GAAG,CAAC;;IAErB;GACD,CAAC;AACJ;AA5CAgB;AA8CA,SAAgBC,4BAA4B,CAC1CC,SAAiB,EACjBC,aAAqB;EAErB,OAAO,GAAGD,SAAS,GAAGC,aAAa,IAAI,GAAG,GAAGA,aAAa,EAAE;AAC9D;AALAH","names":["createOperationDerivedDataCache","logger","lastWarn","lastDisposals","lru_cache_1","length","obj","Buffer","byteLength","JSON","stringify","max","Math","pow","dispose","Date","getTime","warn","join","exports","operationDerivedDataCacheKey","queryHash","operationName"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\plugin\\usageReporting\\operationDerivedDataCache.ts"],"sourcesContent":["import LRUCache from 'lru-cache';\nimport type { Logger } from '@apollo/utils.logger';\nimport type { ReferencedFieldsByType } from '@apollo/utils.usagereporting';\n\nexport interface OperationDerivedData {\n  signature: string;\n  referencedFieldsByType: ReferencedFieldsByType;\n}\n\nexport function createOperationDerivedDataCache({\n  logger,\n}: {\n  logger: Logger;\n}): LRUCache<string, OperationDerivedData> {\n  let lastWarn: Date;\n  let lastDisposals: number = 0;\n  return new LRUCache<string, OperationDerivedData>({\n    // Calculate the length of cache objects by the JSON.stringify byteLength.\n    length(obj) {\n      return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n    },\n    // 10MiB limit, very much approximately since we can't be sure how V8 might\n    // be storing this data internally. Though this should be enough to store a\n    // fair amount of operation data, depending on their overall complexity. A\n    // future version of this might expose some configuration option to grow the\n    // cache, but ideally, we could do that dynamically based on the resources\n    // available to the server, and not add more configuration surface area.\n    // Hopefully the warning message will allow us to evaluate the need with\n    // more validated input from those that receive it.\n    max: Math.pow(2, 20) * 10,\n    dispose() {\n      // Count the number of disposals between warning messages.\n      lastDisposals++;\n\n      // Only show a message warning about the high turnover every 60 seconds.\n      if (!lastWarn || new Date().getTime() - lastWarn.getTime() > 60000) {\n        // Log the time that we last displayed the message.\n        lastWarn = new Date();\n        logger.warn(\n          [\n            'This server is processing a high number of unique operations.  ',\n            `A total of ${lastDisposals} records have been `,\n            'ejected from the ApolloServerPluginUsageReporting signature cache in the past ',\n            'interval.  If you see this warning frequently, please open an ',\n            'issue on the Apollo Server repository.',\n          ].join(''),\n        );\n\n        // Reset the disposal counter for the next message interval.\n        lastDisposals = 0;\n      }\n    },\n  });\n}\n\nexport function operationDerivedDataCacheKey(\n  queryHash: string,\n  operationName: string,\n) {\n  return `${queryHash}${operationName && ':' + operationName}`;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}