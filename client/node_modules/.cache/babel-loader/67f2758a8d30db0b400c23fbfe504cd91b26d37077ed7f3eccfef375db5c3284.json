{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEmbeddedSandboxHTML = exports.getEmbeddedExplorerHTML = exports.ApolloServerPluginLandingPageProductionDefault = exports.ApolloServerPluginLandingPageLocalDefault = void 0;\nfunction ApolloServerPluginLandingPageLocalDefault() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    version,\n    __internal_apolloStudioEnv__,\n    ...rest\n  } = options;\n  return ApolloServerPluginLandingPageDefault(version, {\n    isProd: false,\n    apolloStudioEnv: __internal_apolloStudioEnv__,\n    ...rest\n  });\n}\nexports.ApolloServerPluginLandingPageLocalDefault = ApolloServerPluginLandingPageLocalDefault;\nfunction ApolloServerPluginLandingPageProductionDefault() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    version,\n    __internal_apolloStudioEnv__,\n    ...rest\n  } = options;\n  return ApolloServerPluginLandingPageDefault(version, {\n    isProd: true,\n    apolloStudioEnv: __internal_apolloStudioEnv__,\n    ...rest\n  });\n}\nexports.ApolloServerPluginLandingPageProductionDefault = ApolloServerPluginLandingPageProductionDefault;\nfunction encodeConfig(config) {\n  return JSON.stringify(encodeURIComponent(JSON.stringify(config)));\n}\nfunction getConfigStringForHtml(config) {\n  return JSON.stringify(config).replace('<', '\\\\u003c').replace('>', '\\\\u003e').replace('&', '\\\\u0026').replace(\"'\", '\\\\u0027');\n}\nconst getEmbeddedExplorerHTML = (version, config) => {\n  const productionLandingPageConfigOrDefault = {\n    displayOptions: {},\n    persistExplorerState: false,\n    ...(typeof config.embed === 'boolean' ? {} : config.embed)\n  };\n  const embeddedExplorerParams = {\n    ...config,\n    target: '#embeddableExplorer',\n    initialState: {\n      ...config,\n      displayOptions: {\n        ...productionLandingPageConfigOrDefault.displayOptions\n      }\n    },\n    persistExplorerState: productionLandingPageConfigOrDefault.persistExplorerState\n  };\n  return `\n<div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>Apollo Explorer cannot be loaded; it appears that you might be offline.</p>\n</div>\n<style>\n  iframe {\n    background-color: white;\n  }\n</style>\n<div\nstyle=\"width: 100vw; height: 100vh; position: absolute; top: 0;\"\nid=\"embeddableExplorer\"\n></div>\n<script src=\"https://embeddable-explorer.cdn.apollographql.com/${version}/embeddable-explorer.umd.production.min.js\"></script>\n<script>\n  var endpointUrl = window.location.href;\n  var embeddedExplorerConfig = ${getConfigStringForHtml(embeddedExplorerParams)};\n  new window.EmbeddedExplorer({\n    ...embeddedExplorerConfig,\n    endpointUrl,\n  });\n</script>\n`;\n};\nexports.getEmbeddedExplorerHTML = getEmbeddedExplorerHTML;\nconst getEmbeddedSandboxHTML = (version, config) => {\n  var _a, _b, _c, _d;\n  return `\n<div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>Apollo Sandbox cannot be loaded; it appears that you might be offline.</p>\n</div>\n<style>\n  iframe {\n    background-color: white;\n  }\n</style>\n<div\nstyle=\"width: 100vw; height: 100vh; position: absolute; top: 0;\"\nid=\"embeddableSandbox\"\n></div>\n<script src=\"https://embeddable-sandbox.cdn.apollographql.com/${version}/embeddable-sandbox.umd.production.min.js\"></script>\n<script>\n  var initialEndpoint = window.location.href;\n  new window.EmbeddedSandbox({\n    target: '#embeddableSandbox',\n    initialEndpoint,\n    includeCookies: ${(_a = config.includeCookies) !== null && _a !== void 0 ? _a : 'false'},\n    initialState: ${getConfigStringForHtml({\n    document: (_b = config.document) !== null && _b !== void 0 ? _b : undefined,\n    variables: (_c = config.variables) !== null && _c !== void 0 ? _c : undefined,\n    headers: (_d = config.headers) !== null && _d !== void 0 ? _d : undefined\n  })},\n  });\n</script>\n`;\n};\nexports.getEmbeddedSandboxHTML = getEmbeddedSandboxHTML;\nconst getNonEmbeddedLandingPageHTML = (version, config) => {\n  const encodedConfig = encodeConfig(config);\n  return `\n <div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>The full landing page cannot be loaded; it appears that you might be offline.</p>\n</div>\n<script>window.landingPage = ${encodedConfig};</script>\n<script src=\"https://apollo-server-landing-page.cdn.apollographql.com/${version}/static/js/main.js\"></script>`;\n};\nfunction ApolloServerPluginLandingPageDefault(maybeVersion, config) {\n  const version = maybeVersion !== null && maybeVersion !== void 0 ? maybeVersion : '_latest';\n  return {\n    __internal_installed_implicitly__: false,\n    async serverWillStart() {\n      return {\n        async renderLandingPage() {\n          const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link\n      rel=\"icon\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${version}/assets/favicon.png\"\n    />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Apollo server landing page\" />\n    <link\n      rel=\"apple-touch-icon\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${version}/assets/favicon.png\"\n    />\n    <link\n      rel=\"manifest\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${version}/manifest.json\"\n    />\n    <title>Apollo Server</title>\n  </head>\n  <body style=\"margin: 0; overflow-x: hidden; overflow-y: hidden\">\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"react-root\">\n      <style>\n        .fallback {\n          opacity: 0;\n          animation: fadeIn 1s 1s;\n          animation-iteration-count: 1;\n          animation-fill-mode: forwards;\n          padding: 1em;\n        }\n        @keyframes fadeIn {\n          0% {opacity:0;}\n          100% {opacity:1; }\n        }\n      </style>\n    ${config.embed ? 'graphRef' in config && config.graphRef ? (0, exports.getEmbeddedExplorerHTML)(version, config) : (0, exports.getEmbeddedSandboxHTML)(version, config) : getNonEmbeddedLandingPageHTML(version, config)}\n    </div>\n  </body>\n</html>\n          `;\n          return {\n            html\n          };\n        }\n      };\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["ApolloServerPluginLandingPageLocalDefault","options","version","__internal_apolloStudioEnv__","rest","ApolloServerPluginLandingPageDefault","isProd","apolloStudioEnv","exports","ApolloServerPluginLandingPageProductionDefault","encodeConfig","config","JSON","stringify","encodeURIComponent","getConfigStringForHtml","replace","getEmbeddedExplorerHTML","productionLandingPageConfigOrDefault","displayOptions","persistExplorerState","embed","embeddedExplorerParams","target","initialState","getEmbeddedSandboxHTML","includeCookies","document","undefined","variables","headers","getNonEmbeddedLandingPageHTML","encodedConfig","maybeVersion","__internal_installed_implicitly__","serverWillStart","renderLandingPage","html","graphRef"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\plugin\\landingPage\\default\\index.ts"],"sourcesContent":["import type { ImplicitlyInstallablePlugin } from '../../../ApolloServer';\nimport type {\n  ApolloServerPluginEmbeddedLandingPageProductionDefaultOptions,\n  ApolloServerPluginLandingPageLocalDefaultOptions,\n  ApolloServerPluginLandingPageProductionDefaultOptions,\n  LandingPageConfig,\n} from './types';\n\nexport function ApolloServerPluginLandingPageLocalDefault(\n  options: ApolloServerPluginLandingPageLocalDefaultOptions = {},\n): ImplicitlyInstallablePlugin {\n  const { version, __internal_apolloStudioEnv__, ...rest } = options;\n  return ApolloServerPluginLandingPageDefault(version, {\n    isProd: false,\n    apolloStudioEnv: __internal_apolloStudioEnv__,\n    ...rest,\n  });\n}\n\nexport function ApolloServerPluginLandingPageProductionDefault(\n  options: ApolloServerPluginLandingPageProductionDefaultOptions = {},\n): ImplicitlyInstallablePlugin {\n  const { version, __internal_apolloStudioEnv__, ...rest } = options;\n  return ApolloServerPluginLandingPageDefault(version, {\n    isProd: true,\n    apolloStudioEnv: __internal_apolloStudioEnv__,\n    ...rest,\n  });\n}\n\n// A triple encoding! Wow! First we use JSON.stringify to turn our object into a\n// string. Then we encodeURIComponent so we don't have to stress about what\n// would happen if the config contained `</script>`. Finally, we JSON.stringify\n// it again, which in practice just wraps it in a pair of double quotes (since\n// there shouldn't be any backslashes left after encodeURIComponent). The\n// consumer of this needs to decodeURIComponent and then JSON.parse; there's\n// only one JSON.parse because the outermost JSON string is parsed by the JS\n// parser itself.\nfunction encodeConfig(config: LandingPageConfig): string {\n  return JSON.stringify(encodeURIComponent(JSON.stringify(config)));\n}\n\n// This function turns an object into a string and replaces\n// <, >, &, ' with their unicode chars to avoid adding html tags to\n// the landing page html that might be passed from the config.\n// The only place these characters can appear in the output of\n// JSON.stringify is within string literals, where they can equally\n// well appear \\u-escaped. This specifically means that\n// `</script>` won't terminate the script block early.\n// (Perhaps we should have done this instead of the triple-encoding\n// of encodeConfig for the main landing page.)\nfunction getConfigStringForHtml(config: LandingPageConfig) {\n  return JSON.stringify(config)\n    .replace('<', '\\\\u003c')\n    .replace('>', '\\\\u003e')\n    .replace('&', '\\\\u0026')\n    .replace(\"'\", '\\\\u0027');\n}\n\nexport const getEmbeddedExplorerHTML = (\n  version: string,\n  config: ApolloServerPluginEmbeddedLandingPageProductionDefaultOptions,\n) => {\n  interface EmbeddableExplorerOptions {\n    graphRef: string;\n    target: string;\n\n    initialState?: {\n      document?: string;\n      variables?: Record<string, any>;\n      headers?: Record<string, string>;\n      displayOptions: {\n        docsPanelState?: 'open' | 'closed'; // default to 'open',\n        showHeadersAndEnvVars?: boolean; // default to `false`\n        theme?: 'dark' | 'light';\n      };\n    };\n    persistExplorerState?: boolean; // defaults to 'false'\n\n    endpointUrl: string;\n\n    includeCookies?: boolean; // defaults to 'false'\n  }\n  const productionLandingPageConfigOrDefault = {\n    displayOptions: {},\n    persistExplorerState: false,\n    ...(typeof config.embed === 'boolean' ? {} : config.embed),\n  };\n  const embeddedExplorerParams: Omit<EmbeddableExplorerOptions, 'endpointUrl'> =\n    {\n      ...config,\n      target: '#embeddableExplorer',\n      initialState: {\n        ...config,\n        displayOptions: {\n          ...productionLandingPageConfigOrDefault.displayOptions,\n        },\n      },\n      persistExplorerState:\n        productionLandingPageConfigOrDefault.persistExplorerState,\n    };\n\n  return `\n<div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>Apollo Explorer cannot be loaded; it appears that you might be offline.</p>\n</div>\n<style>\n  iframe {\n    background-color: white;\n  }\n</style>\n<div\nstyle=\"width: 100vw; height: 100vh; position: absolute; top: 0;\"\nid=\"embeddableExplorer\"\n></div>\n<script src=\"https://embeddable-explorer.cdn.apollographql.com/${version}/embeddable-explorer.umd.production.min.js\"></script>\n<script>\n  var endpointUrl = window.location.href;\n  var embeddedExplorerConfig = ${getConfigStringForHtml(\n    embeddedExplorerParams,\n  )};\n  new window.EmbeddedExplorer({\n    ...embeddedExplorerConfig,\n    endpointUrl,\n  });\n</script>\n`;\n};\n\nexport const getEmbeddedSandboxHTML = (\n  version: string,\n  config: LandingPageConfig,\n) => {\n  return `\n<div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>Apollo Sandbox cannot be loaded; it appears that you might be offline.</p>\n</div>\n<style>\n  iframe {\n    background-color: white;\n  }\n</style>\n<div\nstyle=\"width: 100vw; height: 100vh; position: absolute; top: 0;\"\nid=\"embeddableSandbox\"\n></div>\n<script src=\"https://embeddable-sandbox.cdn.apollographql.com/${version}/embeddable-sandbox.umd.production.min.js\"></script>\n<script>\n  var initialEndpoint = window.location.href;\n  new window.EmbeddedSandbox({\n    target: '#embeddableSandbox',\n    initialEndpoint,\n    includeCookies: ${config.includeCookies ?? 'false'},\n    initialState: ${getConfigStringForHtml({\n      document: config.document ?? undefined,\n      variables: config.variables ?? undefined,\n      headers: config.headers ?? undefined,\n    })},\n  });\n</script>\n`;\n};\n\nconst getNonEmbeddedLandingPageHTML = (\n  version: string,\n  config: LandingPageConfig,\n) => {\n  const encodedConfig = encodeConfig(config);\n\n  return `\n <div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>The full landing page cannot be loaded; it appears that you might be offline.</p>\n</div>\n<script>window.landingPage = ${encodedConfig};</script>\n<script src=\"https://apollo-server-landing-page.cdn.apollographql.com/${version}/static/js/main.js\"></script>`;\n};\n\n// Helper for the two actual plugin functions.\nfunction ApolloServerPluginLandingPageDefault(\n  maybeVersion: string | undefined,\n  config: LandingPageConfig & {\n    isProd: boolean;\n    apolloStudioEnv: 'staging' | 'prod' | undefined;\n  },\n): ImplicitlyInstallablePlugin {\n  const version = maybeVersion ?? '_latest';\n\n  return {\n    __internal_installed_implicitly__: false,\n    async serverWillStart() {\n      return {\n        async renderLandingPage() {\n          const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link\n      rel=\"icon\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${version}/assets/favicon.png\"\n    />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Apollo server landing page\" />\n    <link\n      rel=\"apple-touch-icon\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${version}/assets/favicon.png\"\n    />\n    <link\n      rel=\"manifest\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${version}/manifest.json\"\n    />\n    <title>Apollo Server</title>\n  </head>\n  <body style=\"margin: 0; overflow-x: hidden; overflow-y: hidden\">\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"react-root\">\n      <style>\n        .fallback {\n          opacity: 0;\n          animation: fadeIn 1s 1s;\n          animation-iteration-count: 1;\n          animation-fill-mode: forwards;\n          padding: 1em;\n        }\n        @keyframes fadeIn {\n          0% {opacity:0;}\n          100% {opacity:1; }\n        }\n      </style>\n    ${\n      config.embed\n        ? 'graphRef' in config && config.graphRef\n          ? getEmbeddedExplorerHTML(version, config)\n          : getEmbeddedSandboxHTML(version, config)\n        : getNonEmbeddedLandingPageHTML(version, config)\n    }\n    </div>\n  </body>\n</html>\n          `;\n          return { html };\n        },\n      };\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}