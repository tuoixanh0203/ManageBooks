{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRootTypeMap = exports.getRootTypes = exports.getRootTypeNames = exports.getDefinedRootType = void 0;\nconst errors_js_1 = require(\"./errors.js\");\nconst memoize_js_1 = require(\"./memoize.js\");\nfunction getDefinedRootType(schema, operation, nodes) {\n  const rootTypeMap = (0, exports.getRootTypeMap)(schema);\n  const rootType = rootTypeMap.get(operation);\n  if (rootType == null) {\n    throw (0, errors_js_1.createGraphQLError)(`Schema is not configured to execute ${operation} operation.`, {\n      nodes\n    });\n  }\n  return rootType;\n}\nexports.getDefinedRootType = getDefinedRootType;\nexports.getRootTypeNames = (0, memoize_js_1.memoize1)(function getRootTypeNames(schema) {\n  const rootTypes = (0, exports.getRootTypes)(schema);\n  return new Set([...rootTypes].map(type => type.name));\n});\nexports.getRootTypes = (0, memoize_js_1.memoize1)(function getRootTypes(schema) {\n  const rootTypeMap = (0, exports.getRootTypeMap)(schema);\n  return new Set(rootTypeMap.values());\n});\nexports.getRootTypeMap = (0, memoize_js_1.memoize1)(function getRootTypeMap(schema) {\n  const rootTypeMap = new Map();\n  const queryType = schema.getQueryType();\n  if (queryType) {\n    rootTypeMap.set('query', queryType);\n  }\n  const mutationType = schema.getMutationType();\n  if (mutationType) {\n    rootTypeMap.set('mutation', mutationType);\n  }\n  const subscriptionType = schema.getSubscriptionType();\n  if (subscriptionType) {\n    rootTypeMap.set('subscription', subscriptionType);\n  }\n  return rootTypeMap;\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","getRootTypeMap","getRootTypes","getRootTypeNames","getDefinedRootType","errors_js_1","require","memoize_js_1","schema","operation","nodes","rootTypeMap","rootType","get","createGraphQLError","memoize1","rootTypes","Set","map","type","name","values","Map","queryType","getQueryType","set","mutationType","getMutationType","subscriptionType","getSubscriptionType"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/utils/cjs/rootTypes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRootTypeMap = exports.getRootTypes = exports.getRootTypeNames = exports.getDefinedRootType = void 0;\nconst errors_js_1 = require(\"./errors.js\");\nconst memoize_js_1 = require(\"./memoize.js\");\nfunction getDefinedRootType(schema, operation, nodes) {\n    const rootTypeMap = (0, exports.getRootTypeMap)(schema);\n    const rootType = rootTypeMap.get(operation);\n    if (rootType == null) {\n        throw (0, errors_js_1.createGraphQLError)(`Schema is not configured to execute ${operation} operation.`, {\n            nodes,\n        });\n    }\n    return rootType;\n}\nexports.getDefinedRootType = getDefinedRootType;\nexports.getRootTypeNames = (0, memoize_js_1.memoize1)(function getRootTypeNames(schema) {\n    const rootTypes = (0, exports.getRootTypes)(schema);\n    return new Set([...rootTypes].map(type => type.name));\n});\nexports.getRootTypes = (0, memoize_js_1.memoize1)(function getRootTypes(schema) {\n    const rootTypeMap = (0, exports.getRootTypeMap)(schema);\n    return new Set(rootTypeMap.values());\n});\nexports.getRootTypeMap = (0, memoize_js_1.memoize1)(function getRootTypeMap(schema) {\n    const rootTypeMap = new Map();\n    const queryType = schema.getQueryType();\n    if (queryType) {\n        rootTypeMap.set('query', queryType);\n    }\n    const mutationType = schema.getMutationType();\n    if (mutationType) {\n        rootTypeMap.set('mutation', mutationType);\n    }\n    const subscriptionType = schema.getSubscriptionType();\n    if (subscriptionType) {\n        rootTypeMap.set('subscription', subscriptionType);\n    }\n    return rootTypeMap;\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAGF,OAAO,CAACG,YAAY,GAAGH,OAAO,CAACI,gBAAgB,GAAGJ,OAAO,CAACK,kBAAkB,GAAG,KAAK,CAAC;AAC9G,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC5C,SAASF,kBAAkB,CAACI,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAE;EAClD,MAAMC,WAAW,GAAG,CAAC,CAAC,EAAEZ,OAAO,CAACE,cAAc,EAAEO,MAAM,CAAC;EACvD,MAAMI,QAAQ,GAAGD,WAAW,CAACE,GAAG,CAACJ,SAAS,CAAC;EAC3C,IAAIG,QAAQ,IAAI,IAAI,EAAE;IAClB,MAAM,CAAC,CAAC,EAAEP,WAAW,CAACS,kBAAkB,EAAG,uCAAsCL,SAAU,aAAY,EAAE;MACrGC;IACJ,CAAC,CAAC;EACN;EACA,OAAOE,QAAQ;AACnB;AACAb,OAAO,CAACK,kBAAkB,GAAGA,kBAAkB;AAC/CL,OAAO,CAACI,gBAAgB,GAAG,CAAC,CAAC,EAAEI,YAAY,CAACQ,QAAQ,EAAE,SAASZ,gBAAgB,CAACK,MAAM,EAAE;EACpF,MAAMQ,SAAS,GAAG,CAAC,CAAC,EAAEjB,OAAO,CAACG,YAAY,EAAEM,MAAM,CAAC;EACnD,OAAO,IAAIS,GAAG,CAAC,CAAC,GAAGD,SAAS,CAAC,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC;AACzD,CAAC,CAAC;AACFrB,OAAO,CAACG,YAAY,GAAG,CAAC,CAAC,EAAEK,YAAY,CAACQ,QAAQ,EAAE,SAASb,YAAY,CAACM,MAAM,EAAE;EAC5E,MAAMG,WAAW,GAAG,CAAC,CAAC,EAAEZ,OAAO,CAACE,cAAc,EAAEO,MAAM,CAAC;EACvD,OAAO,IAAIS,GAAG,CAACN,WAAW,CAACU,MAAM,EAAE,CAAC;AACxC,CAAC,CAAC;AACFtB,OAAO,CAACE,cAAc,GAAG,CAAC,CAAC,EAAEM,YAAY,CAACQ,QAAQ,EAAE,SAASd,cAAc,CAACO,MAAM,EAAE;EAChF,MAAMG,WAAW,GAAG,IAAIW,GAAG,EAAE;EAC7B,MAAMC,SAAS,GAAGf,MAAM,CAACgB,YAAY,EAAE;EACvC,IAAID,SAAS,EAAE;IACXZ,WAAW,CAACc,GAAG,CAAC,OAAO,EAAEF,SAAS,CAAC;EACvC;EACA,MAAMG,YAAY,GAAGlB,MAAM,CAACmB,eAAe,EAAE;EAC7C,IAAID,YAAY,EAAE;IACdf,WAAW,CAACc,GAAG,CAAC,UAAU,EAAEC,YAAY,CAAC;EAC7C;EACA,MAAME,gBAAgB,GAAGpB,MAAM,CAACqB,mBAAmB,EAAE;EACrD,IAAID,gBAAgB,EAAE;IAClBjB,WAAW,CAACc,GAAG,CAAC,cAAc,EAAEG,gBAAgB,CAAC;EACrD;EACA,OAAOjB,WAAW;AACtB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}