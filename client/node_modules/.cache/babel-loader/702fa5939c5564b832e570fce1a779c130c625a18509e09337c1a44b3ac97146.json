{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateSchemaHash = void 0;\nconst language_1 = require(\"graphql/language\");\nconst execution_1 = require(\"graphql/execution\");\nconst utilities_1 = require(\"graphql/utilities\");\nconst fast_json_stable_stringify_1 = __importDefault(require(\"fast-json-stable-stringify\"));\nconst createSHA_1 = __importDefault(require(\"./createSHA\"));\nfunction generateSchemaHash(schema) {\n  const introspectionQuery = (0, utilities_1.getIntrospectionQuery)();\n  const document = (0, language_1.parse)(introspectionQuery);\n  const result = (0, execution_1.execute)({\n    schema,\n    document\n  });\n  if (result && typeof result.then === 'function') {\n    throw new Error(['The introspection query is resolving asynchronously; execution of an introspection query is not expected to return a `Promise`.', '', 'Wrapped type resolvers should maintain the existing execution dynamics of the resolvers they wrap (i.e. async vs sync) or introspection types should be excluded from wrapping by checking them with `graphql/type`s, `isIntrospectionType` predicate function prior to wrapping.'].join('\\n'));\n  }\n  if (!result || !result.data || !result.data.__schema) {\n    throw new Error('Unable to generate server introspection document.');\n  }\n  const introspectionSchema = result.data.__schema;\n  const stringifiedSchema = (0, fast_json_stable_stringify_1.default)(introspectionSchema);\n  return (0, createSHA_1.default)('sha512').update(stringifiedSchema).digest('hex');\n}\nexports.generateSchemaHash = generateSchemaHash;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAgBA,SAAgBA,kBAAkB,CAACC,MAAqB;EACtD,MAAMC,kBAAkB,GAAG,qCAAqB,GAAE;EAClD,MAAMC,QAAQ,GAAG,oBAAK,EAACD,kBAAkB,CAAC;EAC1C,MAAME,MAAM,GAAG,uBAAO,EAAC;IACrBH,MAAM;IACNE;GACD,CAAwC;EAMzC,IACEC,MAAM,IACN,OAAQA,MAAqC,CAACC,IAAI,KAAK,UAAU,EACjE;IACA,MAAM,IAAIC,KAAK,CACb,CACE,iIAAiI,EACjI,EAAE,EACF,mRAAmR,CACpR,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;EAGH,IAAI,CAACH,MAAM,IAAI,CAACA,MAAM,CAACI,IAAI,IAAI,CAACJ,MAAM,CAACI,IAAI,CAACC,QAAQ,EAAE;IACpD,MAAM,IAAIH,KAAK,CAAC,mDAAmD,CAAC;;EAGtE,MAAMI,mBAAmB,GAAGN,MAAM,CAACI,IAAI,CAACC,QAAQ;EAKhD,MAAME,iBAAiB,GAAG,wCAAe,EAACD,mBAAmB,CAAC;EAE9D,OAAO,uBAAS,EAAC,QAAQ,CAAC,CACvBE,MAAM,CAACD,iBAAiB,CAAC,CACzBE,MAAM,CAAC,KAAK,CAAe;AAChC;AAvCAC","names":["generateSchemaHash","schema","introspectionQuery","document","result","then","Error","join","data","__schema","introspectionSchema","stringifiedSchema","update","digest","exports"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\utils\\schemaHash.ts"],"sourcesContent":["import { parse } from 'graphql/language';\nimport { execute, ExecutionResult } from 'graphql/execution';\nimport { getIntrospectionQuery, IntrospectionQuery } from 'graphql/utilities';\nimport stableStringify from 'fast-json-stable-stringify';\nimport type { GraphQLSchema } from 'graphql/type';\nimport createSHA from './createSHA';\nimport type { SchemaHash } from 'apollo-server-types';\n\n/*\n * This function returns a not particularly stable schema hash derived from a\n * GraphQLSchema object. It works by running the `graphql-js` default\n * introspection query against the schema and taking a SHA of a JSON encoding of\n * the result. It is dependent on the precise introspection query returned by\n * `graphql-js` and some of the details of how that library returns its data, so\n * upgrading `graphql-js` can change its value. It was created for use in\n * apollo-server-plugin-operation-registry (now @apollo/server-plugin-operation-registry) * but it is no longer used there. It is *not* the same as the hash used in\n * schema and usage reporting, which is just a hash of the schema SDL document.\n *\n * For backwards-compatibility reasons, it is still calculated and passed to all\n * plugin hooks, but it is not a good idea to use it for anything.\n */\nexport function generateSchemaHash(schema: GraphQLSchema): SchemaHash {\n  const introspectionQuery = getIntrospectionQuery();\n  const document = parse(introspectionQuery);\n  const result = execute({\n    schema,\n    document,\n  }) as ExecutionResult<IntrospectionQuery>;\n\n  // If the execution of an introspection query results in a then-able, it\n  // indicates that one or more of its resolvers is behaving in an asynchronous\n  // manner.  This is not the expected behavior of a introspection query\n  // which does not have any asynchronous resolvers.\n  if (\n    result &&\n    typeof (result as PromiseLike<typeof result>).then === 'function'\n  ) {\n    throw new Error(\n      [\n        'The introspection query is resolving asynchronously; execution of an introspection query is not expected to return a `Promise`.',\n        '',\n        'Wrapped type resolvers should maintain the existing execution dynamics of the resolvers they wrap (i.e. async vs sync) or introspection types should be excluded from wrapping by checking them with `graphql/type`s, `isIntrospectionType` predicate function prior to wrapping.',\n      ].join('\\n'),\n    );\n  }\n\n  if (!result || !result.data || !result.data.__schema) {\n    throw new Error('Unable to generate server introspection document.');\n  }\n\n  const introspectionSchema = result.data.__schema;\n\n  // It's important that we perform a deterministic stringification here\n  // since, depending on changes in the underlying `graphql-js` execution\n  // layer, varying orders of the properties in the introspection\n  const stringifiedSchema = stableStringify(introspectionSchema);\n\n  return createSHA('sha512')\n    .update(stringifiedSchema)\n    .digest('hex') as SchemaHash;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}