{"ast":null,"code":"\"use strict\";\n\nexports.removeLeadingAndTrailingHTTPWhitespace = string => {\n  return string.replace(/^[ \\t\\n\\r]+/u, \"\").replace(/[ \\t\\n\\r]+$/u, \"\");\n};\nexports.removeTrailingHTTPWhitespace = string => {\n  return string.replace(/[ \\t\\n\\r]+$/u, \"\");\n};\nexports.isHTTPWhitespaceChar = char => {\n  return char === \" \" || char === \"\\t\" || char === \"\\n\" || char === \"\\r\";\n};\nexports.solelyContainsHTTPTokenCodePoints = string => {\n  return /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(string);\n};\nexports.soleyContainsHTTPQuotedStringTokenCodePoints = string => {\n  return /^[\\t\\u0020-\\u007E\\u0080-\\u00FF]*$/u.test(string);\n};\nexports.asciiLowercase = string => {\n  return string.replace(/[A-Z]/ug, l => l.toLowerCase());\n};\n\n// This variant only implements it with the extract-value flag set.\nexports.collectAnHTTPQuotedString = (input, position) => {\n  let value = \"\";\n  position++;\n  while (true) {\n    while (position < input.length && input[position] !== \"\\\"\" && input[position] !== \"\\\\\") {\n      value += input[position];\n      ++position;\n    }\n    if (position >= input.length) {\n      break;\n    }\n    const quoteOrBackslash = input[position];\n    ++position;\n    if (quoteOrBackslash === \"\\\\\") {\n      if (position >= input.length) {\n        value += \"\\\\\";\n        break;\n      }\n      value += input[position];\n      ++position;\n    } else {\n      break;\n    }\n  }\n  return [value, position];\n};","map":{"version":3,"names":["exports","removeLeadingAndTrailingHTTPWhitespace","string","replace","removeTrailingHTTPWhitespace","isHTTPWhitespaceChar","char","solelyContainsHTTPTokenCodePoints","test","soleyContainsHTTPQuotedStringTokenCodePoints","asciiLowercase","l","toLowerCase","collectAnHTTPQuotedString","input","position","value","length","quoteOrBackslash"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/whatwg-mimetype/lib/utils.js"],"sourcesContent":["\"use strict\";\n\nexports.removeLeadingAndTrailingHTTPWhitespace = string => {\n  return string.replace(/^[ \\t\\n\\r]+/u, \"\").replace(/[ \\t\\n\\r]+$/u, \"\");\n};\n\nexports.removeTrailingHTTPWhitespace = string => {\n  return string.replace(/[ \\t\\n\\r]+$/u, \"\");\n};\n\nexports.isHTTPWhitespaceChar = char => {\n  return char === \" \" || char === \"\\t\" || char === \"\\n\" || char === \"\\r\";\n};\n\nexports.solelyContainsHTTPTokenCodePoints = string => {\n  return /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(string);\n};\n\nexports.soleyContainsHTTPQuotedStringTokenCodePoints = string => {\n  return /^[\\t\\u0020-\\u007E\\u0080-\\u00FF]*$/u.test(string);\n};\n\nexports.asciiLowercase = string => {\n  return string.replace(/[A-Z]/ug, l => l.toLowerCase());\n};\n\n// This variant only implements it with the extract-value flag set.\nexports.collectAnHTTPQuotedString = (input, position) => {\n  let value = \"\";\n\n  position++;\n\n  while (true) {\n    while (position < input.length && input[position] !== \"\\\"\" && input[position] !== \"\\\\\") {\n      value += input[position];\n      ++position;\n    }\n\n    if (position >= input.length) {\n      break;\n    }\n\n    const quoteOrBackslash = input[position];\n    ++position;\n\n    if (quoteOrBackslash === \"\\\\\") {\n      if (position >= input.length) {\n        value += \"\\\\\";\n        break;\n      }\n\n      value += input[position];\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return [value, position];\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,sCAAsC,GAAGC,MAAM,IAAI;EACzD,OAAOA,MAAM,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;AACvE,CAAC;AAEDH,OAAO,CAACI,4BAA4B,GAAGF,MAAM,IAAI;EAC/C,OAAOA,MAAM,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;AAC3C,CAAC;AAEDH,OAAO,CAACK,oBAAoB,GAAGC,IAAI,IAAI;EACrC,OAAOA,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,IAAI;AACxE,CAAC;AAEDN,OAAO,CAACO,iCAAiC,GAAGL,MAAM,IAAI;EACpD,OAAO,gCAAgC,CAACM,IAAI,CAACN,MAAM,CAAC;AACtD,CAAC;AAEDF,OAAO,CAACS,4CAA4C,GAAGP,MAAM,IAAI;EAC/D,OAAO,oCAAoC,CAACM,IAAI,CAACN,MAAM,CAAC;AAC1D,CAAC;AAEDF,OAAO,CAACU,cAAc,GAAGR,MAAM,IAAI;EACjC,OAAOA,MAAM,CAACC,OAAO,CAAC,SAAS,EAAEQ,CAAC,IAAIA,CAAC,CAACC,WAAW,EAAE,CAAC;AACxD,CAAC;;AAED;AACAZ,OAAO,CAACa,yBAAyB,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACvD,IAAIC,KAAK,GAAG,EAAE;EAEdD,QAAQ,EAAE;EAEV,OAAO,IAAI,EAAE;IACX,OAAOA,QAAQ,GAAGD,KAAK,CAACG,MAAM,IAAIH,KAAK,CAACC,QAAQ,CAAC,KAAK,IAAI,IAAID,KAAK,CAACC,QAAQ,CAAC,KAAK,IAAI,EAAE;MACtFC,KAAK,IAAIF,KAAK,CAACC,QAAQ,CAAC;MACxB,EAAEA,QAAQ;IACZ;IAEA,IAAIA,QAAQ,IAAID,KAAK,CAACG,MAAM,EAAE;MAC5B;IACF;IAEA,MAAMC,gBAAgB,GAAGJ,KAAK,CAACC,QAAQ,CAAC;IACxC,EAAEA,QAAQ;IAEV,IAAIG,gBAAgB,KAAK,IAAI,EAAE;MAC7B,IAAIH,QAAQ,IAAID,KAAK,CAACG,MAAM,EAAE;QAC5BD,KAAK,IAAI,IAAI;QACb;MACF;MAEAA,KAAK,IAAIF,KAAK,CAACC,QAAQ,CAAC;MACxB,EAAEA,QAAQ;IACZ,CAAC,MAAM;MACL;IACF;EACF;EAEA,OAAO,CAACC,KAAK,EAAED,QAAQ,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}