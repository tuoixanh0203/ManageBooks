{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnboundedCache = void 0;\nclass UnboundedCache {\n  constructor() {\n    let cache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();\n    this.cache = cache;\n  }\n  async get(key) {\n    const entry = this.cache.get(key);\n    if (!entry) return undefined;\n    if (entry.deadline && entry.deadline <= Date.now()) {\n      await this.delete(key);\n      return undefined;\n    }\n    return entry.value;\n  }\n  async set(key, value) {\n    let {\n      ttl\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      ttl: null\n    };\n    this.cache.set(key, {\n      value,\n      deadline: ttl ? Date.now() + ttl * 1000 : null\n    });\n  }\n  async delete(key) {\n    this.cache.delete(key);\n  }\n}\nexports.UnboundedCache = UnboundedCache;","map":{"version":3,"mappings":";;;;;;AAEA,MAAaA,cAAc;EACzBC,cAIe;IAAA,IAHLC,4EAGJ,IAAIC,GAAG,EAAE;IAHL,UAAK,GAALD,KAAK;EAIZ;EAEH,MAAME,GAAG,CAACC,GAAW;IACnB,MAAMC,KAAK,GAAG,IAAI,CAACJ,KAAK,CAACE,GAAG,CAACC,GAAG,CAAC;IACjC,IAAI,CAACC,KAAK,EAAE,OAAOC,SAAS;IAC5B,IAAID,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACE,QAAQ,IAAIC,IAAI,CAACC,GAAG,EAAE,EAAE;MAClD,MAAM,IAAI,CAACC,MAAM,CAACN,GAAG,CAAC;MACtB,OAAOE,SAAS;;IAElB,OAAOD,KAAK,CAACM,KAAK;EACpB;EAEA,MAAMC,GAAG,CACPR,GAAW,EACXO,KAAQ,EACuC;IAAA,IAA/C;MAAEE;IAAG,wEAA6B;MAAEA,GAAG,EAAE;IAAI,CAAE;IAE/C,IAAI,CAACZ,KAAK,CAACW,GAAG,CAACR,GAAG,EAAE;MAClBO,KAAK;MACLJ,QAAQ,EAAEM,GAAG,GAAGL,IAAI,CAACC,GAAG,EAAE,GAAGI,GAAG,GAAG,IAAI,GAAG;KAC3C,CAAC;EACJ;EAEA,MAAMH,MAAM,CAACN,GAAW;IACtB,IAAI,CAACH,KAAK,CAACS,MAAM,CAACN,GAAG,CAAC;EACxB;;AA/BFU","names":["UnboundedCache","constructor","cache","Map","get","key","entry","undefined","deadline","Date","now","delete","value","set","ttl","exports"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\utils\\UnboundedCache.ts"],"sourcesContent":["import type { KeyValueCache } from '@apollo/utils.keyvaluecache';\n\nexport class UnboundedCache<T = string> implements KeyValueCache<T> {\n  constructor(\n    private cache: Map<\n      string,\n      { value: T; deadline: number | null }\n    > = new Map(),\n  ) {}\n\n  async get(key: string) {\n    const entry = this.cache.get(key);\n    if (!entry) return undefined;\n    if (entry.deadline && entry.deadline <= Date.now()) {\n      await this.delete(key);\n      return undefined;\n    }\n    return entry.value;\n  }\n\n  async set(\n    key: string,\n    value: T,\n    { ttl }: { ttl: number | null } = { ttl: null },\n  ) {\n    this.cache.set(key, {\n      value,\n      deadline: ttl ? Date.now() + ttl * 1000 : null,\n    });\n  }\n\n  async delete(key: string) {\n    this.cache.delete(key);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}