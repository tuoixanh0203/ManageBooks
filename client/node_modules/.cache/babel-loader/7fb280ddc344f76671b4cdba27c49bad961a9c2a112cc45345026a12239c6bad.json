{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.astFromType = void 0;\nconst graphql_1 = require(\"graphql\");\nconst inspect_js_1 = require(\"./inspect.js\");\nfunction astFromType(type) {\n  if ((0, graphql_1.isNonNullType)(type)) {\n    const innerType = astFromType(type.ofType);\n    if (innerType.kind === graphql_1.Kind.NON_NULL_TYPE) {\n      throw new Error(`Invalid type node ${(0, inspect_js_1.inspect)(type)}. Inner type of non-null type cannot be a non-null type.`);\n    }\n    return {\n      kind: graphql_1.Kind.NON_NULL_TYPE,\n      type: innerType\n    };\n  } else if ((0, graphql_1.isListType)(type)) {\n    return {\n      kind: graphql_1.Kind.LIST_TYPE,\n      type: astFromType(type.ofType)\n    };\n  }\n  return {\n    kind: graphql_1.Kind.NAMED_TYPE,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: type.name\n    }\n  };\n}\nexports.astFromType = astFromType;","map":{"version":3,"names":["Object","defineProperty","exports","value","astFromType","graphql_1","require","inspect_js_1","type","isNonNullType","innerType","ofType","kind","Kind","NON_NULL_TYPE","Error","inspect","isListType","LIST_TYPE","NAMED_TYPE","name","NAME"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/schema/node_modules/@graphql-tools/utils/cjs/astFromType.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.astFromType = void 0;\nconst graphql_1 = require(\"graphql\");\nconst inspect_js_1 = require(\"./inspect.js\");\nfunction astFromType(type) {\n    if ((0, graphql_1.isNonNullType)(type)) {\n        const innerType = astFromType(type.ofType);\n        if (innerType.kind === graphql_1.Kind.NON_NULL_TYPE) {\n            throw new Error(`Invalid type node ${(0, inspect_js_1.inspect)(type)}. Inner type of non-null type cannot be a non-null type.`);\n        }\n        return {\n            kind: graphql_1.Kind.NON_NULL_TYPE,\n            type: innerType,\n        };\n    }\n    else if ((0, graphql_1.isListType)(type)) {\n        return {\n            kind: graphql_1.Kind.LIST_TYPE,\n            type: astFromType(type.ofType),\n        };\n    }\n    return {\n        kind: graphql_1.Kind.NAMED_TYPE,\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: type.name,\n        },\n    };\n}\nexports.astFromType = astFromType;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC5C,SAASF,WAAW,CAACI,IAAI,EAAE;EACvB,IAAI,CAAC,CAAC,EAAEH,SAAS,CAACI,aAAa,EAAED,IAAI,CAAC,EAAE;IACpC,MAAME,SAAS,GAAGN,WAAW,CAACI,IAAI,CAACG,MAAM,CAAC;IAC1C,IAAID,SAAS,CAACE,IAAI,KAAKP,SAAS,CAACQ,IAAI,CAACC,aAAa,EAAE;MACjD,MAAM,IAAIC,KAAK,CAAE,qBAAoB,CAAC,CAAC,EAAER,YAAY,CAACS,OAAO,EAAER,IAAI,CAAE,0DAAyD,CAAC;IACnI;IACA,OAAO;MACHI,IAAI,EAAEP,SAAS,CAACQ,IAAI,CAACC,aAAa;MAClCN,IAAI,EAAEE;IACV,CAAC;EACL,CAAC,MACI,IAAI,CAAC,CAAC,EAAEL,SAAS,CAACY,UAAU,EAAET,IAAI,CAAC,EAAE;IACtC,OAAO;MACHI,IAAI,EAAEP,SAAS,CAACQ,IAAI,CAACK,SAAS;MAC9BV,IAAI,EAAEJ,WAAW,CAACI,IAAI,CAACG,MAAM;IACjC,CAAC;EACL;EACA,OAAO;IACHC,IAAI,EAAEP,SAAS,CAACQ,IAAI,CAACM,UAAU;IAC/BC,IAAI,EAAE;MACFR,IAAI,EAAEP,SAAS,CAACQ,IAAI,CAACQ,IAAI;MACzBlB,KAAK,EAAEK,IAAI,CAACY;IAChB;EACJ,CAAC;AACL;AACAlB,OAAO,CAACE,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}