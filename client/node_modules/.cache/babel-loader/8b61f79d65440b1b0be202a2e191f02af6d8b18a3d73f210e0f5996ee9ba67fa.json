{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeResolvers = void 0;\nconst utils_1 = require(\"@graphql-tools/utils\");\n/**\n * Deep merges multiple resolver definition objects into a single definition.\n * @param resolversDefinitions Resolver definitions to be merged\n * @param options Additional options\n *\n * ```js\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const clientResolver = require('./clientResolver');\n * const productResolver = require('./productResolver');\n *\n * const resolvers = mergeResolvers([\n *  clientResolver,\n *  productResolver,\n * ]);\n * ```\n *\n * If you don't want to manually create the array of resolver objects, you can\n * also use this function along with loadFiles:\n *\n * ```js\n * const path = require('path');\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const { loadFilesSync } = require('@graphql-tools/load-files');\n *\n * const resolversArray = loadFilesSync(path.join(__dirname, './resolvers'));\n *\n * const resolvers = mergeResolvers(resolversArray)\n * ```\n */\nfunction mergeResolvers(resolversDefinitions, options) {\n  if (!resolversDefinitions || Array.isArray(resolversDefinitions) && resolversDefinitions.length === 0) {\n    return {};\n  }\n  if (!Array.isArray(resolversDefinitions)) {\n    return resolversDefinitions;\n  }\n  if (resolversDefinitions.length === 1) {\n    return resolversDefinitions[0] || {};\n  }\n  const resolvers = new Array();\n  for (let resolversDefinition of resolversDefinitions) {\n    if (Array.isArray(resolversDefinition)) {\n      resolversDefinition = mergeResolvers(resolversDefinition);\n    }\n    if (typeof resolversDefinition === 'object' && resolversDefinition) {\n      resolvers.push(resolversDefinition);\n    }\n  }\n  const result = (0, utils_1.mergeDeep)(resolvers, true);\n  if (options === null || options === void 0 ? void 0 : options.exclusions) {\n    for (const exclusion of options.exclusions) {\n      const [typeName, fieldName] = exclusion.split('.');\n      if (!fieldName || fieldName === '*') {\n        delete result[typeName];\n      } else if (result[typeName]) {\n        delete result[typeName][fieldName];\n      }\n    }\n  }\n  return result;\n}\nexports.mergeResolvers = mergeResolvers;","map":{"version":3,"names":["Object","defineProperty","exports","value","mergeResolvers","utils_1","require","resolversDefinitions","options","Array","isArray","length","resolvers","resolversDefinition","push","result","mergeDeep","exclusions","exclusion","typeName","fieldName","split"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/merge/cjs/merge-resolvers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeResolvers = void 0;\nconst utils_1 = require(\"@graphql-tools/utils\");\n/**\n * Deep merges multiple resolver definition objects into a single definition.\n * @param resolversDefinitions Resolver definitions to be merged\n * @param options Additional options\n *\n * ```js\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const clientResolver = require('./clientResolver');\n * const productResolver = require('./productResolver');\n *\n * const resolvers = mergeResolvers([\n *  clientResolver,\n *  productResolver,\n * ]);\n * ```\n *\n * If you don't want to manually create the array of resolver objects, you can\n * also use this function along with loadFiles:\n *\n * ```js\n * const path = require('path');\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const { loadFilesSync } = require('@graphql-tools/load-files');\n *\n * const resolversArray = loadFilesSync(path.join(__dirname, './resolvers'));\n *\n * const resolvers = mergeResolvers(resolversArray)\n * ```\n */\nfunction mergeResolvers(resolversDefinitions, options) {\n    if (!resolversDefinitions || (Array.isArray(resolversDefinitions) && resolversDefinitions.length === 0)) {\n        return {};\n    }\n    if (!Array.isArray(resolversDefinitions)) {\n        return resolversDefinitions;\n    }\n    if (resolversDefinitions.length === 1) {\n        return resolversDefinitions[0] || {};\n    }\n    const resolvers = new Array();\n    for (let resolversDefinition of resolversDefinitions) {\n        if (Array.isArray(resolversDefinition)) {\n            resolversDefinition = mergeResolvers(resolversDefinition);\n        }\n        if (typeof resolversDefinition === 'object' && resolversDefinition) {\n            resolvers.push(resolversDefinition);\n        }\n    }\n    const result = (0, utils_1.mergeDeep)(resolvers, true);\n    if (options === null || options === void 0 ? void 0 : options.exclusions) {\n        for (const exclusion of options.exclusions) {\n            const [typeName, fieldName] = exclusion.split('.');\n            if (!fieldName || fieldName === '*') {\n                delete result[typeName];\n            }\n            else if (result[typeName]) {\n                delete result[typeName][fieldName];\n            }\n        }\n    }\n    return result;\n}\nexports.mergeResolvers = mergeResolvers;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,OAAO,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,cAAc,CAACG,oBAAoB,EAAEC,OAAO,EAAE;EACnD,IAAI,CAACD,oBAAoB,IAAKE,KAAK,CAACC,OAAO,CAACH,oBAAoB,CAAC,IAAIA,oBAAoB,CAACI,MAAM,KAAK,CAAE,EAAE;IACrG,OAAO,CAAC,CAAC;EACb;EACA,IAAI,CAACF,KAAK,CAACC,OAAO,CAACH,oBAAoB,CAAC,EAAE;IACtC,OAAOA,oBAAoB;EAC/B;EACA,IAAIA,oBAAoB,CAACI,MAAM,KAAK,CAAC,EAAE;IACnC,OAAOJ,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EACxC;EACA,MAAMK,SAAS,GAAG,IAAIH,KAAK,EAAE;EAC7B,KAAK,IAAII,mBAAmB,IAAIN,oBAAoB,EAAE;IAClD,IAAIE,KAAK,CAACC,OAAO,CAACG,mBAAmB,CAAC,EAAE;MACpCA,mBAAmB,GAAGT,cAAc,CAACS,mBAAmB,CAAC;IAC7D;IACA,IAAI,OAAOA,mBAAmB,KAAK,QAAQ,IAAIA,mBAAmB,EAAE;MAChED,SAAS,CAACE,IAAI,CAACD,mBAAmB,CAAC;IACvC;EACJ;EACA,MAAME,MAAM,GAAG,CAAC,CAAC,EAAEV,OAAO,CAACW,SAAS,EAAEJ,SAAS,EAAE,IAAI,CAAC;EACtD,IAAIJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACS,UAAU,EAAE;IACtE,KAAK,MAAMC,SAAS,IAAIV,OAAO,CAACS,UAAU,EAAE;MACxC,MAAM,CAACE,QAAQ,EAAEC,SAAS,CAAC,GAAGF,SAAS,CAACG,KAAK,CAAC,GAAG,CAAC;MAClD,IAAI,CAACD,SAAS,IAAIA,SAAS,KAAK,GAAG,EAAE;QACjC,OAAOL,MAAM,CAACI,QAAQ,CAAC;MAC3B,CAAC,MACI,IAAIJ,MAAM,CAACI,QAAQ,CAAC,EAAE;QACvB,OAAOJ,MAAM,CAACI,QAAQ,CAAC,CAACC,SAAS,CAAC;MACtC;IACJ;EACJ;EACA,OAAOL,MAAM;AACjB;AACAb,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}