{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyExtensions = exports.mergeExtensions = exports.extractExtensionsFromSchema = void 0;\nconst utils_1 = require(\"@graphql-tools/utils\");\nvar utils_2 = require(\"@graphql-tools/utils\");\nObject.defineProperty(exports, \"extractExtensionsFromSchema\", {\n  enumerable: true,\n  get: function () {\n    return utils_2.extractExtensionsFromSchema;\n  }\n});\nfunction mergeExtensions(extensions) {\n  return (0, utils_1.mergeDeep)(extensions);\n}\nexports.mergeExtensions = mergeExtensions;\nfunction applyExtensionObject(obj, extensions) {\n  if (!obj) {\n    return;\n  }\n  obj.extensions = (0, utils_1.mergeDeep)([obj.extensions || {}, extensions || {}]);\n}\nfunction applyExtensions(schema, extensions) {\n  applyExtensionObject(schema, extensions.schemaExtensions);\n  for (const [typeName, data] of Object.entries(extensions.types || {})) {\n    const type = schema.getType(typeName);\n    if (type) {\n      applyExtensionObject(type, data.extensions);\n      if (data.type === 'object' || data.type === 'interface') {\n        for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n          const field = type.getFields()[fieldName];\n          if (field) {\n            applyExtensionObject(field, fieldData.extensions);\n            for (const [arg, argData] of Object.entries(fieldData.arguments)) {\n              applyExtensionObject(field.args.find(a => a.name === arg), argData);\n            }\n          }\n        }\n      } else if (data.type === 'input') {\n        for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n          const field = type.getFields()[fieldName];\n          applyExtensionObject(field, fieldData.extensions);\n        }\n      } else if (data.type === 'enum') {\n        for (const [valueName, valueData] of Object.entries(data.values)) {\n          const value = type.getValue(valueName);\n          applyExtensionObject(value, valueData);\n        }\n      }\n    }\n  }\n  return schema;\n}\nexports.applyExtensions = applyExtensions;","map":{"version":3,"names":["Object","defineProperty","exports","value","applyExtensions","mergeExtensions","extractExtensionsFromSchema","utils_1","require","utils_2","enumerable","get","extensions","mergeDeep","applyExtensionObject","obj","schema","schemaExtensions","typeName","data","entries","types","type","getType","fieldName","fieldData","fields","field","getFields","arg","argData","arguments","args","find","a","name","valueName","valueData","values","getValue"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/mock/node_modules/@graphql-tools/merge/cjs/extensions.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.applyExtensions = exports.mergeExtensions = exports.extractExtensionsFromSchema = void 0;\nconst utils_1 = require(\"@graphql-tools/utils\");\nvar utils_2 = require(\"@graphql-tools/utils\");\nObject.defineProperty(exports, \"extractExtensionsFromSchema\", { enumerable: true, get: function () { return utils_2.extractExtensionsFromSchema; } });\nfunction mergeExtensions(extensions) {\n    return (0, utils_1.mergeDeep)(extensions);\n}\nexports.mergeExtensions = mergeExtensions;\nfunction applyExtensionObject(obj, extensions) {\n    if (!obj) {\n        return;\n    }\n    obj.extensions = (0, utils_1.mergeDeep)([obj.extensions || {}, extensions || {}]);\n}\nfunction applyExtensions(schema, extensions) {\n    applyExtensionObject(schema, extensions.schemaExtensions);\n    for (const [typeName, data] of Object.entries(extensions.types || {})) {\n        const type = schema.getType(typeName);\n        if (type) {\n            applyExtensionObject(type, data.extensions);\n            if (data.type === 'object' || data.type === 'interface') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    if (field) {\n                        applyExtensionObject(field, fieldData.extensions);\n                        for (const [arg, argData] of Object.entries(fieldData.arguments)) {\n                            applyExtensionObject(field.args.find(a => a.name === arg), argData);\n                        }\n                    }\n                }\n            }\n            else if (data.type === 'input') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    applyExtensionObject(field, fieldData.extensions);\n                }\n            }\n            else if (data.type === 'enum') {\n                for (const [valueName, valueData] of Object.entries(data.values)) {\n                    const value = type.getValue(valueName);\n                    applyExtensionObject(value, valueData);\n                }\n            }\n        }\n    }\n    return schema;\n}\nexports.applyExtensions = applyExtensions;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}