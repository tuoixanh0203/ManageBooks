{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLStreamDirective = exports.GraphQLDeferDirective = void 0;\nconst graphql_1 = require(\"graphql\");\n/**\n * Used to conditionally defer fragments.\n */\nexports.GraphQLDeferDirective = new graphql_1.GraphQLDirective({\n  name: 'defer',\n  description: 'Directs the executor to defer this fragment when the `if` argument is true or undefined.',\n  locations: [graphql_1.DirectiveLocation.FRAGMENT_SPREAD, graphql_1.DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),\n      description: 'Deferred when true or undefined.',\n      defaultValue: true\n    },\n    label: {\n      type: graphql_1.GraphQLString,\n      description: 'Unique name'\n    }\n  }\n});\n/**\n * Used to conditionally stream list fields.\n */\nexports.GraphQLStreamDirective = new graphql_1.GraphQLDirective({\n  name: 'stream',\n  description: 'Directs the executor to stream plural fields when the `if` argument is true or undefined.',\n  locations: [graphql_1.DirectiveLocation.FIELD],\n  args: {\n    if: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),\n      description: 'Stream when true or undefined.',\n      defaultValue: true\n    },\n    label: {\n      type: graphql_1.GraphQLString,\n      description: 'Unique name'\n    },\n    initialCount: {\n      defaultValue: 0,\n      type: graphql_1.GraphQLInt,\n      description: 'Number of items to return immediately'\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLStreamDirective","GraphQLDeferDirective","graphql_1","require","GraphQLDirective","name","description","locations","DirectiveLocation","FRAGMENT_SPREAD","INLINE_FRAGMENT","args","if","type","GraphQLNonNull","GraphQLBoolean","defaultValue","label","GraphQLString","FIELD","initialCount","GraphQLInt"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/utils/cjs/directives.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLStreamDirective = exports.GraphQLDeferDirective = void 0;\nconst graphql_1 = require(\"graphql\");\n/**\n * Used to conditionally defer fragments.\n */\nexports.GraphQLDeferDirective = new graphql_1.GraphQLDirective({\n    name: 'defer',\n    description: 'Directs the executor to defer this fragment when the `if` argument is true or undefined.',\n    locations: [graphql_1.DirectiveLocation.FRAGMENT_SPREAD, graphql_1.DirectiveLocation.INLINE_FRAGMENT],\n    args: {\n        if: {\n            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),\n            description: 'Deferred when true or undefined.',\n            defaultValue: true,\n        },\n        label: {\n            type: graphql_1.GraphQLString,\n            description: 'Unique name',\n        },\n    },\n});\n/**\n * Used to conditionally stream list fields.\n */\nexports.GraphQLStreamDirective = new graphql_1.GraphQLDirective({\n    name: 'stream',\n    description: 'Directs the executor to stream plural fields when the `if` argument is true or undefined.',\n    locations: [graphql_1.DirectiveLocation.FIELD],\n    args: {\n        if: {\n            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),\n            description: 'Stream when true or undefined.',\n            defaultValue: true,\n        },\n        label: {\n            type: graphql_1.GraphQLString,\n            description: 'Unique name',\n        },\n        initialCount: {\n            defaultValue: 0,\n            type: graphql_1.GraphQLInt,\n            description: 'Number of items to return immediately',\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,sBAAsB,GAAGF,OAAO,CAACG,qBAAqB,GAAG,KAAK,CAAC;AACvE,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC;AACA;AACA;AACAL,OAAO,CAACG,qBAAqB,GAAG,IAAIC,SAAS,CAACE,gBAAgB,CAAC;EAC3DC,IAAI,EAAE,OAAO;EACbC,WAAW,EAAE,0FAA0F;EACvGC,SAAS,EAAE,CAACL,SAAS,CAACM,iBAAiB,CAACC,eAAe,EAAEP,SAAS,CAACM,iBAAiB,CAACE,eAAe,CAAC;EACrGC,IAAI,EAAE;IACFC,EAAE,EAAE;MACAC,IAAI,EAAE,IAAIX,SAAS,CAACY,cAAc,CAACZ,SAAS,CAACa,cAAc,CAAC;MAC5DT,WAAW,EAAE,kCAAkC;MAC/CU,YAAY,EAAE;IAClB,CAAC;IACDC,KAAK,EAAE;MACHJ,IAAI,EAAEX,SAAS,CAACgB,aAAa;MAC7BZ,WAAW,EAAE;IACjB;EACJ;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACAR,OAAO,CAACE,sBAAsB,GAAG,IAAIE,SAAS,CAACE,gBAAgB,CAAC;EAC5DC,IAAI,EAAE,QAAQ;EACdC,WAAW,EAAE,2FAA2F;EACxGC,SAAS,EAAE,CAACL,SAAS,CAACM,iBAAiB,CAACW,KAAK,CAAC;EAC9CR,IAAI,EAAE;IACFC,EAAE,EAAE;MACAC,IAAI,EAAE,IAAIX,SAAS,CAACY,cAAc,CAACZ,SAAS,CAACa,cAAc,CAAC;MAC5DT,WAAW,EAAE,gCAAgC;MAC7CU,YAAY,EAAE;IAClB,CAAC;IACDC,KAAK,EAAE;MACHJ,IAAI,EAAEX,SAAS,CAACgB,aAAa;MAC7BZ,WAAW,EAAE;IACjB,CAAC;IACDc,YAAY,EAAE;MACVJ,YAAY,EAAE,CAAC;MACfH,IAAI,EAAEX,SAAS,CAACmB,UAAU;MAC1Bf,WAAW,EAAE;IACjB;EACJ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}