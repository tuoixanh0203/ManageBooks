{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createVariableNameGenerator = exports.updateArgument = void 0;\nconst graphql_1 = require(\"graphql\");\nconst astFromType_js_1 = require(\"./astFromType.js\");\nfunction updateArgument(argumentNodes, variableDefinitionsMap, variableValues, argName, varName, type, value) {\n  argumentNodes[argName] = {\n    kind: graphql_1.Kind.ARGUMENT,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: argName\n    },\n    value: {\n      kind: graphql_1.Kind.VARIABLE,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: varName\n      }\n    }\n  };\n  variableDefinitionsMap[varName] = {\n    kind: graphql_1.Kind.VARIABLE_DEFINITION,\n    variable: {\n      kind: graphql_1.Kind.VARIABLE,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: varName\n      }\n    },\n    type: (0, astFromType_js_1.astFromType)(type)\n  };\n  if (value !== undefined) {\n    variableValues[varName] = value;\n    return;\n  }\n  // including the variable in the map with value of `undefined`\n  // will actually be translated by graphql-js into `null`\n  // see https://github.com/graphql/graphql-js/issues/2533\n  if (varName in variableValues) {\n    delete variableValues[varName];\n  }\n}\nexports.updateArgument = updateArgument;\nfunction createVariableNameGenerator(variableDefinitionMap) {\n  let varCounter = 0;\n  return argName => {\n    let varName;\n    do {\n      varName = `_v${(varCounter++).toString()}_${argName}`;\n    } while (varName in variableDefinitionMap);\n    return varName;\n  };\n}\nexports.createVariableNameGenerator = createVariableNameGenerator;","map":{"version":3,"names":["Object","defineProperty","exports","value","createVariableNameGenerator","updateArgument","graphql_1","require","astFromType_js_1","argumentNodes","variableDefinitionsMap","variableValues","argName","varName","type","kind","Kind","ARGUMENT","name","NAME","VARIABLE","VARIABLE_DEFINITION","variable","astFromType","undefined","variableDefinitionMap","varCounter","toString"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/schema/node_modules/@graphql-tools/utils/cjs/updateArgument.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createVariableNameGenerator = exports.updateArgument = void 0;\nconst graphql_1 = require(\"graphql\");\nconst astFromType_js_1 = require(\"./astFromType.js\");\nfunction updateArgument(argumentNodes, variableDefinitionsMap, variableValues, argName, varName, type, value) {\n    argumentNodes[argName] = {\n        kind: graphql_1.Kind.ARGUMENT,\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: argName,\n        },\n        value: {\n            kind: graphql_1.Kind.VARIABLE,\n            name: {\n                kind: graphql_1.Kind.NAME,\n                value: varName,\n            },\n        },\n    };\n    variableDefinitionsMap[varName] = {\n        kind: graphql_1.Kind.VARIABLE_DEFINITION,\n        variable: {\n            kind: graphql_1.Kind.VARIABLE,\n            name: {\n                kind: graphql_1.Kind.NAME,\n                value: varName,\n            },\n        },\n        type: (0, astFromType_js_1.astFromType)(type),\n    };\n    if (value !== undefined) {\n        variableValues[varName] = value;\n        return;\n    }\n    // including the variable in the map with value of `undefined`\n    // will actually be translated by graphql-js into `null`\n    // see https://github.com/graphql/graphql-js/issues/2533\n    if (varName in variableValues) {\n        delete variableValues[varName];\n    }\n}\nexports.updateArgument = updateArgument;\nfunction createVariableNameGenerator(variableDefinitionMap) {\n    let varCounter = 0;\n    return (argName) => {\n        let varName;\n        do {\n            varName = `_v${(varCounter++).toString()}_${argName}`;\n        } while (varName in variableDefinitionMap);\n        return varName;\n    };\n}\nexports.createVariableNameGenerator = createVariableNameGenerator;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,2BAA2B,GAAGF,OAAO,CAACG,cAAc,GAAG,KAAK,CAAC;AACrE,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACpD,SAASF,cAAc,CAACI,aAAa,EAAEC,sBAAsB,EAAEC,cAAc,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEX,KAAK,EAAE;EAC1GM,aAAa,CAACG,OAAO,CAAC,GAAG;IACrBG,IAAI,EAAET,SAAS,CAACU,IAAI,CAACC,QAAQ;IAC7BC,IAAI,EAAE;MACFH,IAAI,EAAET,SAAS,CAACU,IAAI,CAACG,IAAI;MACzBhB,KAAK,EAAES;IACX,CAAC;IACDT,KAAK,EAAE;MACHY,IAAI,EAAET,SAAS,CAACU,IAAI,CAACI,QAAQ;MAC7BF,IAAI,EAAE;QACFH,IAAI,EAAET,SAAS,CAACU,IAAI,CAACG,IAAI;QACzBhB,KAAK,EAAEU;MACX;IACJ;EACJ,CAAC;EACDH,sBAAsB,CAACG,OAAO,CAAC,GAAG;IAC9BE,IAAI,EAAET,SAAS,CAACU,IAAI,CAACK,mBAAmB;IACxCC,QAAQ,EAAE;MACNP,IAAI,EAAET,SAAS,CAACU,IAAI,CAACI,QAAQ;MAC7BF,IAAI,EAAE;QACFH,IAAI,EAAET,SAAS,CAACU,IAAI,CAACG,IAAI;QACzBhB,KAAK,EAAEU;MACX;IACJ,CAAC;IACDC,IAAI,EAAE,CAAC,CAAC,EAAEN,gBAAgB,CAACe,WAAW,EAAET,IAAI;EAChD,CAAC;EACD,IAAIX,KAAK,KAAKqB,SAAS,EAAE;IACrBb,cAAc,CAACE,OAAO,CAAC,GAAGV,KAAK;IAC/B;EACJ;EACA;EACA;EACA;EACA,IAAIU,OAAO,IAAIF,cAAc,EAAE;IAC3B,OAAOA,cAAc,CAACE,OAAO,CAAC;EAClC;AACJ;AACAX,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvC,SAASD,2BAA2B,CAACqB,qBAAqB,EAAE;EACxD,IAAIC,UAAU,GAAG,CAAC;EAClB,OAAQd,OAAO,IAAK;IAChB,IAAIC,OAAO;IACX,GAAG;MACCA,OAAO,GAAI,KAAI,CAACa,UAAU,EAAE,EAAEC,QAAQ,EAAG,IAAGf,OAAQ,EAAC;IACzD,CAAC,QAAQC,OAAO,IAAIY,qBAAqB;IACzC,OAAOZ,OAAO;EAClB,CAAC;AACL;AACAX,OAAO,CAACE,2BAA2B,GAAGA,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}