{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getResolversFromSchema = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction getResolversFromSchema(schema,\n// Include default merged resolvers\nincludeDefaultMergedResolver) {\n  var _a, _b;\n  const resolvers = Object.create(null);\n  const typeMap = schema.getTypeMap();\n  for (const typeName in typeMap) {\n    if (!typeName.startsWith('__')) {\n      const type = typeMap[typeName];\n      if ((0, graphql_1.isScalarType)(type)) {\n        if (!(0, graphql_1.isSpecifiedScalarType)(type)) {\n          const config = type.toConfig();\n          delete config.astNode; // avoid AST duplication elsewhere\n          resolvers[typeName] = new graphql_1.GraphQLScalarType(config);\n        }\n      } else if ((0, graphql_1.isEnumType)(type)) {\n        resolvers[typeName] = {};\n        const values = type.getValues();\n        for (const value of values) {\n          resolvers[typeName][value.name] = value.value;\n        }\n      } else if ((0, graphql_1.isInterfaceType)(type)) {\n        if (type.resolveType != null) {\n          resolvers[typeName] = {\n            __resolveType: type.resolveType\n          };\n        }\n      } else if ((0, graphql_1.isUnionType)(type)) {\n        if (type.resolveType != null) {\n          resolvers[typeName] = {\n            __resolveType: type.resolveType\n          };\n        }\n      } else if ((0, graphql_1.isObjectType)(type)) {\n        resolvers[typeName] = {};\n        if (type.isTypeOf != null) {\n          resolvers[typeName].__isTypeOf = type.isTypeOf;\n        }\n        const fields = type.getFields();\n        for (const fieldName in fields) {\n          const field = fields[fieldName];\n          if (field.subscribe != null) {\n            resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n            resolvers[typeName][fieldName].subscribe = field.subscribe;\n          }\n          if (field.resolve != null && ((_a = field.resolve) === null || _a === void 0 ? void 0 : _a.name) !== 'defaultFieldResolver') {\n            switch ((_b = field.resolve) === null || _b === void 0 ? void 0 : _b.name) {\n              case 'defaultMergedResolver':\n                if (!includeDefaultMergedResolver) {\n                  continue;\n                }\n                break;\n              case 'defaultFieldResolver':\n                continue;\n            }\n            resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n            resolvers[typeName][fieldName].resolve = field.resolve;\n          }\n        }\n      }\n    }\n  }\n  return resolvers;\n}\nexports.getResolversFromSchema = getResolversFromSchema;","map":{"version":3,"names":["Object","defineProperty","exports","value","getResolversFromSchema","graphql_1","require","schema","includeDefaultMergedResolver","_a","_b","resolvers","create","typeMap","getTypeMap","typeName","startsWith","type","isScalarType","isSpecifiedScalarType","config","toConfig","astNode","GraphQLScalarType","isEnumType","values","getValues","name","isInterfaceType","resolveType","__resolveType","isUnionType","isObjectType","isTypeOf","__isTypeOf","fields","getFields","fieldName","field","subscribe","resolve"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/schema/node_modules/@graphql-tools/utils/cjs/getResolversFromSchema.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getResolversFromSchema = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction getResolversFromSchema(schema, \n// Include default merged resolvers\nincludeDefaultMergedResolver) {\n    var _a, _b;\n    const resolvers = Object.create(null);\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        if (!typeName.startsWith('__')) {\n            const type = typeMap[typeName];\n            if ((0, graphql_1.isScalarType)(type)) {\n                if (!(0, graphql_1.isSpecifiedScalarType)(type)) {\n                    const config = type.toConfig();\n                    delete config.astNode; // avoid AST duplication elsewhere\n                    resolvers[typeName] = new graphql_1.GraphQLScalarType(config);\n                }\n            }\n            else if ((0, graphql_1.isEnumType)(type)) {\n                resolvers[typeName] = {};\n                const values = type.getValues();\n                for (const value of values) {\n                    resolvers[typeName][value.name] = value.value;\n                }\n            }\n            else if ((0, graphql_1.isInterfaceType)(type)) {\n                if (type.resolveType != null) {\n                    resolvers[typeName] = {\n                        __resolveType: type.resolveType,\n                    };\n                }\n            }\n            else if ((0, graphql_1.isUnionType)(type)) {\n                if (type.resolveType != null) {\n                    resolvers[typeName] = {\n                        __resolveType: type.resolveType,\n                    };\n                }\n            }\n            else if ((0, graphql_1.isObjectType)(type)) {\n                resolvers[typeName] = {};\n                if (type.isTypeOf != null) {\n                    resolvers[typeName].__isTypeOf = type.isTypeOf;\n                }\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    if (field.subscribe != null) {\n                        resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n                        resolvers[typeName][fieldName].subscribe = field.subscribe;\n                    }\n                    if (field.resolve != null && ((_a = field.resolve) === null || _a === void 0 ? void 0 : _a.name) !== 'defaultFieldResolver') {\n                        switch ((_b = field.resolve) === null || _b === void 0 ? void 0 : _b.name) {\n                            case 'defaultMergedResolver':\n                                if (!includeDefaultMergedResolver) {\n                                    continue;\n                                }\n                                break;\n                            case 'defaultFieldResolver':\n                                continue;\n                        }\n                        resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n                        resolvers[typeName][fieldName].resolve = field.resolve;\n                    }\n                }\n            }\n        }\n    }\n    return resolvers;\n}\nexports.getResolversFromSchema = getResolversFromSchema;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}