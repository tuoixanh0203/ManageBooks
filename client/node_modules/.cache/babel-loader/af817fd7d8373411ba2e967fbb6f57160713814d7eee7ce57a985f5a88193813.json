{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mockServer = void 0;\nconst graphql_1 = require(\"graphql\");\nconst schema_1 = require(\"@graphql-tools/schema\");\nconst addMocksToSchema_js_1 = require(\"./addMocksToSchema.js\");\n/**\n * A convenience wrapper on top of addMocksToSchema. It adds your mock resolvers\n * to your schema and returns a client that will correctly execute your query with\n * variables. Note: when executing queries from the returned server, context and\n * root will both equal `{}`.\n * @param schema The schema to which to add mocks. This can also be a set of type\n * definitions instead.\n * @param mocks The mocks to add to the schema.\n * @param preserveResolvers Set to `true` to prevent existing resolvers from being\n * overwritten to provide mock data. This can be used to mock some parts of the\n * server and not others.\n */\nfunction mockServer(schema, mocks) {\n  let preserveResolvers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const mockedSchema = (0, addMocksToSchema_js_1.addMocksToSchema)({\n    schema: (0, graphql_1.isSchema)(schema) ? schema : (0, schema_1.makeExecutableSchema)({\n      typeDefs: schema\n    }),\n    mocks,\n    preserveResolvers\n  });\n  return {\n    query: (query, vars) => (0, graphql_1.graphql)({\n      schema: mockedSchema,\n      source: query,\n      rootValue: {},\n      contextValue: {},\n      variableValues: vars\n    })\n  };\n}\nexports.mockServer = mockServer;","map":{"version":3,"names":["Object","defineProperty","exports","value","mockServer","graphql_1","require","schema_1","addMocksToSchema_js_1","schema","mocks","preserveResolvers","mockedSchema","addMocksToSchema","isSchema","makeExecutableSchema","typeDefs","query","vars","graphql","source","rootValue","contextValue","variableValues"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/mock/cjs/mockServer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mockServer = void 0;\nconst graphql_1 = require(\"graphql\");\nconst schema_1 = require(\"@graphql-tools/schema\");\nconst addMocksToSchema_js_1 = require(\"./addMocksToSchema.js\");\n/**\n * A convenience wrapper on top of addMocksToSchema. It adds your mock resolvers\n * to your schema and returns a client that will correctly execute your query with\n * variables. Note: when executing queries from the returned server, context and\n * root will both equal `{}`.\n * @param schema The schema to which to add mocks. This can also be a set of type\n * definitions instead.\n * @param mocks The mocks to add to the schema.\n * @param preserveResolvers Set to `true` to prevent existing resolvers from being\n * overwritten to provide mock data. This can be used to mock some parts of the\n * server and not others.\n */\nfunction mockServer(schema, mocks, preserveResolvers = false) {\n    const mockedSchema = (0, addMocksToSchema_js_1.addMocksToSchema)({\n        schema: (0, graphql_1.isSchema)(schema)\n            ? schema\n            : (0, schema_1.makeExecutableSchema)({\n                typeDefs: schema,\n            }),\n        mocks,\n        preserveResolvers,\n    });\n    return {\n        query: (query, vars) => (0, graphql_1.graphql)({\n            schema: mockedSchema,\n            source: query,\n            rootValue: {},\n            contextValue: {},\n            variableValues: vars,\n        }),\n    };\n}\nexports.mockServer = mockServer;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACjD,MAAME,qBAAqB,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,UAAU,CAACK,MAAM,EAAEC,KAAK,EAA6B;EAAA,IAA3BC,iBAAiB,uEAAG,KAAK;EACxD,MAAMC,YAAY,GAAG,CAAC,CAAC,EAAEJ,qBAAqB,CAACK,gBAAgB,EAAE;IAC7DJ,MAAM,EAAE,CAAC,CAAC,EAAEJ,SAAS,CAACS,QAAQ,EAAEL,MAAM,CAAC,GACjCA,MAAM,GACN,CAAC,CAAC,EAAEF,QAAQ,CAACQ,oBAAoB,EAAE;MACjCC,QAAQ,EAAEP;IACd,CAAC,CAAC;IACNC,KAAK;IACLC;EACJ,CAAC,CAAC;EACF,OAAO;IACHM,KAAK,EAAE,CAACA,KAAK,EAAEC,IAAI,KAAK,CAAC,CAAC,EAAEb,SAAS,CAACc,OAAO,EAAE;MAC3CV,MAAM,EAAEG,YAAY;MACpBQ,MAAM,EAAEH,KAAK;MACbI,SAAS,EAAE,CAAC,CAAC;MACbC,YAAY,EAAE,CAAC,CAAC;MAChBC,cAAc,EAAEL;IACpB,CAAC;EACL,CAAC;AACL;AACAhB,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}