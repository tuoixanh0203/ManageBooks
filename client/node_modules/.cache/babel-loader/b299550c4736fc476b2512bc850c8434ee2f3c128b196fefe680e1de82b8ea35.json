{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDescribable = exports.transformCommentsToDescriptions = exports.parseGraphQLSDL = void 0;\nconst graphql_1 = require(\"graphql\");\nconst comments_js_1 = require(\"./comments.js\");\nfunction parseGraphQLSDL(location, rawSDL) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let document;\n  try {\n    if (options.commentDescriptions && rawSDL.includes('#')) {\n      document = transformCommentsToDescriptions(rawSDL, options);\n      // If noLocation=true, we need to make sure to print and parse it again, to remove locations,\n      // since `transformCommentsToDescriptions` must have locations set in order to transform the comments\n      // into descriptions.\n      if (options.noLocation) {\n        document = (0, graphql_1.parse)((0, graphql_1.print)(document), options);\n      }\n    } else {\n      document = (0, graphql_1.parse)(new graphql_1.Source(rawSDL, location), options);\n    }\n  } catch (e) {\n    if (e.message.includes('EOF') && rawSDL.replace(/(\\#[^*]*)/g, '').trim() === '') {\n      document = {\n        kind: graphql_1.Kind.DOCUMENT,\n        definitions: []\n      };\n    } else {\n      throw e;\n    }\n  }\n  return {\n    location,\n    document\n  };\n}\nexports.parseGraphQLSDL = parseGraphQLSDL;\nfunction transformCommentsToDescriptions(sourceSdl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const parsedDoc = (0, graphql_1.parse)(sourceSdl, {\n    ...options,\n    noLocation: false\n  });\n  const modifiedDoc = (0, graphql_1.visit)(parsedDoc, {\n    leave: node => {\n      if (isDescribable(node)) {\n        const rawValue = (0, comments_js_1.getLeadingCommentBlock)(node);\n        if (rawValue !== undefined) {\n          const commentsBlock = (0, comments_js_1.dedentBlockStringValue)('\\n' + rawValue);\n          const isBlock = commentsBlock.includes('\\n');\n          if (!node.description) {\n            return {\n              ...node,\n              description: {\n                kind: graphql_1.Kind.STRING,\n                value: commentsBlock,\n                block: isBlock\n              }\n            };\n          } else {\n            return {\n              ...node,\n              description: {\n                ...node.description,\n                value: node.description.value + '\\n' + commentsBlock,\n                block: true\n              }\n            };\n          }\n        }\n      }\n    }\n  });\n  return modifiedDoc;\n}\nexports.transformCommentsToDescriptions = transformCommentsToDescriptions;\nfunction isDescribable(node) {\n  return (0, graphql_1.isTypeSystemDefinitionNode)(node) || node.kind === graphql_1.Kind.FIELD_DEFINITION || node.kind === graphql_1.Kind.INPUT_VALUE_DEFINITION || node.kind === graphql_1.Kind.ENUM_VALUE_DEFINITION;\n}\nexports.isDescribable = isDescribable;","map":{"version":3,"names":["Object","defineProperty","exports","value","isDescribable","transformCommentsToDescriptions","parseGraphQLSDL","graphql_1","require","comments_js_1","location","rawSDL","options","document","commentDescriptions","includes","noLocation","parse","print","Source","e","message","replace","trim","kind","Kind","DOCUMENT","definitions","sourceSdl","parsedDoc","modifiedDoc","visit","leave","node","rawValue","getLeadingCommentBlock","undefined","commentsBlock","dedentBlockStringValue","isBlock","description","STRING","block","isTypeSystemDefinitionNode","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","ENUM_VALUE_DEFINITION"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/merge/node_modules/@graphql-tools/utils/cjs/parse-graphql-sdl.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isDescribable = exports.transformCommentsToDescriptions = exports.parseGraphQLSDL = void 0;\nconst graphql_1 = require(\"graphql\");\nconst comments_js_1 = require(\"./comments.js\");\nfunction parseGraphQLSDL(location, rawSDL, options = {}) {\n    let document;\n    try {\n        if (options.commentDescriptions && rawSDL.includes('#')) {\n            document = transformCommentsToDescriptions(rawSDL, options);\n            // If noLocation=true, we need to make sure to print and parse it again, to remove locations,\n            // since `transformCommentsToDescriptions` must have locations set in order to transform the comments\n            // into descriptions.\n            if (options.noLocation) {\n                document = (0, graphql_1.parse)((0, graphql_1.print)(document), options);\n            }\n        }\n        else {\n            document = (0, graphql_1.parse)(new graphql_1.Source(rawSDL, location), options);\n        }\n    }\n    catch (e) {\n        if (e.message.includes('EOF') && rawSDL.replace(/(\\#[^*]*)/g, '').trim() === '') {\n            document = {\n                kind: graphql_1.Kind.DOCUMENT,\n                definitions: [],\n            };\n        }\n        else {\n            throw e;\n        }\n    }\n    return {\n        location,\n        document,\n    };\n}\nexports.parseGraphQLSDL = parseGraphQLSDL;\nfunction transformCommentsToDescriptions(sourceSdl, options = {}) {\n    const parsedDoc = (0, graphql_1.parse)(sourceSdl, {\n        ...options,\n        noLocation: false,\n    });\n    const modifiedDoc = (0, graphql_1.visit)(parsedDoc, {\n        leave: (node) => {\n            if (isDescribable(node)) {\n                const rawValue = (0, comments_js_1.getLeadingCommentBlock)(node);\n                if (rawValue !== undefined) {\n                    const commentsBlock = (0, comments_js_1.dedentBlockStringValue)('\\n' + rawValue);\n                    const isBlock = commentsBlock.includes('\\n');\n                    if (!node.description) {\n                        return {\n                            ...node,\n                            description: {\n                                kind: graphql_1.Kind.STRING,\n                                value: commentsBlock,\n                                block: isBlock,\n                            },\n                        };\n                    }\n                    else {\n                        return {\n                            ...node,\n                            description: {\n                                ...node.description,\n                                value: node.description.value + '\\n' + commentsBlock,\n                                block: true,\n                            },\n                        };\n                    }\n                }\n            }\n        },\n    });\n    return modifiedDoc;\n}\nexports.transformCommentsToDescriptions = transformCommentsToDescriptions;\nfunction isDescribable(node) {\n    return ((0, graphql_1.isTypeSystemDefinitionNode)(node) ||\n        node.kind === graphql_1.Kind.FIELD_DEFINITION ||\n        node.kind === graphql_1.Kind.INPUT_VALUE_DEFINITION ||\n        node.kind === graphql_1.Kind.ENUM_VALUE_DEFINITION);\n}\nexports.isDescribable = isDescribable;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}