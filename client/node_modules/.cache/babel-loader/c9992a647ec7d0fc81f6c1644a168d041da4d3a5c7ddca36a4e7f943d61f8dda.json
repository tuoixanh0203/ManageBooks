{"ast":null,"code":"/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"@apollo/protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n$root.Trace = function () {\n  /**\n   * Properties of a Trace.\n   * @exports ITrace\n   * @interface ITrace\n   * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n   * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n   * @property {number|null} [durationNs] Trace durationNs\n   * @property {Trace.INode|null} [root] Trace root\n   * @property {string|null} [signature] Trace signature\n   * @property {string|null} [unexecutedOperationBody] Trace unexecutedOperationBody\n   * @property {string|null} [unexecutedOperationName] Trace unexecutedOperationName\n   * @property {Trace.IDetails|null} [details] Trace details\n   * @property {string|null} [clientName] Trace clientName\n   * @property {string|null} [clientVersion] Trace clientVersion\n   * @property {Trace.IHTTP|null} [http] Trace http\n   * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n   * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n   * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n   * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n   * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n   * @property {boolean|null} [registeredOperation] Trace registeredOperation\n   * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n   * @property {number|null} [fieldExecutionWeight] Trace fieldExecutionWeight\n   */\n\n  /**\n   * Constructs a new Trace.\n   * @exports Trace\n   * @classdesc Represents a Trace.\n   * @implements ITrace\n   * @constructor\n   * @param {ITrace=} [properties] Properties to set\n   */\n  function Trace(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * Trace startTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} startTime\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.startTime = null;\n\n  /**\n   * Trace endTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} endTime\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.endTime = null;\n\n  /**\n   * Trace durationNs.\n   * @member {number} durationNs\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.durationNs = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * Trace root.\n   * @member {Trace.INode|null|undefined} root\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.root = null;\n\n  /**\n   * Trace signature.\n   * @member {string} signature\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.signature = \"\";\n\n  /**\n   * Trace unexecutedOperationBody.\n   * @member {string} unexecutedOperationBody\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.unexecutedOperationBody = \"\";\n\n  /**\n   * Trace unexecutedOperationName.\n   * @member {string} unexecutedOperationName\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.unexecutedOperationName = \"\";\n\n  /**\n   * Trace details.\n   * @member {Trace.IDetails|null|undefined} details\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.details = null;\n\n  /**\n   * Trace clientName.\n   * @member {string} clientName\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.clientName = \"\";\n\n  /**\n   * Trace clientVersion.\n   * @member {string} clientVersion\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.clientVersion = \"\";\n\n  /**\n   * Trace http.\n   * @member {Trace.IHTTP|null|undefined} http\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.http = null;\n\n  /**\n   * Trace cachePolicy.\n   * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.cachePolicy = null;\n\n  /**\n   * Trace queryPlan.\n   * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.queryPlan = null;\n\n  /**\n   * Trace fullQueryCacheHit.\n   * @member {boolean} fullQueryCacheHit\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.fullQueryCacheHit = false;\n\n  /**\n   * Trace persistedQueryHit.\n   * @member {boolean} persistedQueryHit\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.persistedQueryHit = false;\n\n  /**\n   * Trace persistedQueryRegister.\n   * @member {boolean} persistedQueryRegister\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.persistedQueryRegister = false;\n\n  /**\n   * Trace registeredOperation.\n   * @member {boolean} registeredOperation\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.registeredOperation = false;\n\n  /**\n   * Trace forbiddenOperation.\n   * @member {boolean} forbiddenOperation\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.forbiddenOperation = false;\n\n  /**\n   * Trace fieldExecutionWeight.\n   * @member {number} fieldExecutionWeight\n   * @memberof Trace\n   * @instance\n   */\n  Trace.prototype.fieldExecutionWeight = 0;\n\n  /**\n   * Creates a new Trace instance using the specified properties.\n   * @function create\n   * @memberof Trace\n   * @static\n   * @param {ITrace=} [properties] Properties to set\n   * @returns {Trace} Trace instance\n   */\n  Trace.create = function create(properties) {\n    return new Trace(properties);\n  };\n\n  /**\n   * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n   * @function encode\n   * @memberof Trace\n   * @static\n   * @param {ITrace} message Trace message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Trace.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\")) $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n    if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\")) $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n    if (message.details != null && Object.hasOwnProperty.call(message, \"details\")) $root.Trace.Details.encode(message.details, writer.uint32( /* id 6, wireType 2 =*/50).fork()).ldelim();\n    if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.clientName);\n    if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\")) writer.uint32( /* id 8, wireType 2 =*/66).string(message.clientVersion);\n    if (message.http != null && Object.hasOwnProperty.call(message, \"http\")) $root.Trace.HTTP.encode(message.http, writer.uint32( /* id 10, wireType 2 =*/82).fork()).ldelim();\n    if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\")) writer.uint32( /* id 11, wireType 0 =*/88).uint64(message.durationNs);\n    if (message.root != null && Object.hasOwnProperty.call(message, \"root\")) $root.Trace.Node.encode(message.root, writer.uint32( /* id 14, wireType 2 =*/114).fork()).ldelim();\n    if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\")) $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32( /* id 18, wireType 2 =*/146).fork()).ldelim();\n    if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\")) writer.uint32( /* id 19, wireType 2 =*/154).string(message.signature);\n    if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\")) writer.uint32( /* id 20, wireType 0 =*/160).bool(message.fullQueryCacheHit);\n    if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\")) writer.uint32( /* id 21, wireType 0 =*/168).bool(message.persistedQueryHit);\n    if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\")) writer.uint32( /* id 22, wireType 0 =*/176).bool(message.persistedQueryRegister);\n    if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\")) writer.uint32( /* id 24, wireType 0 =*/192).bool(message.registeredOperation);\n    if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\")) writer.uint32( /* id 25, wireType 0 =*/200).bool(message.forbiddenOperation);\n    if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\")) $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32( /* id 26, wireType 2 =*/210).fork()).ldelim();\n    if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, \"unexecutedOperationBody\")) writer.uint32( /* id 27, wireType 2 =*/218).string(message.unexecutedOperationBody);\n    if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, \"unexecutedOperationName\")) writer.uint32( /* id 28, wireType 2 =*/226).string(message.unexecutedOperationName);\n    if (message.fieldExecutionWeight != null && Object.hasOwnProperty.call(message, \"fieldExecutionWeight\")) writer.uint32( /* id 31, wireType 1 =*/249).double(message.fieldExecutionWeight);\n    return writer;\n  };\n\n  /**\n   * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Trace\n   * @static\n   * @param {ITrace} message Trace message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Trace.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a Trace message from the specified reader or buffer.\n   * @function decode\n   * @memberof Trace\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Trace} Trace\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Trace.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Trace();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 4:\n          message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n        case 11:\n          message.durationNs = reader.uint64();\n          break;\n        case 14:\n          message.root = $root.Trace.Node.decode(reader, reader.uint32());\n          break;\n        case 19:\n          message.signature = reader.string();\n          break;\n        case 27:\n          message.unexecutedOperationBody = reader.string();\n          break;\n        case 28:\n          message.unexecutedOperationName = reader.string();\n          break;\n        case 6:\n          message.details = $root.Trace.Details.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.clientName = reader.string();\n          break;\n        case 8:\n          message.clientVersion = reader.string();\n          break;\n        case 10:\n          message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n          break;\n        case 18:\n          message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n          break;\n        case 26:\n          message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n          break;\n        case 20:\n          message.fullQueryCacheHit = reader.bool();\n          break;\n        case 21:\n          message.persistedQueryHit = reader.bool();\n          break;\n        case 22:\n          message.persistedQueryRegister = reader.bool();\n          break;\n        case 24:\n          message.registeredOperation = reader.bool();\n          break;\n        case 25:\n          message.forbiddenOperation = reader.bool();\n          break;\n        case 31:\n          message.fieldExecutionWeight = reader.double();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a Trace message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Trace\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Trace} Trace\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Trace.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a Trace message.\n   * @function verify\n   * @memberof Trace\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Trace.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n      if (error) return \"startTime.\" + error;\n    }\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n      if (error) return \"endTime.\" + error;\n    }\n    if (message.durationNs != null && message.hasOwnProperty(\"durationNs\")) if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high))) return \"durationNs: integer|Long expected\";\n    if (message.root != null && message.hasOwnProperty(\"root\")) {\n      var error = $root.Trace.Node.verify(message.root);\n      if (error) return \"root.\" + error;\n    }\n    if (message.signature != null && message.hasOwnProperty(\"signature\")) if (!$util.isString(message.signature)) return \"signature: string expected\";\n    if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\")) if (!$util.isString(message.unexecutedOperationBody)) return \"unexecutedOperationBody: string expected\";\n    if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\")) if (!$util.isString(message.unexecutedOperationName)) return \"unexecutedOperationName: string expected\";\n    if (message.details != null && message.hasOwnProperty(\"details\")) {\n      var error = $root.Trace.Details.verify(message.details);\n      if (error) return \"details.\" + error;\n    }\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) if (!$util.isString(message.clientName)) return \"clientName: string expected\";\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) if (!$util.isString(message.clientVersion)) return \"clientVersion: string expected\";\n    if (message.http != null && message.hasOwnProperty(\"http\")) {\n      var error = $root.Trace.HTTP.verify(message.http);\n      if (error) return \"http.\" + error;\n    }\n    if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n      var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n      if (error) return \"cachePolicy.\" + error;\n    }\n    if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n      var error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n      if (error) return \"queryPlan.\" + error;\n    }\n    if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\")) if (typeof message.fullQueryCacheHit !== \"boolean\") return \"fullQueryCacheHit: boolean expected\";\n    if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\")) if (typeof message.persistedQueryHit !== \"boolean\") return \"persistedQueryHit: boolean expected\";\n    if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\")) if (typeof message.persistedQueryRegister !== \"boolean\") return \"persistedQueryRegister: boolean expected\";\n    if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\")) if (typeof message.registeredOperation !== \"boolean\") return \"registeredOperation: boolean expected\";\n    if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\")) if (typeof message.forbiddenOperation !== \"boolean\") return \"forbiddenOperation: boolean expected\";\n    if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\")) if (typeof message.fieldExecutionWeight !== \"number\") return \"fieldExecutionWeight: number expected\";\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a Trace message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Trace\n   * @static\n   * @param {Trace} message Trace\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Trace.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.defaults) {\n      object.endTime = null;\n      object.startTime = null;\n      object.details = null;\n      object.clientName = \"\";\n      object.clientVersion = \"\";\n      object.http = null;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.durationNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.durationNs = options.longs === String ? \"0\" : 0;\n      object.root = null;\n      object.cachePolicy = null;\n      object.signature = \"\";\n      object.fullQueryCacheHit = false;\n      object.persistedQueryHit = false;\n      object.persistedQueryRegister = false;\n      object.registeredOperation = false;\n      object.forbiddenOperation = false;\n      object.queryPlan = null;\n      object.unexecutedOperationBody = \"\";\n      object.unexecutedOperationName = \"\";\n      object.fieldExecutionWeight = 0;\n    }\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n    if (message.startTime != null && message.hasOwnProperty(\"startTime\")) object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n    if (message.details != null && message.hasOwnProperty(\"details\")) object.details = $root.Trace.Details.toObject(message.details, options);\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) object.clientName = message.clientName;\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) object.clientVersion = message.clientVersion;\n    if (message.http != null && message.hasOwnProperty(\"http\")) object.http = $root.Trace.HTTP.toObject(message.http, options);\n    if (message.durationNs != null && message.hasOwnProperty(\"durationNs\")) if (typeof message.durationNs === \"number\") object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;else object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n    if (message.root != null && message.hasOwnProperty(\"root\")) object.root = $root.Trace.Node.toObject(message.root, options);\n    if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n    if (message.signature != null && message.hasOwnProperty(\"signature\")) object.signature = message.signature;\n    if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\")) object.fullQueryCacheHit = message.fullQueryCacheHit;\n    if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\")) object.persistedQueryHit = message.persistedQueryHit;\n    if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\")) object.persistedQueryRegister = message.persistedQueryRegister;\n    if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\")) object.registeredOperation = message.registeredOperation;\n    if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\")) object.forbiddenOperation = message.forbiddenOperation;\n    if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n    if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\")) object.unexecutedOperationBody = message.unexecutedOperationBody;\n    if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\")) object.unexecutedOperationName = message.unexecutedOperationName;\n    if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\")) object.fieldExecutionWeight = options.json && !isFinite(message.fieldExecutionWeight) ? String(message.fieldExecutionWeight) : message.fieldExecutionWeight;\n    return object;\n  };\n\n  /**\n   * Converts this Trace to JSON.\n   * @function toJSON\n   * @memberof Trace\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Trace.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  Trace.CachePolicy = function () {\n    /**\n     * Properties of a CachePolicy.\n     * @memberof Trace\n     * @interface ICachePolicy\n     * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n     * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n     */\n\n    /**\n     * Constructs a new CachePolicy.\n     * @memberof Trace\n     * @classdesc Represents a CachePolicy.\n     * @implements ICachePolicy\n     * @constructor\n     * @param {Trace.ICachePolicy=} [properties] Properties to set\n     */\n    function CachePolicy(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CachePolicy scope.\n     * @member {Trace.CachePolicy.Scope} scope\n     * @memberof Trace.CachePolicy\n     * @instance\n     */\n    CachePolicy.prototype.scope = 0;\n\n    /**\n     * CachePolicy maxAgeNs.\n     * @member {number} maxAgeNs\n     * @memberof Trace.CachePolicy\n     * @instance\n     */\n    CachePolicy.prototype.maxAgeNs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * Creates a new CachePolicy instance using the specified properties.\n     * @function create\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.ICachePolicy=} [properties] Properties to set\n     * @returns {Trace.CachePolicy} CachePolicy instance\n     */\n    CachePolicy.create = function create(properties) {\n      return new CachePolicy(properties);\n    };\n\n    /**\n     * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CachePolicy.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.scope);\n      if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\")) writer.uint32( /* id 2, wireType 0 =*/16).int64(message.maxAgeNs);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CachePolicy message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.CachePolicy} CachePolicy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CachePolicy.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Trace.CachePolicy();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.scope = reader.int32();\n            break;\n          case 2:\n            message.maxAgeNs = reader.int64();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.CachePolicy} CachePolicy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CachePolicy message.\n     * @function verify\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CachePolicy.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.scope != null && message.hasOwnProperty(\"scope\")) switch (message.scope) {\n        default:\n          return \"scope: enum value expected\";\n        case 0:\n        case 1:\n        case 2:\n          break;\n      }\n      if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\")) if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high))) return \"maxAgeNs: integer|Long expected\";\n      return null;\n    };\n\n    /**\n     * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.CachePolicy} message CachePolicy\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CachePolicy.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.maxAgeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.maxAgeNs = options.longs === String ? \"0\" : 0;\n      }\n      if (message.scope != null && message.hasOwnProperty(\"scope\")) object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n      if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\")) if (typeof message.maxAgeNs === \"number\") object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;else object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n      return object;\n    };\n\n    /**\n     * Converts this CachePolicy to JSON.\n     * @function toJSON\n     * @memberof Trace.CachePolicy\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CachePolicy.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Scope enum.\n     * @name Trace.CachePolicy.Scope\n     * @enum {string}\n     * @property {number} UNKNOWN=0 UNKNOWN value\n     * @property {number} PUBLIC=1 PUBLIC value\n     * @property {number} PRIVATE=2 PRIVATE value\n     */\n    CachePolicy.Scope = function () {\n      var valuesById = {},\n        values = Object.create(valuesById);\n      values[valuesById[0] = \"UNKNOWN\"] = 0;\n      values[valuesById[1] = \"PUBLIC\"] = 1;\n      values[valuesById[2] = \"PRIVATE\"] = 2;\n      return values;\n    }();\n    return CachePolicy;\n  }();\n  Trace.Details = function () {\n    /**\n     * Properties of a Details.\n     * @memberof Trace\n     * @interface IDetails\n     * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n     * @property {string|null} [operationName] Details operationName\n     */\n\n    /**\n     * Constructs a new Details.\n     * @memberof Trace\n     * @classdesc Represents a Details.\n     * @implements IDetails\n     * @constructor\n     * @param {Trace.IDetails=} [properties] Properties to set\n     */\n    function Details(properties) {\n      this.variablesJson = {};\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Details variablesJson.\n     * @member {Object.<string,string>} variablesJson\n     * @memberof Trace.Details\n     * @instance\n     */\n    Details.prototype.variablesJson = $util.emptyObject;\n\n    /**\n     * Details operationName.\n     * @member {string} operationName\n     * @memberof Trace.Details\n     * @instance\n     */\n    Details.prototype.operationName = \"\";\n\n    /**\n     * Creates a new Details instance using the specified properties.\n     * @function create\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.IDetails=} [properties] Properties to set\n     * @returns {Trace.Details} Details instance\n     */\n    Details.create = function create(properties) {\n      return new Details(properties);\n    };\n\n    /**\n     * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.IDetails} message Details message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Details.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.operationName);\n      if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\")) for (var keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i) writer.uint32( /* id 4, wireType 2 =*/34).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]).uint32( /* id 2, wireType 2 =*/18).string(message.variablesJson[keys[i]]).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.IDetails} message Details message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Details.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Details message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Details\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Details} Details\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Details.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Trace.Details(),\n        key;\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 4:\n            reader.skip().pos++;\n            if (message.variablesJson === $util.emptyObject) message.variablesJson = {};\n            key = reader.string();\n            reader.pos++;\n            message.variablesJson[key] = reader.string();\n            break;\n          case 3:\n            message.operationName = reader.string();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a Details message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Details\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Details} Details\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Details.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Details message.\n     * @function verify\n     * @memberof Trace.Details\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Details.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n        if (!$util.isObject(message.variablesJson)) return \"variablesJson: object expected\";\n        var key = Object.keys(message.variablesJson);\n        for (var i = 0; i < key.length; ++i) if (!$util.isString(message.variablesJson[key[i]])) return \"variablesJson: string{k:string} expected\";\n      }\n      if (message.operationName != null && message.hasOwnProperty(\"operationName\")) if (!$util.isString(message.operationName)) return \"operationName: string expected\";\n      return null;\n    };\n\n    /**\n     * Creates a plain object from a Details message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.Details} message Details\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Details.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.objects || options.defaults) object.variablesJson = {};\n      if (options.defaults) object.operationName = \"\";\n      if (message.operationName != null && message.hasOwnProperty(\"operationName\")) object.operationName = message.operationName;\n      var keys2;\n      if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n        object.variablesJson = {};\n        for (var j = 0; j < keys2.length; ++j) object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n      }\n      return object;\n    };\n\n    /**\n     * Converts this Details to JSON.\n     * @function toJSON\n     * @memberof Trace.Details\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Details.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return Details;\n  }();\n  Trace.Error = function () {\n    /**\n     * Properties of an Error.\n     * @memberof Trace\n     * @interface IError\n     * @property {string|null} [message] Error message\n     * @property {Array.<Trace.ILocation>|null} [location] Error location\n     * @property {number|null} [timeNs] Error timeNs\n     * @property {string|null} [json] Error json\n     */\n\n    /**\n     * Constructs a new Error.\n     * @memberof Trace\n     * @classdesc Represents an Error.\n     * @implements IError\n     * @constructor\n     * @param {Trace.IError=} [properties] Properties to set\n     */\n    function Error(properties) {\n      this.location = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Error message.\n     * @member {string} message\n     * @memberof Trace.Error\n     * @instance\n     */\n    Error.prototype.message = \"\";\n\n    /**\n     * Error location.\n     * @member {Array.<Trace.ILocation>} location\n     * @memberof Trace.Error\n     * @instance\n     */\n    Error.prototype.location = $util.emptyArray;\n\n    /**\n     * Error timeNs.\n     * @member {number} timeNs\n     * @memberof Trace.Error\n     * @instance\n     */\n    Error.prototype.timeNs = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n    /**\n     * Error json.\n     * @member {string} json\n     * @memberof Trace.Error\n     * @instance\n     */\n    Error.prototype.json = \"\";\n\n    /**\n     * Creates a new Error instance using the specified properties.\n     * @function create\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.IError=} [properties] Properties to set\n     * @returns {Trace.Error} Error instance\n     */\n    Error.create = function create(properties) {\n      return new Error(properties);\n    };\n\n    /**\n     * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Error.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.message != null && Object.hasOwnProperty.call(message, \"message\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.message);\n      if (message.location != null && message.location.length) for (var i = 0; i < message.location.length; ++i) $root.Trace.Location.encode(message.location[i], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n      if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\")) writer.uint32( /* id 3, wireType 0 =*/24).uint64(message.timeNs);\n      if (message.json != null && Object.hasOwnProperty.call(message, \"json\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.json);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Error.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Error message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Error.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Trace.Error();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.message = reader.string();\n            break;\n          case 2:\n            if (!(message.location && message.location.length)) message.location = [];\n            message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n            break;\n          case 3:\n            message.timeNs = reader.uint64();\n            break;\n          case 4:\n            message.json = reader.string();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes an Error message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Error.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Error message.\n     * @function verify\n     * @memberof Trace.Error\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Error.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.message != null && message.hasOwnProperty(\"message\")) if (!$util.isString(message.message)) return \"message: string expected\";\n      if (message.location != null && message.hasOwnProperty(\"location\")) {\n        if (!Array.isArray(message.location)) return \"location: array expected\";\n        for (var i = 0; i < message.location.length; ++i) {\n          var error = $root.Trace.Location.verify(message.location[i]);\n          if (error) return \"location.\" + error;\n        }\n      }\n      if (message.timeNs != null && message.hasOwnProperty(\"timeNs\")) if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high))) return \"timeNs: integer|Long expected\";\n      if (message.json != null && message.hasOwnProperty(\"json\")) if (!$util.isString(message.json)) return \"json: string expected\";\n      return null;\n    };\n\n    /**\n     * Creates a plain object from an Error message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.Error} message Error\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Error.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.location = [];\n      if (options.defaults) {\n        object.message = \"\";\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, true);\n          object.timeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.timeNs = options.longs === String ? \"0\" : 0;\n        object.json = \"\";\n      }\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n      if (message.location && message.location.length) {\n        object.location = [];\n        for (var j = 0; j < message.location.length; ++j) object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n      }\n      if (message.timeNs != null && message.hasOwnProperty(\"timeNs\")) if (typeof message.timeNs === \"number\") object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;else object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n      if (message.json != null && message.hasOwnProperty(\"json\")) object.json = message.json;\n      return object;\n    };\n\n    /**\n     * Converts this Error to JSON.\n     * @function toJSON\n     * @memberof Trace.Error\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Error.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return Error;\n  }();\n  Trace.HTTP = function () {\n    /**\n     * Properties of a HTTP.\n     * @memberof Trace\n     * @interface IHTTP\n     * @property {Trace.HTTP.Method|null} [method] HTTP method\n     * @property {string|null} [host] HTTP host\n     * @property {string|null} [path] HTTP path\n     * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n     * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n     * @property {number|null} [statusCode] HTTP statusCode\n     * @property {boolean|null} [secure] HTTP secure\n     * @property {string|null} [protocol] HTTP protocol\n     */\n\n    /**\n     * Constructs a new HTTP.\n     * @memberof Trace\n     * @classdesc Represents a HTTP.\n     * @implements IHTTP\n     * @constructor\n     * @param {Trace.IHTTP=} [properties] Properties to set\n     */\n    function HTTP(properties) {\n      this.requestHeaders = {};\n      this.responseHeaders = {};\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * HTTP method.\n     * @member {Trace.HTTP.Method} method\n     * @memberof Trace.HTTP\n     * @instance\n     */\n    HTTP.prototype.method = 0;\n\n    /**\n     * HTTP host.\n     * @member {string} host\n     * @memberof Trace.HTTP\n     * @instance\n     */\n    HTTP.prototype.host = \"\";\n\n    /**\n     * HTTP path.\n     * @member {string} path\n     * @memberof Trace.HTTP\n     * @instance\n     */\n    HTTP.prototype.path = \"\";\n\n    /**\n     * HTTP requestHeaders.\n     * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n     * @memberof Trace.HTTP\n     * @instance\n     */\n    HTTP.prototype.requestHeaders = $util.emptyObject;\n\n    /**\n     * HTTP responseHeaders.\n     * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n     * @memberof Trace.HTTP\n     * @instance\n     */\n    HTTP.prototype.responseHeaders = $util.emptyObject;\n\n    /**\n     * HTTP statusCode.\n     * @member {number} statusCode\n     * @memberof Trace.HTTP\n     * @instance\n     */\n    HTTP.prototype.statusCode = 0;\n\n    /**\n     * HTTP secure.\n     * @member {boolean} secure\n     * @memberof Trace.HTTP\n     * @instance\n     */\n    HTTP.prototype.secure = false;\n\n    /**\n     * HTTP protocol.\n     * @member {string} protocol\n     * @memberof Trace.HTTP\n     * @instance\n     */\n    HTTP.prototype.protocol = \"\";\n\n    /**\n     * Creates a new HTTP instance using the specified properties.\n     * @function create\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.IHTTP=} [properties] Properties to set\n     * @returns {Trace.HTTP} HTTP instance\n     */\n    HTTP.create = function create(properties) {\n      return new HTTP(properties);\n    };\n\n    /**\n     * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.IHTTP} message HTTP message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    HTTP.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.method != null && Object.hasOwnProperty.call(message, \"method\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.method);\n      if (message.host != null && Object.hasOwnProperty.call(message, \"host\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.host);\n      if (message.path != null && Object.hasOwnProperty.call(message, \"path\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.path);\n      if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\")) for (var keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n        writer.uint32( /* id 4, wireType 2 =*/34).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n        $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n      }\n      if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\")) for (var keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n        writer.uint32( /* id 5, wireType 2 =*/42).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n        $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n      }\n      if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\")) writer.uint32( /* id 6, wireType 0 =*/48).uint32(message.statusCode);\n      if (message.secure != null && Object.hasOwnProperty.call(message, \"secure\")) writer.uint32( /* id 8, wireType 0 =*/64).bool(message.secure);\n      if (message.protocol != null && Object.hasOwnProperty.call(message, \"protocol\")) writer.uint32( /* id 9, wireType 2 =*/74).string(message.protocol);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.IHTTP} message HTTP message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a HTTP message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.HTTP\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.HTTP} HTTP\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    HTTP.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Trace.HTTP(),\n        key;\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.method = reader.int32();\n            break;\n          case 2:\n            message.host = reader.string();\n            break;\n          case 3:\n            message.path = reader.string();\n            break;\n          case 4:\n            reader.skip().pos++;\n            if (message.requestHeaders === $util.emptyObject) message.requestHeaders = {};\n            key = reader.string();\n            reader.pos++;\n            message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n            break;\n          case 5:\n            reader.skip().pos++;\n            if (message.responseHeaders === $util.emptyObject) message.responseHeaders = {};\n            key = reader.string();\n            reader.pos++;\n            message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n            break;\n          case 6:\n            message.statusCode = reader.uint32();\n            break;\n          case 8:\n            message.secure = reader.bool();\n            break;\n          case 9:\n            message.protocol = reader.string();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a HTTP message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.HTTP\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.HTTP} HTTP\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    HTTP.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a HTTP message.\n     * @function verify\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    HTTP.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.method != null && message.hasOwnProperty(\"method\")) switch (message.method) {\n        default:\n          return \"method: enum value expected\";\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n          break;\n      }\n      if (message.host != null && message.hasOwnProperty(\"host\")) if (!$util.isString(message.host)) return \"host: string expected\";\n      if (message.path != null && message.hasOwnProperty(\"path\")) if (!$util.isString(message.path)) return \"path: string expected\";\n      if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n        if (!$util.isObject(message.requestHeaders)) return \"requestHeaders: object expected\";\n        var key = Object.keys(message.requestHeaders);\n        for (var i = 0; i < key.length; ++i) {\n          var error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n          if (error) return \"requestHeaders.\" + error;\n        }\n      }\n      if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n        if (!$util.isObject(message.responseHeaders)) return \"responseHeaders: object expected\";\n        var key = Object.keys(message.responseHeaders);\n        for (var i = 0; i < key.length; ++i) {\n          var error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n          if (error) return \"responseHeaders.\" + error;\n        }\n      }\n      if (message.statusCode != null && message.hasOwnProperty(\"statusCode\")) if (!$util.isInteger(message.statusCode)) return \"statusCode: integer expected\";\n      if (message.secure != null && message.hasOwnProperty(\"secure\")) if (typeof message.secure !== \"boolean\") return \"secure: boolean expected\";\n      if (message.protocol != null && message.hasOwnProperty(\"protocol\")) if (!$util.isString(message.protocol)) return \"protocol: string expected\";\n      return null;\n    };\n\n    /**\n     * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.HTTP} message HTTP\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    HTTP.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.objects || options.defaults) {\n        object.requestHeaders = {};\n        object.responseHeaders = {};\n      }\n      if (options.defaults) {\n        object.method = options.enums === String ? \"UNKNOWN\" : 0;\n        object.host = \"\";\n        object.path = \"\";\n        object.statusCode = 0;\n        object.secure = false;\n        object.protocol = \"\";\n      }\n      if (message.method != null && message.hasOwnProperty(\"method\")) object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n      if (message.host != null && message.hasOwnProperty(\"host\")) object.host = message.host;\n      if (message.path != null && message.hasOwnProperty(\"path\")) object.path = message.path;\n      var keys2;\n      if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n        object.requestHeaders = {};\n        for (var j = 0; j < keys2.length; ++j) object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n      }\n      if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n        object.responseHeaders = {};\n        for (var j = 0; j < keys2.length; ++j) object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n      }\n      if (message.statusCode != null && message.hasOwnProperty(\"statusCode\")) object.statusCode = message.statusCode;\n      if (message.secure != null && message.hasOwnProperty(\"secure\")) object.secure = message.secure;\n      if (message.protocol != null && message.hasOwnProperty(\"protocol\")) object.protocol = message.protocol;\n      return object;\n    };\n\n    /**\n     * Converts this HTTP to JSON.\n     * @function toJSON\n     * @memberof Trace.HTTP\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    HTTP.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    HTTP.Values = function () {\n      /**\n       * Properties of a Values.\n       * @memberof Trace.HTTP\n       * @interface IValues\n       * @property {Array.<string>|null} [value] Values value\n       */\n\n      /**\n       * Constructs a new Values.\n       * @memberof Trace.HTTP\n       * @classdesc Represents a Values.\n       * @implements IValues\n       * @constructor\n       * @param {Trace.HTTP.IValues=} [properties] Properties to set\n       */\n      function Values(properties) {\n        this.value = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Values value.\n       * @member {Array.<string>} value\n       * @memberof Trace.HTTP.Values\n       * @instance\n       */\n      Values.prototype.value = $util.emptyArray;\n\n      /**\n       * Creates a new Values instance using the specified properties.\n       * @function create\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.IValues=} [properties] Properties to set\n       * @returns {Trace.HTTP.Values} Values instance\n       */\n      Values.create = function create(properties) {\n        return new Values(properties);\n      };\n\n      /**\n       * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Values.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.value != null && message.value.length) for (var i = 0; i < message.value.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).string(message.value[i]);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Values.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Values message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.HTTP.Values} Values\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Values.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.HTTP.Values();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.value && message.value.length)) message.value = [];\n              message.value.push(reader.string());\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Values message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.HTTP.Values} Values\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Values.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Values message.\n       * @function verify\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Values.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\")) {\n          if (!Array.isArray(message.value)) return \"value: array expected\";\n          for (var i = 0; i < message.value.length; ++i) if (!$util.isString(message.value[i])) return \"value: string[] expected\";\n        }\n        return null;\n      };\n\n      /**\n       * Creates a plain object from a Values message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.Values} message Values\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Values.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.value = [];\n        if (message.value && message.value.length) {\n          object.value = [];\n          for (var j = 0; j < message.value.length; ++j) object.value[j] = message.value[j];\n        }\n        return object;\n      };\n\n      /**\n       * Converts this Values to JSON.\n       * @function toJSON\n       * @memberof Trace.HTTP.Values\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Values.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Values;\n    }();\n\n    /**\n     * Method enum.\n     * @name Trace.HTTP.Method\n     * @enum {string}\n     * @property {number} UNKNOWN=0 UNKNOWN value\n     * @property {number} OPTIONS=1 OPTIONS value\n     * @property {number} GET=2 GET value\n     * @property {number} HEAD=3 HEAD value\n     * @property {number} POST=4 POST value\n     * @property {number} PUT=5 PUT value\n     * @property {number} DELETE=6 DELETE value\n     * @property {number} TRACE=7 TRACE value\n     * @property {number} CONNECT=8 CONNECT value\n     * @property {number} PATCH=9 PATCH value\n     */\n    HTTP.Method = function () {\n      var valuesById = {},\n        values = Object.create(valuesById);\n      values[valuesById[0] = \"UNKNOWN\"] = 0;\n      values[valuesById[1] = \"OPTIONS\"] = 1;\n      values[valuesById[2] = \"GET\"] = 2;\n      values[valuesById[3] = \"HEAD\"] = 3;\n      values[valuesById[4] = \"POST\"] = 4;\n      values[valuesById[5] = \"PUT\"] = 5;\n      values[valuesById[6] = \"DELETE\"] = 6;\n      values[valuesById[7] = \"TRACE\"] = 7;\n      values[valuesById[8] = \"CONNECT\"] = 8;\n      values[valuesById[9] = \"PATCH\"] = 9;\n      return values;\n    }();\n    return HTTP;\n  }();\n  Trace.Location = function () {\n    /**\n     * Properties of a Location.\n     * @memberof Trace\n     * @interface ILocation\n     * @property {number|null} [line] Location line\n     * @property {number|null} [column] Location column\n     */\n\n    /**\n     * Constructs a new Location.\n     * @memberof Trace\n     * @classdesc Represents a Location.\n     * @implements ILocation\n     * @constructor\n     * @param {Trace.ILocation=} [properties] Properties to set\n     */\n    function Location(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Location line.\n     * @member {number} line\n     * @memberof Trace.Location\n     * @instance\n     */\n    Location.prototype.line = 0;\n\n    /**\n     * Location column.\n     * @member {number} column\n     * @memberof Trace.Location\n     * @instance\n     */\n    Location.prototype.column = 0;\n\n    /**\n     * Creates a new Location instance using the specified properties.\n     * @function create\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.ILocation=} [properties] Properties to set\n     * @returns {Trace.Location} Location instance\n     */\n    Location.create = function create(properties) {\n      return new Location(properties);\n    };\n\n    /**\n     * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.ILocation} message Location message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Location.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.line != null && Object.hasOwnProperty.call(message, \"line\")) writer.uint32( /* id 1, wireType 0 =*/8).uint32(message.line);\n      if (message.column != null && Object.hasOwnProperty.call(message, \"column\")) writer.uint32( /* id 2, wireType 0 =*/16).uint32(message.column);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.ILocation} message Location message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Location.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Location message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Location\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Location} Location\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Location.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Trace.Location();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.line = reader.uint32();\n            break;\n          case 2:\n            message.column = reader.uint32();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a Location message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Location\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Location} Location\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Location.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Location message.\n     * @function verify\n     * @memberof Trace.Location\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Location.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.line != null && message.hasOwnProperty(\"line\")) if (!$util.isInteger(message.line)) return \"line: integer expected\";\n      if (message.column != null && message.hasOwnProperty(\"column\")) if (!$util.isInteger(message.column)) return \"column: integer expected\";\n      return null;\n    };\n\n    /**\n     * Creates a plain object from a Location message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.Location} message Location\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Location.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.line = 0;\n        object.column = 0;\n      }\n      if (message.line != null && message.hasOwnProperty(\"line\")) object.line = message.line;\n      if (message.column != null && message.hasOwnProperty(\"column\")) object.column = message.column;\n      return object;\n    };\n\n    /**\n     * Converts this Location to JSON.\n     * @function toJSON\n     * @memberof Trace.Location\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Location.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return Location;\n  }();\n  Trace.Node = function () {\n    /**\n     * Properties of a Node.\n     * @memberof Trace\n     * @interface INode\n     * @property {string|null} [responseName] Node responseName\n     * @property {number|null} [index] Node index\n     * @property {string|null} [originalFieldName] Node originalFieldName\n     * @property {string|null} [type] Node type\n     * @property {string|null} [parentType] Node parentType\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n     * @property {number|null} [startTime] Node startTime\n     * @property {number|null} [endTime] Node endTime\n     * @property {Array.<Trace.IError>|null} [error] Node error\n     * @property {Array.<Trace.INode>|null} [child] Node child\n     */\n\n    /**\n     * Constructs a new Node.\n     * @memberof Trace\n     * @classdesc Represents a Node.\n     * @implements INode\n     * @constructor\n     * @param {Trace.INode=} [properties] Properties to set\n     */\n    function Node(properties) {\n      this.error = [];\n      this.child = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Node responseName.\n     * @member {string} responseName\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.responseName = \"\";\n\n    /**\n     * Node index.\n     * @member {number} index\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.index = 0;\n\n    /**\n     * Node originalFieldName.\n     * @member {string} originalFieldName\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.originalFieldName = \"\";\n\n    /**\n     * Node type.\n     * @member {string} type\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.type = \"\";\n\n    /**\n     * Node parentType.\n     * @member {string} parentType\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.parentType = \"\";\n\n    /**\n     * Node cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.cachePolicy = null;\n\n    /**\n     * Node startTime.\n     * @member {number} startTime\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n    /**\n     * Node endTime.\n     * @member {number} endTime\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.endTime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n    /**\n     * Node error.\n     * @member {Array.<Trace.IError>} error\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.error = $util.emptyArray;\n\n    /**\n     * Node child.\n     * @member {Array.<Trace.INode>} child\n     * @memberof Trace.Node\n     * @instance\n     */\n    Node.prototype.child = $util.emptyArray;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * Node id.\n     * @member {\"responseName\"|\"index\"|undefined} id\n     * @memberof Trace.Node\n     * @instance\n     */\n    Object.defineProperty(Node.prototype, \"id\", {\n      get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new Node instance using the specified properties.\n     * @function create\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.INode=} [properties] Properties to set\n     * @returns {Trace.Node} Node instance\n     */\n    Node.create = function create(properties) {\n      return new Node(properties);\n    };\n\n    /**\n     * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.INode} message Node message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Node.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.responseName);\n      if (message.index != null && Object.hasOwnProperty.call(message, \"index\")) writer.uint32( /* id 2, wireType 0 =*/16).uint32(message.index);\n      if (message.type != null && Object.hasOwnProperty.call(message, \"type\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.type);\n      if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\")) $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32( /* id 5, wireType 2 =*/42).fork()).ldelim();\n      if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\")) writer.uint32( /* id 8, wireType 0 =*/64).uint64(message.startTime);\n      if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\")) writer.uint32( /* id 9, wireType 0 =*/72).uint64(message.endTime);\n      if (message.error != null && message.error.length) for (var i = 0; i < message.error.length; ++i) $root.Trace.Error.encode(message.error[i], writer.uint32( /* id 11, wireType 2 =*/90).fork()).ldelim();\n      if (message.child != null && message.child.length) for (var i = 0; i < message.child.length; ++i) $root.Trace.Node.encode(message.child[i], writer.uint32( /* id 12, wireType 2 =*/98).fork()).ldelim();\n      if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\")) writer.uint32( /* id 13, wireType 2 =*/106).string(message.parentType);\n      if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\")) writer.uint32( /* id 14, wireType 2 =*/114).string(message.originalFieldName);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.INode} message Node message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Node.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Node message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Node\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Node} Node\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Node.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Trace.Node();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.responseName = reader.string();\n            break;\n          case 2:\n            message.index = reader.uint32();\n            break;\n          case 14:\n            message.originalFieldName = reader.string();\n            break;\n          case 3:\n            message.type = reader.string();\n            break;\n          case 13:\n            message.parentType = reader.string();\n            break;\n          case 5:\n            message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n            break;\n          case 8:\n            message.startTime = reader.uint64();\n            break;\n          case 9:\n            message.endTime = reader.uint64();\n            break;\n          case 11:\n            if (!(message.error && message.error.length)) message.error = [];\n            message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n            break;\n          case 12:\n            if (!(message.child && message.child.length)) message.child = [];\n            message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a Node message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Node\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Node} Node\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Node.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Node message.\n     * @function verify\n     * @memberof Trace.Node\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Node.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n      if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n        properties.id = 1;\n        if (!$util.isString(message.responseName)) return \"responseName: string expected\";\n      }\n      if (message.index != null && message.hasOwnProperty(\"index\")) {\n        if (properties.id === 1) return \"id: multiple values\";\n        properties.id = 1;\n        if (!$util.isInteger(message.index)) return \"index: integer expected\";\n      }\n      if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\")) if (!$util.isString(message.originalFieldName)) return \"originalFieldName: string expected\";\n      if (message.type != null && message.hasOwnProperty(\"type\")) if (!$util.isString(message.type)) return \"type: string expected\";\n      if (message.parentType != null && message.hasOwnProperty(\"parentType\")) if (!$util.isString(message.parentType)) return \"parentType: string expected\";\n      if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n        var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n        if (error) return \"cachePolicy.\" + error;\n      }\n      if (message.startTime != null && message.hasOwnProperty(\"startTime\")) if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high))) return \"startTime: integer|Long expected\";\n      if (message.endTime != null && message.hasOwnProperty(\"endTime\")) if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high))) return \"endTime: integer|Long expected\";\n      if (message.error != null && message.hasOwnProperty(\"error\")) {\n        if (!Array.isArray(message.error)) return \"error: array expected\";\n        for (var i = 0; i < message.error.length; ++i) {\n          var error = $root.Trace.Error.verify(message.error[i]);\n          if (error) return \"error.\" + error;\n        }\n      }\n      if (message.child != null && message.hasOwnProperty(\"child\")) {\n        if (!Array.isArray(message.child)) return \"child: array expected\";\n        for (var i = 0; i < message.child.length; ++i) {\n          var error = $root.Trace.Node.verify(message.child[i]);\n          if (error) return \"child.\" + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a plain object from a Node message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.Node} message Node\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Node.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.error = [];\n        object.child = [];\n      }\n      if (options.defaults) {\n        object.type = \"\";\n        object.cachePolicy = null;\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, true);\n          object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.startTime = options.longs === String ? \"0\" : 0;\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, true);\n          object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.endTime = options.longs === String ? \"0\" : 0;\n        object.parentType = \"\";\n        object.originalFieldName = \"\";\n      }\n      if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n        object.responseName = message.responseName;\n        if (options.oneofs) object.id = \"responseName\";\n      }\n      if (message.index != null && message.hasOwnProperty(\"index\")) {\n        object.index = message.index;\n        if (options.oneofs) object.id = \"index\";\n      }\n      if (message.type != null && message.hasOwnProperty(\"type\")) object.type = message.type;\n      if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n      if (message.startTime != null && message.hasOwnProperty(\"startTime\")) if (typeof message.startTime === \"number\") object.startTime = options.longs === String ? String(message.startTime) : message.startTime;else object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n      if (message.endTime != null && message.hasOwnProperty(\"endTime\")) if (typeof message.endTime === \"number\") object.endTime = options.longs === String ? String(message.endTime) : message.endTime;else object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n      if (message.error && message.error.length) {\n        object.error = [];\n        for (var j = 0; j < message.error.length; ++j) object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n      }\n      if (message.child && message.child.length) {\n        object.child = [];\n        for (var j = 0; j < message.child.length; ++j) object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n      }\n      if (message.parentType != null && message.hasOwnProperty(\"parentType\")) object.parentType = message.parentType;\n      if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\")) object.originalFieldName = message.originalFieldName;\n      return object;\n    };\n\n    /**\n     * Converts this Node to JSON.\n     * @function toJSON\n     * @memberof Trace.Node\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Node.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return Node;\n  }();\n  Trace.QueryPlanNode = function () {\n    /**\n     * Properties of a QueryPlanNode.\n     * @memberof Trace\n     * @interface IQueryPlanNode\n     * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n     * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n     * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n     * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n     */\n\n    /**\n     * Constructs a new QueryPlanNode.\n     * @memberof Trace\n     * @classdesc Represents a QueryPlanNode.\n     * @implements IQueryPlanNode\n     * @constructor\n     * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n     */\n    function QueryPlanNode(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * QueryPlanNode sequence.\n     * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n    QueryPlanNode.prototype.sequence = null;\n\n    /**\n     * QueryPlanNode parallel.\n     * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n    QueryPlanNode.prototype.parallel = null;\n\n    /**\n     * QueryPlanNode fetch.\n     * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n    QueryPlanNode.prototype.fetch = null;\n\n    /**\n     * QueryPlanNode flatten.\n     * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n    QueryPlanNode.prototype.flatten = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * QueryPlanNode node.\n     * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|undefined} node\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n    Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n      get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new QueryPlanNode instance using the specified properties.\n     * @function create\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n     * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n     */\n    QueryPlanNode.create = function create(properties) {\n      return new QueryPlanNode(properties);\n    };\n\n    /**\n     * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryPlanNode.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\")) $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n      if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\")) $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n      if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\")) $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n      if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\")) $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a QueryPlanNode message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.QueryPlanNode} QueryPlanNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryPlanNode.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Trace.QueryPlanNode();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n            break;\n          case 2:\n            message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n            break;\n          case 3:\n            message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n            break;\n          case 4:\n            message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.QueryPlanNode} QueryPlanNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a QueryPlanNode message.\n     * @function verify\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    QueryPlanNode.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n      if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n          if (error) return \"sequence.\" + error;\n        }\n      }\n      if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n        if (properties.node === 1) return \"node: multiple values\";\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n          if (error) return \"parallel.\" + error;\n        }\n      }\n      if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n        if (properties.node === 1) return \"node: multiple values\";\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n          if (error) return \"fetch.\" + error;\n        }\n      }\n      if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n        if (properties.node === 1) return \"node: multiple values\";\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n          if (error) return \"flatten.\" + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.QueryPlanNode} message QueryPlanNode\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    QueryPlanNode.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n        object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n        if (options.oneofs) object.node = \"sequence\";\n      }\n      if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n        object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n        if (options.oneofs) object.node = \"parallel\";\n      }\n      if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n        object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n        if (options.oneofs) object.node = \"fetch\";\n      }\n      if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n        object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n        if (options.oneofs) object.node = \"flatten\";\n      }\n      return object;\n    };\n\n    /**\n     * Converts this QueryPlanNode to JSON.\n     * @function toJSON\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    QueryPlanNode.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    QueryPlanNode.SequenceNode = function () {\n      /**\n       * Properties of a SequenceNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface ISequenceNode\n       * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n       */\n\n      /**\n       * Constructs a new SequenceNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a SequenceNode.\n       * @implements ISequenceNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n       */\n      function SequenceNode(properties) {\n        this.nodes = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * SequenceNode nodes.\n       * @member {Array.<Trace.IQueryPlanNode>} nodes\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @instance\n       */\n      SequenceNode.prototype.nodes = $util.emptyArray;\n\n      /**\n       * Creates a new SequenceNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n       */\n      SequenceNode.create = function create(properties) {\n        return new SequenceNode(properties);\n      };\n\n      /**\n       * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SequenceNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.nodes != null && message.nodes.length) for (var i = 0; i < message.nodes.length; ++i) $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a SequenceNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SequenceNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.QueryPlanNode.SequenceNode();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.nodes && message.nodes.length)) message.nodes = [];\n              message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a SequenceNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      SequenceNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n          if (!Array.isArray(message.nodes)) return \"nodes: array expected\";\n          for (var i = 0; i < message.nodes.length; ++i) {\n            var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n            if (error) return \"nodes.\" + error;\n          }\n        }\n        return null;\n      };\n\n      /**\n       * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      SequenceNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.nodes = [];\n        if (message.nodes && message.nodes.length) {\n          object.nodes = [];\n          for (var j = 0; j < message.nodes.length; ++j) object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n        }\n        return object;\n      };\n\n      /**\n       * Converts this SequenceNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      SequenceNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return SequenceNode;\n    }();\n    QueryPlanNode.ParallelNode = function () {\n      /**\n       * Properties of a ParallelNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface IParallelNode\n       * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n       */\n\n      /**\n       * Constructs a new ParallelNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a ParallelNode.\n       * @implements IParallelNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n       */\n      function ParallelNode(properties) {\n        this.nodes = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * ParallelNode nodes.\n       * @member {Array.<Trace.IQueryPlanNode>} nodes\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @instance\n       */\n      ParallelNode.prototype.nodes = $util.emptyArray;\n\n      /**\n       * Creates a new ParallelNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n       */\n      ParallelNode.create = function create(properties) {\n        return new ParallelNode(properties);\n      };\n\n      /**\n       * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ParallelNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.nodes != null && message.nodes.length) for (var i = 0; i < message.nodes.length; ++i) $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a ParallelNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ParallelNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.QueryPlanNode.ParallelNode();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.nodes && message.nodes.length)) message.nodes = [];\n              message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a ParallelNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      ParallelNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n          if (!Array.isArray(message.nodes)) return \"nodes: array expected\";\n          for (var i = 0; i < message.nodes.length; ++i) {\n            var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n            if (error) return \"nodes.\" + error;\n          }\n        }\n        return null;\n      };\n\n      /**\n       * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      ParallelNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.nodes = [];\n        if (message.nodes && message.nodes.length) {\n          object.nodes = [];\n          for (var j = 0; j < message.nodes.length; ++j) object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n        }\n        return object;\n      };\n\n      /**\n       * Converts this ParallelNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      ParallelNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return ParallelNode;\n    }();\n    QueryPlanNode.FetchNode = function () {\n      /**\n       * Properties of a FetchNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface IFetchNode\n       * @property {string|null} [serviceName] FetchNode serviceName\n       * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n       * @property {ITrace|null} [trace] FetchNode trace\n       * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n       * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n       * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n       */\n\n      /**\n       * Constructs a new FetchNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a FetchNode.\n       * @implements IFetchNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n       */\n      function FetchNode(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * FetchNode serviceName.\n       * @member {string} serviceName\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n      FetchNode.prototype.serviceName = \"\";\n\n      /**\n       * FetchNode traceParsingFailed.\n       * @member {boolean} traceParsingFailed\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n      FetchNode.prototype.traceParsingFailed = false;\n\n      /**\n       * FetchNode trace.\n       * @member {ITrace|null|undefined} trace\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n      FetchNode.prototype.trace = null;\n\n      /**\n       * FetchNode sentTimeOffset.\n       * @member {number} sentTimeOffset\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n      FetchNode.prototype.sentTimeOffset = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n      /**\n       * FetchNode sentTime.\n       * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n      FetchNode.prototype.sentTime = null;\n\n      /**\n       * FetchNode receivedTime.\n       * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n      FetchNode.prototype.receivedTime = null;\n\n      /**\n       * Creates a new FetchNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n       */\n      FetchNode.create = function create(properties) {\n        return new FetchNode(properties);\n      };\n\n      /**\n       * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      FetchNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.serviceName);\n        if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\")) writer.uint32( /* id 2, wireType 0 =*/16).bool(message.traceParsingFailed);\n        if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\")) $root.Trace.encode(message.trace, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\")) writer.uint32( /* id 4, wireType 0 =*/32).uint64(message.sentTimeOffset);\n        if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\")) $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32( /* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\")) $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32( /* id 6, wireType 2 =*/50).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a FetchNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      FetchNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.QueryPlanNode.FetchNode();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.serviceName = reader.string();\n              break;\n            case 2:\n              message.traceParsingFailed = reader.bool();\n              break;\n            case 3:\n              message.trace = $root.Trace.decode(reader, reader.uint32());\n              break;\n            case 4:\n              message.sentTimeOffset = reader.uint64();\n              break;\n            case 5:\n              message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n              break;\n            case 6:\n              message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      FetchNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a FetchNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      FetchNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.serviceName != null && message.hasOwnProperty(\"serviceName\")) if (!$util.isString(message.serviceName)) return \"serviceName: string expected\";\n        if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\")) if (typeof message.traceParsingFailed !== \"boolean\") return \"traceParsingFailed: boolean expected\";\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n          var error = $root.Trace.verify(message.trace);\n          if (error) return \"trace.\" + error;\n        }\n        if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\")) if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high))) return \"sentTimeOffset: integer|Long expected\";\n        if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n          var error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n          if (error) return \"sentTime.\" + error;\n        }\n        if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n          var error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n          if (error) return \"receivedTime.\" + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      FetchNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.serviceName = \"\";\n          object.traceParsingFailed = false;\n          object.trace = null;\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.sentTimeOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.sentTimeOffset = options.longs === String ? \"0\" : 0;\n          object.sentTime = null;\n          object.receivedTime = null;\n        }\n        if (message.serviceName != null && message.hasOwnProperty(\"serviceName\")) object.serviceName = message.serviceName;\n        if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\")) object.traceParsingFailed = message.traceParsingFailed;\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) object.trace = $root.Trace.toObject(message.trace, options);\n        if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\")) if (typeof message.sentTimeOffset === \"number\") object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;else object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n        if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n        if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n        return object;\n      };\n\n      /**\n       * Converts this FetchNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      FetchNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return FetchNode;\n    }();\n    QueryPlanNode.FlattenNode = function () {\n      /**\n       * Properties of a FlattenNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface IFlattenNode\n       * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n       * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n       */\n\n      /**\n       * Constructs a new FlattenNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a FlattenNode.\n       * @implements IFlattenNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n       */\n      function FlattenNode(properties) {\n        this.responsePath = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * FlattenNode responsePath.\n       * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @instance\n       */\n      FlattenNode.prototype.responsePath = $util.emptyArray;\n\n      /**\n       * FlattenNode node.\n       * @member {Trace.IQueryPlanNode|null|undefined} node\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @instance\n       */\n      FlattenNode.prototype.node = null;\n\n      /**\n       * Creates a new FlattenNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n       */\n      FlattenNode.create = function create(properties) {\n        return new FlattenNode(properties);\n      };\n\n      /**\n       * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      FlattenNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.responsePath != null && message.responsePath.length) for (var i = 0; i < message.responsePath.length; ++i) $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.node != null && Object.hasOwnProperty.call(message, \"node\")) $root.Trace.QueryPlanNode.encode(message.node, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a FlattenNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      FlattenNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.QueryPlanNode.FlattenNode();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.responsePath && message.responsePath.length)) message.responsePath = [];\n              message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n              break;\n            case 2:\n              message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a FlattenNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      FlattenNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n          if (!Array.isArray(message.responsePath)) return \"responsePath: array expected\";\n          for (var i = 0; i < message.responsePath.length; ++i) {\n            var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n            if (error) return \"responsePath.\" + error;\n          }\n        }\n        if (message.node != null && message.hasOwnProperty(\"node\")) {\n          var error = $root.Trace.QueryPlanNode.verify(message.node);\n          if (error) return \"node.\" + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      FlattenNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.responsePath = [];\n        if (options.defaults) object.node = null;\n        if (message.responsePath && message.responsePath.length) {\n          object.responsePath = [];\n          for (var j = 0; j < message.responsePath.length; ++j) object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n        }\n        if (message.node != null && message.hasOwnProperty(\"node\")) object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n        return object;\n      };\n\n      /**\n       * Converts this FlattenNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      FlattenNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return FlattenNode;\n    }();\n    QueryPlanNode.ResponsePathElement = function () {\n      /**\n       * Properties of a ResponsePathElement.\n       * @memberof Trace.QueryPlanNode\n       * @interface IResponsePathElement\n       * @property {string|null} [fieldName] ResponsePathElement fieldName\n       * @property {number|null} [index] ResponsePathElement index\n       */\n\n      /**\n       * Constructs a new ResponsePathElement.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a ResponsePathElement.\n       * @implements IResponsePathElement\n       * @constructor\n       * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n       */\n      function ResponsePathElement(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * ResponsePathElement fieldName.\n       * @member {string} fieldName\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       */\n      ResponsePathElement.prototype.fieldName = \"\";\n\n      /**\n       * ResponsePathElement index.\n       * @member {number} index\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       */\n      ResponsePathElement.prototype.index = 0;\n\n      // OneOf field names bound to virtual getters and setters\n      var $oneOfFields;\n\n      /**\n       * ResponsePathElement id.\n       * @member {\"fieldName\"|\"index\"|undefined} id\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       */\n      Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n        get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n\n      /**\n       * Creates a new ResponsePathElement instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n       */\n      ResponsePathElement.create = function create(properties) {\n        return new ResponsePathElement(properties);\n      };\n\n      /**\n       * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ResponsePathElement.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.fieldName);\n        if (message.index != null && Object.hasOwnProperty.call(message, \"index\")) writer.uint32( /* id 2, wireType 0 =*/16).uint32(message.index);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a ResponsePathElement message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ResponsePathElement.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.fieldName = reader.string();\n              break;\n            case 2:\n              message.index = reader.uint32();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a ResponsePathElement message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      ResponsePathElement.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        var properties = {};\n        if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n          properties.id = 1;\n          if (!$util.isString(message.fieldName)) return \"fieldName: string expected\";\n        }\n        if (message.index != null && message.hasOwnProperty(\"index\")) {\n          if (properties.id === 1) return \"id: multiple values\";\n          properties.id = 1;\n          if (!$util.isInteger(message.index)) return \"index: integer expected\";\n        }\n        return null;\n      };\n\n      /**\n       * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      ResponsePathElement.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n          object.fieldName = message.fieldName;\n          if (options.oneofs) object.id = \"fieldName\";\n        }\n        if (message.index != null && message.hasOwnProperty(\"index\")) {\n          object.index = message.index;\n          if (options.oneofs) object.id = \"index\";\n        }\n        return object;\n      };\n\n      /**\n       * Converts this ResponsePathElement to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      ResponsePathElement.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return ResponsePathElement;\n    }();\n    return QueryPlanNode;\n  }();\n  return Trace;\n}();\n$root.ReportHeader = function () {\n  /**\n   * Properties of a ReportHeader.\n   * @exports IReportHeader\n   * @interface IReportHeader\n   * @property {string|null} [graphRef] ReportHeader graphRef\n   * @property {string|null} [hostname] ReportHeader hostname\n   * @property {string|null} [agentVersion] ReportHeader agentVersion\n   * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n   * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n   * @property {string|null} [uname] ReportHeader uname\n   * @property {string|null} [executableSchemaId] ReportHeader executableSchemaId\n   */\n\n  /**\n   * Constructs a new ReportHeader.\n   * @exports ReportHeader\n   * @classdesc Represents a ReportHeader.\n   * @implements IReportHeader\n   * @constructor\n   * @param {IReportHeader=} [properties] Properties to set\n   */\n  function ReportHeader(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * ReportHeader graphRef.\n   * @member {string} graphRef\n   * @memberof ReportHeader\n   * @instance\n   */\n  ReportHeader.prototype.graphRef = \"\";\n\n  /**\n   * ReportHeader hostname.\n   * @member {string} hostname\n   * @memberof ReportHeader\n   * @instance\n   */\n  ReportHeader.prototype.hostname = \"\";\n\n  /**\n   * ReportHeader agentVersion.\n   * @member {string} agentVersion\n   * @memberof ReportHeader\n   * @instance\n   */\n  ReportHeader.prototype.agentVersion = \"\";\n\n  /**\n   * ReportHeader serviceVersion.\n   * @member {string} serviceVersion\n   * @memberof ReportHeader\n   * @instance\n   */\n  ReportHeader.prototype.serviceVersion = \"\";\n\n  /**\n   * ReportHeader runtimeVersion.\n   * @member {string} runtimeVersion\n   * @memberof ReportHeader\n   * @instance\n   */\n  ReportHeader.prototype.runtimeVersion = \"\";\n\n  /**\n   * ReportHeader uname.\n   * @member {string} uname\n   * @memberof ReportHeader\n   * @instance\n   */\n  ReportHeader.prototype.uname = \"\";\n\n  /**\n   * ReportHeader executableSchemaId.\n   * @member {string} executableSchemaId\n   * @memberof ReportHeader\n   * @instance\n   */\n  ReportHeader.prototype.executableSchemaId = \"\";\n\n  /**\n   * Creates a new ReportHeader instance using the specified properties.\n   * @function create\n   * @memberof ReportHeader\n   * @static\n   * @param {IReportHeader=} [properties] Properties to set\n   * @returns {ReportHeader} ReportHeader instance\n   */\n  ReportHeader.create = function create(properties) {\n    return new ReportHeader(properties);\n  };\n\n  /**\n   * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n   * @function encode\n   * @memberof ReportHeader\n   * @static\n   * @param {IReportHeader} message ReportHeader message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ReportHeader.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.hostname);\n    if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.agentVersion);\n    if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.serviceVersion);\n    if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\")) writer.uint32( /* id 8, wireType 2 =*/66).string(message.runtimeVersion);\n    if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\")) writer.uint32( /* id 9, wireType 2 =*/74).string(message.uname);\n    if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, \"executableSchemaId\")) writer.uint32( /* id 11, wireType 2 =*/90).string(message.executableSchemaId);\n    if (message.graphRef != null && Object.hasOwnProperty.call(message, \"graphRef\")) writer.uint32( /* id 12, wireType 2 =*/98).string(message.graphRef);\n    return writer;\n  };\n\n  /**\n   * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ReportHeader\n   * @static\n   * @param {IReportHeader} message ReportHeader message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a ReportHeader message from the specified reader or buffer.\n   * @function decode\n   * @memberof ReportHeader\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ReportHeader} ReportHeader\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ReportHeader.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.ReportHeader();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 12:\n          message.graphRef = reader.string();\n          break;\n        case 5:\n          message.hostname = reader.string();\n          break;\n        case 6:\n          message.agentVersion = reader.string();\n          break;\n        case 7:\n          message.serviceVersion = reader.string();\n          break;\n        case 8:\n          message.runtimeVersion = reader.string();\n          break;\n        case 9:\n          message.uname = reader.string();\n          break;\n        case 11:\n          message.executableSchemaId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ReportHeader\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ReportHeader} ReportHeader\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a ReportHeader message.\n   * @function verify\n   * @memberof ReportHeader\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  ReportHeader.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.graphRef != null && message.hasOwnProperty(\"graphRef\")) if (!$util.isString(message.graphRef)) return \"graphRef: string expected\";\n    if (message.hostname != null && message.hasOwnProperty(\"hostname\")) if (!$util.isString(message.hostname)) return \"hostname: string expected\";\n    if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\")) if (!$util.isString(message.agentVersion)) return \"agentVersion: string expected\";\n    if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\")) if (!$util.isString(message.serviceVersion)) return \"serviceVersion: string expected\";\n    if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\")) if (!$util.isString(message.runtimeVersion)) return \"runtimeVersion: string expected\";\n    if (message.uname != null && message.hasOwnProperty(\"uname\")) if (!$util.isString(message.uname)) return \"uname: string expected\";\n    if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\")) if (!$util.isString(message.executableSchemaId)) return \"executableSchemaId: string expected\";\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ReportHeader\n   * @static\n   * @param {ReportHeader} message ReportHeader\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  ReportHeader.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.defaults) {\n      object.hostname = \"\";\n      object.agentVersion = \"\";\n      object.serviceVersion = \"\";\n      object.runtimeVersion = \"\";\n      object.uname = \"\";\n      object.executableSchemaId = \"\";\n      object.graphRef = \"\";\n    }\n    if (message.hostname != null && message.hasOwnProperty(\"hostname\")) object.hostname = message.hostname;\n    if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\")) object.agentVersion = message.agentVersion;\n    if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\")) object.serviceVersion = message.serviceVersion;\n    if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\")) object.runtimeVersion = message.runtimeVersion;\n    if (message.uname != null && message.hasOwnProperty(\"uname\")) object.uname = message.uname;\n    if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\")) object.executableSchemaId = message.executableSchemaId;\n    if (message.graphRef != null && message.hasOwnProperty(\"graphRef\")) object.graphRef = message.graphRef;\n    return object;\n  };\n\n  /**\n   * Converts this ReportHeader to JSON.\n   * @function toJSON\n   * @memberof ReportHeader\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  ReportHeader.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return ReportHeader;\n}();\n$root.PathErrorStats = function () {\n  /**\n   * Properties of a PathErrorStats.\n   * @exports IPathErrorStats\n   * @interface IPathErrorStats\n   * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n   * @property {number|null} [errorsCount] PathErrorStats errorsCount\n   * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n   */\n\n  /**\n   * Constructs a new PathErrorStats.\n   * @exports PathErrorStats\n   * @classdesc Represents a PathErrorStats.\n   * @implements IPathErrorStats\n   * @constructor\n   * @param {IPathErrorStats=} [properties] Properties to set\n   */\n  function PathErrorStats(properties) {\n    this.children = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * PathErrorStats children.\n   * @member {Object.<string,IPathErrorStats>} children\n   * @memberof PathErrorStats\n   * @instance\n   */\n  PathErrorStats.prototype.children = $util.emptyObject;\n\n  /**\n   * PathErrorStats errorsCount.\n   * @member {number} errorsCount\n   * @memberof PathErrorStats\n   * @instance\n   */\n  PathErrorStats.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * PathErrorStats requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof PathErrorStats\n   * @instance\n   */\n  PathErrorStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * Creates a new PathErrorStats instance using the specified properties.\n   * @function create\n   * @memberof PathErrorStats\n   * @static\n   * @param {IPathErrorStats=} [properties] Properties to set\n   * @returns {PathErrorStats} PathErrorStats instance\n   */\n  PathErrorStats.create = function create(properties) {\n    return new PathErrorStats(properties);\n  };\n\n  /**\n   * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n   * @function encode\n   * @memberof PathErrorStats\n   * @static\n   * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PathErrorStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.children != null && Object.hasOwnProperty.call(message, \"children\")) for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n      writer.uint32( /* id 1, wireType 2 =*/10).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n      $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n    }\n    if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\")) writer.uint32( /* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32( /* id 5, wireType 0 =*/40).uint64(message.requestsWithErrorsCount);\n    return writer;\n  };\n\n  /**\n   * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PathErrorStats\n   * @static\n   * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a PathErrorStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof PathErrorStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PathErrorStats} PathErrorStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PathErrorStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.PathErrorStats(),\n      key;\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          reader.skip().pos++;\n          if (message.children === $util.emptyObject) message.children = {};\n          key = reader.string();\n          reader.pos++;\n          message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.errorsCount = reader.uint64();\n          break;\n        case 5:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PathErrorStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PathErrorStats} PathErrorStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a PathErrorStats message.\n   * @function verify\n   * @memberof PathErrorStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  PathErrorStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.children != null && message.hasOwnProperty(\"children\")) {\n      if (!$util.isObject(message.children)) return \"children: object expected\";\n      var key = Object.keys(message.children);\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.PathErrorStats.verify(message.children[key[i]]);\n        if (error) return \"children.\" + error;\n      }\n    }\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high))) return \"errorsCount: integer|Long expected\";\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PathErrorStats\n   * @static\n   * @param {PathErrorStats} message PathErrorStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PathErrorStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.children = {};\n    if (options.defaults) {\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.errorsCount = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n    }\n    var keys2;\n    if (message.children && (keys2 = Object.keys(message.children)).length) {\n      object.children = {};\n      for (var j = 0; j < keys2.length; ++j) object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n    }\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (typeof message.errorsCount === \"number\") object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;else object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n    return object;\n  };\n\n  /**\n   * Converts this PathErrorStats to JSON.\n   * @function toJSON\n   * @memberof PathErrorStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PathErrorStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return PathErrorStats;\n}();\n$root.QueryLatencyStats = function () {\n  /**\n   * Properties of a QueryLatencyStats.\n   * @exports IQueryLatencyStats\n   * @interface IQueryLatencyStats\n   * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n   * @property {number|null} [requestCount] QueryLatencyStats requestCount\n   * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n   * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n   * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n   * @property {$protobuf.ToArray.<number>|Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n   * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n   * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n   * @property {$protobuf.ToArray.<number>|Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n   * @property {$protobuf.ToArray.<number>|Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n   * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n   * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n   * @property {number|null} [requestsWithoutFieldInstrumentation] QueryLatencyStats requestsWithoutFieldInstrumentation\n   */\n\n  /**\n   * Constructs a new QueryLatencyStats.\n   * @exports QueryLatencyStats\n   * @classdesc Represents a QueryLatencyStats.\n   * @implements IQueryLatencyStats\n   * @constructor\n   * @param {IQueryLatencyStats=} [properties] Properties to set\n   */\n  function QueryLatencyStats(properties) {\n    this.latencyCount = [];\n    this.cacheLatencyCount = [];\n    this.publicCacheTtlCount = [];\n    this.privateCacheTtlCount = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * QueryLatencyStats latencyCount.\n   * @member {Array.<number>} latencyCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n\n  /**\n   * QueryLatencyStats requestCount.\n   * @member {number} requestCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.requestCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * QueryLatencyStats cacheHits.\n   * @member {number} cacheHits\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.cacheHits = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * QueryLatencyStats persistedQueryHits.\n   * @member {number} persistedQueryHits\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.persistedQueryHits = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * QueryLatencyStats persistedQueryMisses.\n   * @member {number} persistedQueryMisses\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.persistedQueryMisses = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * QueryLatencyStats cacheLatencyCount.\n   * @member {Array.<number>} cacheLatencyCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n\n  /**\n   * QueryLatencyStats rootErrorStats.\n   * @member {IPathErrorStats|null|undefined} rootErrorStats\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.rootErrorStats = null;\n\n  /**\n   * QueryLatencyStats requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * QueryLatencyStats publicCacheTtlCount.\n   * @member {Array.<number>} publicCacheTtlCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n\n  /**\n   * QueryLatencyStats privateCacheTtlCount.\n   * @member {Array.<number>} privateCacheTtlCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n\n  /**\n   * QueryLatencyStats registeredOperationCount.\n   * @member {number} registeredOperationCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.registeredOperationCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * QueryLatencyStats forbiddenOperationCount.\n   * @member {number} forbiddenOperationCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.forbiddenOperationCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * QueryLatencyStats requestsWithoutFieldInstrumentation.\n   * @member {number} requestsWithoutFieldInstrumentation\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n  QueryLatencyStats.prototype.requestsWithoutFieldInstrumentation = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * Creates a new QueryLatencyStats instance using the specified properties.\n   * @function create\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {IQueryLatencyStats=} [properties] Properties to set\n   * @returns {QueryLatencyStats} QueryLatencyStats instance\n   */\n  QueryLatencyStats.create = function create(properties) {\n    return new QueryLatencyStats(properties);\n  };\n\n  /**\n   * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n   * @function encode\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  QueryLatencyStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\")) writer.uint32( /* id 2, wireType 0 =*/16).uint64(message.requestCount);\n    if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\")) writer.uint32( /* id 3, wireType 0 =*/24).uint64(message.cacheHits);\n    if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\")) writer.uint32( /* id 4, wireType 0 =*/32).uint64(message.persistedQueryHits);\n    if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\")) writer.uint32( /* id 5, wireType 0 =*/40).uint64(message.persistedQueryMisses);\n    if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\")) $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32( /* id 7, wireType 2 =*/58).fork()).ldelim();\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32( /* id 8, wireType 0 =*/64).uint64(message.requestsWithErrorsCount);\n    if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\")) writer.uint32( /* id 11, wireType 0 =*/88).uint64(message.registeredOperationCount);\n    if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\")) writer.uint32( /* id 12, wireType 0 =*/96).uint64(message.forbiddenOperationCount);\n    var array13;\n    if (message.latencyCount != null && message.latencyCount.toArray) array13 = message.latencyCount.toArray();else array13 = message.latencyCount;\n    if (array13 != null && array13.length) {\n      writer.uint32( /* id 13, wireType 2 =*/106).fork();\n      for (var i = 0; i < array13.length; ++i) writer.sint64(array13[i]);\n      writer.ldelim();\n    }\n    var array14;\n    if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray) array14 = message.cacheLatencyCount.toArray();else array14 = message.cacheLatencyCount;\n    if (array14 != null && array14.length) {\n      writer.uint32( /* id 14, wireType 2 =*/114).fork();\n      for (var i = 0; i < array14.length; ++i) writer.sint64(array14[i]);\n      writer.ldelim();\n    }\n    var array15;\n    if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray) array15 = message.publicCacheTtlCount.toArray();else array15 = message.publicCacheTtlCount;\n    if (array15 != null && array15.length) {\n      writer.uint32( /* id 15, wireType 2 =*/122).fork();\n      for (var i = 0; i < array15.length; ++i) writer.sint64(array15[i]);\n      writer.ldelim();\n    }\n    var array16;\n    if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray) array16 = message.privateCacheTtlCount.toArray();else array16 = message.privateCacheTtlCount;\n    if (array16 != null && array16.length) {\n      writer.uint32( /* id 16, wireType 2 =*/130).fork();\n      for (var i = 0; i < array16.length; ++i) writer.sint64(array16[i]);\n      writer.ldelim();\n    }\n    if (message.requestsWithoutFieldInstrumentation != null && Object.hasOwnProperty.call(message, \"requestsWithoutFieldInstrumentation\")) writer.uint32( /* id 17, wireType 0 =*/136).uint64(message.requestsWithoutFieldInstrumentation);\n    return writer;\n  };\n\n  /**\n   * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a QueryLatencyStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {QueryLatencyStats} QueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  QueryLatencyStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.QueryLatencyStats();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 13:\n          if (!(message.latencyCount && message.latencyCount.length)) message.latencyCount = [];\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) message.latencyCount.push(reader.sint64());\n          } else message.latencyCount.push(reader.sint64());\n          break;\n        case 2:\n          message.requestCount = reader.uint64();\n          break;\n        case 3:\n          message.cacheHits = reader.uint64();\n          break;\n        case 4:\n          message.persistedQueryHits = reader.uint64();\n          break;\n        case 5:\n          message.persistedQueryMisses = reader.uint64();\n          break;\n        case 14:\n          if (!(message.cacheLatencyCount && message.cacheLatencyCount.length)) message.cacheLatencyCount = [];\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) message.cacheLatencyCount.push(reader.sint64());\n          } else message.cacheLatencyCount.push(reader.sint64());\n          break;\n        case 7:\n          message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n          break;\n        case 8:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n        case 15:\n          if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length)) message.publicCacheTtlCount = [];\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) message.publicCacheTtlCount.push(reader.sint64());\n          } else message.publicCacheTtlCount.push(reader.sint64());\n          break;\n        case 16:\n          if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length)) message.privateCacheTtlCount = [];\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) message.privateCacheTtlCount.push(reader.sint64());\n          } else message.privateCacheTtlCount.push(reader.sint64());\n          break;\n        case 11:\n          message.registeredOperationCount = reader.uint64();\n          break;\n        case 12:\n          message.forbiddenOperationCount = reader.uint64();\n          break;\n        case 17:\n          message.requestsWithoutFieldInstrumentation = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {QueryLatencyStats} QueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a QueryLatencyStats message.\n   * @function verify\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  QueryLatencyStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n      var array13;\n      if (message.latencyCount != null && message.latencyCount.toArray) array13 = message.latencyCount.toArray();else array13 = message.latencyCount;\n      if (!Array.isArray(array13)) return \"latencyCount: array expected\";\n      for (var i = 0; i < array13.length; ++i) if (!$util.isInteger(array13[i]) && !(array13[i] && $util.isInteger(array13[i].low) && $util.isInteger(array13[i].high))) return \"latencyCount: integer|Long[] expected\";\n    }\n    if (message.requestCount != null && message.hasOwnProperty(\"requestCount\")) if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high))) return \"requestCount: integer|Long expected\";\n    if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\")) if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high))) return \"cacheHits: integer|Long expected\";\n    if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\")) if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high))) return \"persistedQueryHits: integer|Long expected\";\n    if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\")) if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high))) return \"persistedQueryMisses: integer|Long expected\";\n    if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n      var array14;\n      if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray) array14 = message.cacheLatencyCount.toArray();else array14 = message.cacheLatencyCount;\n      if (!Array.isArray(array14)) return \"cacheLatencyCount: array expected\";\n      for (var i = 0; i < array14.length; ++i) if (!$util.isInteger(array14[i]) && !(array14[i] && $util.isInteger(array14[i].low) && $util.isInteger(array14[i].high))) return \"cacheLatencyCount: integer|Long[] expected\";\n    }\n    if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n      var error = $root.PathErrorStats.verify(message.rootErrorStats);\n      if (error) return \"rootErrorStats.\" + error;\n    }\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n    if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n      var array15;\n      if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray) array15 = message.publicCacheTtlCount.toArray();else array15 = message.publicCacheTtlCount;\n      if (!Array.isArray(array15)) return \"publicCacheTtlCount: array expected\";\n      for (var i = 0; i < array15.length; ++i) if (!$util.isInteger(array15[i]) && !(array15[i] && $util.isInteger(array15[i].low) && $util.isInteger(array15[i].high))) return \"publicCacheTtlCount: integer|Long[] expected\";\n    }\n    if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n      var array16;\n      if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray) array16 = message.privateCacheTtlCount.toArray();else array16 = message.privateCacheTtlCount;\n      if (!Array.isArray(array16)) return \"privateCacheTtlCount: array expected\";\n      for (var i = 0; i < array16.length; ++i) if (!$util.isInteger(array16[i]) && !(array16[i] && $util.isInteger(array16[i].low) && $util.isInteger(array16[i].high))) return \"privateCacheTtlCount: integer|Long[] expected\";\n    }\n    if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\")) if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high))) return \"registeredOperationCount: integer|Long expected\";\n    if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\")) if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high))) return \"forbiddenOperationCount: integer|Long expected\";\n    if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\")) if (!$util.isInteger(message.requestsWithoutFieldInstrumentation) && !(message.requestsWithoutFieldInstrumentation && $util.isInteger(message.requestsWithoutFieldInstrumentation.low) && $util.isInteger(message.requestsWithoutFieldInstrumentation.high))) return \"requestsWithoutFieldInstrumentation: integer|Long expected\";\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {QueryLatencyStats} message QueryLatencyStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  QueryLatencyStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) {\n      object.latencyCount = [];\n      object.cacheLatencyCount = [];\n      object.publicCacheTtlCount = [];\n      object.privateCacheTtlCount = [];\n    }\n    if (options.defaults) {\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestCount = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.cacheHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.cacheHits = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.persistedQueryHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.persistedQueryHits = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.persistedQueryMisses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.persistedQueryMisses = options.longs === String ? \"0\" : 0;\n      object.rootErrorStats = null;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.registeredOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.registeredOperationCount = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.forbiddenOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.forbiddenOperationCount = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithoutFieldInstrumentation = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithoutFieldInstrumentation = options.longs === String ? \"0\" : 0;\n    }\n    if (message.requestCount != null && message.hasOwnProperty(\"requestCount\")) if (typeof message.requestCount === \"number\") object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;else object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n    if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\")) if (typeof message.cacheHits === \"number\") object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;else object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n    if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\")) if (typeof message.persistedQueryHits === \"number\") object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;else object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n    if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\")) if (typeof message.persistedQueryMisses === \"number\") object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;else object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n    if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n    if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\")) if (typeof message.registeredOperationCount === \"number\") object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;else object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n    if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\")) if (typeof message.forbiddenOperationCount === \"number\") object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;else object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n    if (message.latencyCount && message.latencyCount.length) {\n      object.latencyCount = [];\n      for (var j = 0; j < message.latencyCount.length; ++j) if (typeof message.latencyCount[j] === \"number\") object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];else object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n    }\n    if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n      object.cacheLatencyCount = [];\n      for (var j = 0; j < message.cacheLatencyCount.length; ++j) if (typeof message.cacheLatencyCount[j] === \"number\") object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];else object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n    }\n    if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n      object.publicCacheTtlCount = [];\n      for (var j = 0; j < message.publicCacheTtlCount.length; ++j) if (typeof message.publicCacheTtlCount[j] === \"number\") object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];else object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n    }\n    if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n      object.privateCacheTtlCount = [];\n      for (var j = 0; j < message.privateCacheTtlCount.length; ++j) if (typeof message.privateCacheTtlCount[j] === \"number\") object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];else object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n    }\n    if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\")) if (typeof message.requestsWithoutFieldInstrumentation === \"number\") object.requestsWithoutFieldInstrumentation = options.longs === String ? String(message.requestsWithoutFieldInstrumentation) : message.requestsWithoutFieldInstrumentation;else object.requestsWithoutFieldInstrumentation = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithoutFieldInstrumentation) : options.longs === Number ? new $util.LongBits(message.requestsWithoutFieldInstrumentation.low >>> 0, message.requestsWithoutFieldInstrumentation.high >>> 0).toNumber(true) : message.requestsWithoutFieldInstrumentation;\n    return object;\n  };\n\n  /**\n   * Converts this QueryLatencyStats to JSON.\n   * @function toJSON\n   * @memberof QueryLatencyStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  QueryLatencyStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return QueryLatencyStats;\n}();\n$root.StatsContext = function () {\n  /**\n   * Properties of a StatsContext.\n   * @exports IStatsContext\n   * @interface IStatsContext\n   * @property {string|null} [clientName] StatsContext clientName\n   * @property {string|null} [clientVersion] StatsContext clientVersion\n   */\n\n  /**\n   * Constructs a new StatsContext.\n   * @exports StatsContext\n   * @classdesc Represents a StatsContext.\n   * @implements IStatsContext\n   * @constructor\n   * @param {IStatsContext=} [properties] Properties to set\n   */\n  function StatsContext(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * StatsContext clientName.\n   * @member {string} clientName\n   * @memberof StatsContext\n   * @instance\n   */\n  StatsContext.prototype.clientName = \"\";\n\n  /**\n   * StatsContext clientVersion.\n   * @member {string} clientVersion\n   * @memberof StatsContext\n   * @instance\n   */\n  StatsContext.prototype.clientVersion = \"\";\n\n  /**\n   * Creates a new StatsContext instance using the specified properties.\n   * @function create\n   * @memberof StatsContext\n   * @static\n   * @param {IStatsContext=} [properties] Properties to set\n   * @returns {StatsContext} StatsContext instance\n   */\n  StatsContext.create = function create(properties) {\n    return new StatsContext(properties);\n  };\n\n  /**\n   * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n   * @function encode\n   * @memberof StatsContext\n   * @static\n   * @param {IStatsContext} message StatsContext message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  StatsContext.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.clientName);\n    if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.clientVersion);\n    return writer;\n  };\n\n  /**\n   * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof StatsContext\n   * @static\n   * @param {IStatsContext} message StatsContext message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a StatsContext message from the specified reader or buffer.\n   * @function decode\n   * @memberof StatsContext\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {StatsContext} StatsContext\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  StatsContext.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.StatsContext();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 2:\n          message.clientName = reader.string();\n          break;\n        case 3:\n          message.clientVersion = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof StatsContext\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {StatsContext} StatsContext\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  StatsContext.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a StatsContext message.\n   * @function verify\n   * @memberof StatsContext\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  StatsContext.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) if (!$util.isString(message.clientName)) return \"clientName: string expected\";\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) if (!$util.isString(message.clientVersion)) return \"clientVersion: string expected\";\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof StatsContext\n   * @static\n   * @param {StatsContext} message StatsContext\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  StatsContext.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.defaults) {\n      object.clientName = \"\";\n      object.clientVersion = \"\";\n    }\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) object.clientName = message.clientName;\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) object.clientVersion = message.clientVersion;\n    return object;\n  };\n\n  /**\n   * Converts this StatsContext to JSON.\n   * @function toJSON\n   * @memberof StatsContext\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  StatsContext.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return StatsContext;\n}();\n$root.ContextualizedQueryLatencyStats = function () {\n  /**\n   * Properties of a ContextualizedQueryLatencyStats.\n   * @exports IContextualizedQueryLatencyStats\n   * @interface IContextualizedQueryLatencyStats\n   * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n   * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n   */\n\n  /**\n   * Constructs a new ContextualizedQueryLatencyStats.\n   * @exports ContextualizedQueryLatencyStats\n   * @classdesc Represents a ContextualizedQueryLatencyStats.\n   * @implements IContextualizedQueryLatencyStats\n   * @constructor\n   * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n   */\n  function ContextualizedQueryLatencyStats(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * ContextualizedQueryLatencyStats queryLatencyStats.\n   * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n   * @memberof ContextualizedQueryLatencyStats\n   * @instance\n   */\n  ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n\n  /**\n   * ContextualizedQueryLatencyStats context.\n   * @member {IStatsContext|null|undefined} context\n   * @memberof ContextualizedQueryLatencyStats\n   * @instance\n   */\n  ContextualizedQueryLatencyStats.prototype.context = null;\n\n  /**\n   * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n   * @function create\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n   */\n  ContextualizedQueryLatencyStats.create = function create(properties) {\n    return new ContextualizedQueryLatencyStats(properties);\n  };\n\n  /**\n   * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n   * @function encode\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\")) $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n    if (message.context != null && Object.hasOwnProperty.call(message, \"context\")) $root.StatsContext.encode(message.context, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n    return writer;\n  };\n\n  /**\n   * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.ContextualizedQueryLatencyStats();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.context = $root.StatsContext.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a ContextualizedQueryLatencyStats message.\n   * @function verify\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  ContextualizedQueryLatencyStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n      var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n      if (error) return \"queryLatencyStats.\" + error;\n    }\n    if (message.context != null && message.hasOwnProperty(\"context\")) {\n      var error = $root.StatsContext.verify(message.context);\n      if (error) return \"context.\" + error;\n    }\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.defaults) {\n      object.queryLatencyStats = null;\n      object.context = null;\n    }\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n    if (message.context != null && message.hasOwnProperty(\"context\")) object.context = $root.StatsContext.toObject(message.context, options);\n    return object;\n  };\n\n  /**\n   * Converts this ContextualizedQueryLatencyStats to JSON.\n   * @function toJSON\n   * @memberof ContextualizedQueryLatencyStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return ContextualizedQueryLatencyStats;\n}();\n$root.ContextualizedTypeStats = function () {\n  /**\n   * Properties of a ContextualizedTypeStats.\n   * @exports IContextualizedTypeStats\n   * @interface IContextualizedTypeStats\n   * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n   * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n   */\n\n  /**\n   * Constructs a new ContextualizedTypeStats.\n   * @exports ContextualizedTypeStats\n   * @classdesc Represents a ContextualizedTypeStats.\n   * @implements IContextualizedTypeStats\n   * @constructor\n   * @param {IContextualizedTypeStats=} [properties] Properties to set\n   */\n  function ContextualizedTypeStats(properties) {\n    this.perTypeStat = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * ContextualizedTypeStats context.\n   * @member {IStatsContext|null|undefined} context\n   * @memberof ContextualizedTypeStats\n   * @instance\n   */\n  ContextualizedTypeStats.prototype.context = null;\n\n  /**\n   * ContextualizedTypeStats perTypeStat.\n   * @member {Object.<string,ITypeStat>} perTypeStat\n   * @memberof ContextualizedTypeStats\n   * @instance\n   */\n  ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n\n  /**\n   * Creates a new ContextualizedTypeStats instance using the specified properties.\n   * @function create\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {IContextualizedTypeStats=} [properties] Properties to set\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n   */\n  ContextualizedTypeStats.create = function create(properties) {\n    return new ContextualizedTypeStats(properties);\n  };\n\n  /**\n   * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n   * @function encode\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ContextualizedTypeStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.context != null && Object.hasOwnProperty.call(message, \"context\")) $root.StatsContext.encode(message.context, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n    if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\")) for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n      writer.uint32( /* id 2, wireType 2 =*/18).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n      $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n\n  /**\n   * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ContextualizedTypeStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.ContextualizedTypeStats(),\n      key;\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.context = $root.StatsContext.decode(reader, reader.uint32());\n          break;\n        case 2:\n          reader.skip().pos++;\n          if (message.perTypeStat === $util.emptyObject) message.perTypeStat = {};\n          key = reader.string();\n          reader.pos++;\n          message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a ContextualizedTypeStats message.\n   * @function verify\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  ContextualizedTypeStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.context != null && message.hasOwnProperty(\"context\")) {\n      var error = $root.StatsContext.verify(message.context);\n      if (error) return \"context.\" + error;\n    }\n    if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n      if (!$util.isObject(message.perTypeStat)) return \"perTypeStat: object expected\";\n      var key = Object.keys(message.perTypeStat);\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n        if (error) return \"perTypeStat.\" + error;\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  ContextualizedTypeStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.perTypeStat = {};\n    if (options.defaults) object.context = null;\n    if (message.context != null && message.hasOwnProperty(\"context\")) object.context = $root.StatsContext.toObject(message.context, options);\n    var keys2;\n    if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n      object.perTypeStat = {};\n      for (var j = 0; j < keys2.length; ++j) object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n    }\n    return object;\n  };\n\n  /**\n   * Converts this ContextualizedTypeStats to JSON.\n   * @function toJSON\n   * @memberof ContextualizedTypeStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return ContextualizedTypeStats;\n}();\n$root.FieldStat = function () {\n  /**\n   * Properties of a FieldStat.\n   * @exports IFieldStat\n   * @interface IFieldStat\n   * @property {string|null} [returnType] FieldStat returnType\n   * @property {number|null} [errorsCount] FieldStat errorsCount\n   * @property {number|null} [observedExecutionCount] FieldStat observedExecutionCount\n   * @property {number|null} [estimatedExecutionCount] FieldStat estimatedExecutionCount\n   * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n   * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] FieldStat latencyCount\n   */\n\n  /**\n   * Constructs a new FieldStat.\n   * @exports FieldStat\n   * @classdesc Represents a FieldStat.\n   * @implements IFieldStat\n   * @constructor\n   * @param {IFieldStat=} [properties] Properties to set\n   */\n  function FieldStat(properties) {\n    this.latencyCount = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * FieldStat returnType.\n   * @member {string} returnType\n   * @memberof FieldStat\n   * @instance\n   */\n  FieldStat.prototype.returnType = \"\";\n\n  /**\n   * FieldStat errorsCount.\n   * @member {number} errorsCount\n   * @memberof FieldStat\n   * @instance\n   */\n  FieldStat.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * FieldStat observedExecutionCount.\n   * @member {number} observedExecutionCount\n   * @memberof FieldStat\n   * @instance\n   */\n  FieldStat.prototype.observedExecutionCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * FieldStat estimatedExecutionCount.\n   * @member {number} estimatedExecutionCount\n   * @memberof FieldStat\n   * @instance\n   */\n  FieldStat.prototype.estimatedExecutionCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * FieldStat requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof FieldStat\n   * @instance\n   */\n  FieldStat.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * FieldStat latencyCount.\n   * @member {Array.<number>} latencyCount\n   * @memberof FieldStat\n   * @instance\n   */\n  FieldStat.prototype.latencyCount = $util.emptyArray;\n\n  /**\n   * Creates a new FieldStat instance using the specified properties.\n   * @function create\n   * @memberof FieldStat\n   * @static\n   * @param {IFieldStat=} [properties] Properties to set\n   * @returns {FieldStat} FieldStat instance\n   */\n  FieldStat.create = function create(properties) {\n    return new FieldStat(properties);\n  };\n\n  /**\n   * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n   * @function encode\n   * @memberof FieldStat\n   * @static\n   * @param {IFieldStat} message FieldStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  FieldStat.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.returnType);\n    if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\")) writer.uint32( /* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n    if (message.observedExecutionCount != null && Object.hasOwnProperty.call(message, \"observedExecutionCount\")) writer.uint32( /* id 5, wireType 0 =*/40).uint64(message.observedExecutionCount);\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32( /* id 6, wireType 0 =*/48).uint64(message.requestsWithErrorsCount);\n    var array9;\n    if (message.latencyCount != null && message.latencyCount.toArray) array9 = message.latencyCount.toArray();else array9 = message.latencyCount;\n    if (array9 != null && array9.length) {\n      writer.uint32( /* id 9, wireType 2 =*/74).fork();\n      for (var i = 0; i < array9.length; ++i) writer.sint64(array9[i]);\n      writer.ldelim();\n    }\n    if (message.estimatedExecutionCount != null && Object.hasOwnProperty.call(message, \"estimatedExecutionCount\")) writer.uint32( /* id 10, wireType 0 =*/80).uint64(message.estimatedExecutionCount);\n    return writer;\n  };\n\n  /**\n   * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof FieldStat\n   * @static\n   * @param {IFieldStat} message FieldStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a FieldStat message from the specified reader or buffer.\n   * @function decode\n   * @memberof FieldStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {FieldStat} FieldStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  FieldStat.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.FieldStat();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 3:\n          message.returnType = reader.string();\n          break;\n        case 4:\n          message.errorsCount = reader.uint64();\n          break;\n        case 5:\n          message.observedExecutionCount = reader.uint64();\n          break;\n        case 10:\n          message.estimatedExecutionCount = reader.uint64();\n          break;\n        case 6:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n        case 9:\n          if (!(message.latencyCount && message.latencyCount.length)) message.latencyCount = [];\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) message.latencyCount.push(reader.sint64());\n          } else message.latencyCount.push(reader.sint64());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof FieldStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {FieldStat} FieldStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  FieldStat.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a FieldStat message.\n   * @function verify\n   * @memberof FieldStat\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  FieldStat.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) if (!$util.isString(message.returnType)) return \"returnType: string expected\";\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high))) return \"errorsCount: integer|Long expected\";\n    if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\")) if (!$util.isInteger(message.observedExecutionCount) && !(message.observedExecutionCount && $util.isInteger(message.observedExecutionCount.low) && $util.isInteger(message.observedExecutionCount.high))) return \"observedExecutionCount: integer|Long expected\";\n    if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\")) if (!$util.isInteger(message.estimatedExecutionCount) && !(message.estimatedExecutionCount && $util.isInteger(message.estimatedExecutionCount.low) && $util.isInteger(message.estimatedExecutionCount.high))) return \"estimatedExecutionCount: integer|Long expected\";\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n    if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n      var array9;\n      if (message.latencyCount != null && message.latencyCount.toArray) array9 = message.latencyCount.toArray();else array9 = message.latencyCount;\n      if (!Array.isArray(array9)) return \"latencyCount: array expected\";\n      for (var i = 0; i < array9.length; ++i) if (!$util.isInteger(array9[i]) && !(array9[i] && $util.isInteger(array9[i].low) && $util.isInteger(array9[i].high))) return \"latencyCount: integer|Long[] expected\";\n    }\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof FieldStat\n   * @static\n   * @param {FieldStat} message FieldStat\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  FieldStat.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.latencyCount = [];\n    if (options.defaults) {\n      object.returnType = \"\";\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.errorsCount = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.observedExecutionCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.observedExecutionCount = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.estimatedExecutionCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.estimatedExecutionCount = options.longs === String ? \"0\" : 0;\n    }\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) object.returnType = message.returnType;\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (typeof message.errorsCount === \"number\") object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;else object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n    if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\")) if (typeof message.observedExecutionCount === \"number\") object.observedExecutionCount = options.longs === String ? String(message.observedExecutionCount) : message.observedExecutionCount;else object.observedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.observedExecutionCount) : options.longs === Number ? new $util.LongBits(message.observedExecutionCount.low >>> 0, message.observedExecutionCount.high >>> 0).toNumber(true) : message.observedExecutionCount;\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n    if (message.latencyCount && message.latencyCount.length) {\n      object.latencyCount = [];\n      for (var j = 0; j < message.latencyCount.length; ++j) if (typeof message.latencyCount[j] === \"number\") object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];else object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n    }\n    if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\")) if (typeof message.estimatedExecutionCount === \"number\") object.estimatedExecutionCount = options.longs === String ? String(message.estimatedExecutionCount) : message.estimatedExecutionCount;else object.estimatedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.estimatedExecutionCount) : options.longs === Number ? new $util.LongBits(message.estimatedExecutionCount.low >>> 0, message.estimatedExecutionCount.high >>> 0).toNumber(true) : message.estimatedExecutionCount;\n    return object;\n  };\n\n  /**\n   * Converts this FieldStat to JSON.\n   * @function toJSON\n   * @memberof FieldStat\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  FieldStat.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return FieldStat;\n}();\n$root.TypeStat = function () {\n  /**\n   * Properties of a TypeStat.\n   * @exports ITypeStat\n   * @interface ITypeStat\n   * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n   */\n\n  /**\n   * Constructs a new TypeStat.\n   * @exports TypeStat\n   * @classdesc Represents a TypeStat.\n   * @implements ITypeStat\n   * @constructor\n   * @param {ITypeStat=} [properties] Properties to set\n   */\n  function TypeStat(properties) {\n    this.perFieldStat = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * TypeStat perFieldStat.\n   * @member {Object.<string,IFieldStat>} perFieldStat\n   * @memberof TypeStat\n   * @instance\n   */\n  TypeStat.prototype.perFieldStat = $util.emptyObject;\n\n  /**\n   * Creates a new TypeStat instance using the specified properties.\n   * @function create\n   * @memberof TypeStat\n   * @static\n   * @param {ITypeStat=} [properties] Properties to set\n   * @returns {TypeStat} TypeStat instance\n   */\n  TypeStat.create = function create(properties) {\n    return new TypeStat(properties);\n  };\n\n  /**\n   * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n   * @function encode\n   * @memberof TypeStat\n   * @static\n   * @param {ITypeStat} message TypeStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  TypeStat.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\")) for (var keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n      writer.uint32( /* id 3, wireType 2 =*/26).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n      $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n\n  /**\n   * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof TypeStat\n   * @static\n   * @param {ITypeStat} message TypeStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a TypeStat message from the specified reader or buffer.\n   * @function decode\n   * @memberof TypeStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {TypeStat} TypeStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  TypeStat.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.TypeStat(),\n      key;\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 3:\n          reader.skip().pos++;\n          if (message.perFieldStat === $util.emptyObject) message.perFieldStat = {};\n          key = reader.string();\n          reader.pos++;\n          message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof TypeStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {TypeStat} TypeStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  TypeStat.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a TypeStat message.\n   * @function verify\n   * @memberof TypeStat\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  TypeStat.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n      if (!$util.isObject(message.perFieldStat)) return \"perFieldStat: object expected\";\n      var key = Object.keys(message.perFieldStat);\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n        if (error) return \"perFieldStat.\" + error;\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof TypeStat\n   * @static\n   * @param {TypeStat} message TypeStat\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  TypeStat.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.perFieldStat = {};\n    var keys2;\n    if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n      object.perFieldStat = {};\n      for (var j = 0; j < keys2.length; ++j) object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n    }\n    return object;\n  };\n\n  /**\n   * Converts this TypeStat to JSON.\n   * @function toJSON\n   * @memberof TypeStat\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  TypeStat.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return TypeStat;\n}();\n$root.ReferencedFieldsForType = function () {\n  /**\n   * Properties of a ReferencedFieldsForType.\n   * @exports IReferencedFieldsForType\n   * @interface IReferencedFieldsForType\n   * @property {Array.<string>|null} [fieldNames] ReferencedFieldsForType fieldNames\n   * @property {boolean|null} [isInterface] ReferencedFieldsForType isInterface\n   */\n\n  /**\n   * Constructs a new ReferencedFieldsForType.\n   * @exports ReferencedFieldsForType\n   * @classdesc Represents a ReferencedFieldsForType.\n   * @implements IReferencedFieldsForType\n   * @constructor\n   * @param {IReferencedFieldsForType=} [properties] Properties to set\n   */\n  function ReferencedFieldsForType(properties) {\n    this.fieldNames = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * ReferencedFieldsForType fieldNames.\n   * @member {Array.<string>} fieldNames\n   * @memberof ReferencedFieldsForType\n   * @instance\n   */\n  ReferencedFieldsForType.prototype.fieldNames = $util.emptyArray;\n\n  /**\n   * ReferencedFieldsForType isInterface.\n   * @member {boolean} isInterface\n   * @memberof ReferencedFieldsForType\n   * @instance\n   */\n  ReferencedFieldsForType.prototype.isInterface = false;\n\n  /**\n   * Creates a new ReferencedFieldsForType instance using the specified properties.\n   * @function create\n   * @memberof ReferencedFieldsForType\n   * @static\n   * @param {IReferencedFieldsForType=} [properties] Properties to set\n   * @returns {ReferencedFieldsForType} ReferencedFieldsForType instance\n   */\n  ReferencedFieldsForType.create = function create(properties) {\n    return new ReferencedFieldsForType(properties);\n  };\n\n  /**\n   * Encodes the specified ReferencedFieldsForType message. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n   * @function encode\n   * @memberof ReferencedFieldsForType\n   * @static\n   * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ReferencedFieldsForType.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.fieldNames != null && message.fieldNames.length) for (var i = 0; i < message.fieldNames.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).string(message.fieldNames[i]);\n    if (message.isInterface != null && Object.hasOwnProperty.call(message, \"isInterface\")) writer.uint32( /* id 2, wireType 0 =*/16).bool(message.isInterface);\n    return writer;\n  };\n\n  /**\n   * Encodes the specified ReferencedFieldsForType message, length delimited. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ReferencedFieldsForType\n   * @static\n   * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ReferencedFieldsForType.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a ReferencedFieldsForType message from the specified reader or buffer.\n   * @function decode\n   * @memberof ReferencedFieldsForType\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ReferencedFieldsForType.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.ReferencedFieldsForType();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (!(message.fieldNames && message.fieldNames.length)) message.fieldNames = [];\n          message.fieldNames.push(reader.string());\n          break;\n        case 2:\n          message.isInterface = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a ReferencedFieldsForType message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ReferencedFieldsForType\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ReferencedFieldsForType.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a ReferencedFieldsForType message.\n   * @function verify\n   * @memberof ReferencedFieldsForType\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  ReferencedFieldsForType.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.fieldNames != null && message.hasOwnProperty(\"fieldNames\")) {\n      if (!Array.isArray(message.fieldNames)) return \"fieldNames: array expected\";\n      for (var i = 0; i < message.fieldNames.length; ++i) if (!$util.isString(message.fieldNames[i])) return \"fieldNames: string[] expected\";\n    }\n    if (message.isInterface != null && message.hasOwnProperty(\"isInterface\")) if (typeof message.isInterface !== \"boolean\") return \"isInterface: boolean expected\";\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a ReferencedFieldsForType message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ReferencedFieldsForType\n   * @static\n   * @param {ReferencedFieldsForType} message ReferencedFieldsForType\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  ReferencedFieldsForType.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.fieldNames = [];\n    if (options.defaults) object.isInterface = false;\n    if (message.fieldNames && message.fieldNames.length) {\n      object.fieldNames = [];\n      for (var j = 0; j < message.fieldNames.length; ++j) object.fieldNames[j] = message.fieldNames[j];\n    }\n    if (message.isInterface != null && message.hasOwnProperty(\"isInterface\")) object.isInterface = message.isInterface;\n    return object;\n  };\n\n  /**\n   * Converts this ReferencedFieldsForType to JSON.\n   * @function toJSON\n   * @memberof ReferencedFieldsForType\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  ReferencedFieldsForType.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return ReferencedFieldsForType;\n}();\n$root.Report = function () {\n  /**\n   * Properties of a Report.\n   * @exports IReport\n   * @interface IReport\n   * @property {IReportHeader|null} [header] Report header\n   * @property {Object.<string,ITracesAndStats>|null} [tracesPerQuery] Report tracesPerQuery\n   * @property {google.protobuf.ITimestamp|null} [endTime] Report endTime\n   * @property {number|null} [operationCount] Report operationCount\n   */\n\n  /**\n   * Constructs a new Report.\n   * @exports Report\n   * @classdesc Represents a Report.\n   * @implements IReport\n   * @constructor\n   * @param {IReport=} [properties] Properties to set\n   */\n  function Report(properties) {\n    this.tracesPerQuery = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * Report header.\n   * @member {IReportHeader|null|undefined} header\n   * @memberof Report\n   * @instance\n   */\n  Report.prototype.header = null;\n\n  /**\n   * Report tracesPerQuery.\n   * @member {Object.<string,ITracesAndStats>} tracesPerQuery\n   * @memberof Report\n   * @instance\n   */\n  Report.prototype.tracesPerQuery = $util.emptyObject;\n\n  /**\n   * Report endTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} endTime\n   * @memberof Report\n   * @instance\n   */\n  Report.prototype.endTime = null;\n\n  /**\n   * Report operationCount.\n   * @member {number} operationCount\n   * @memberof Report\n   * @instance\n   */\n  Report.prototype.operationCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * Creates a new Report instance using the specified properties.\n   * @function create\n   * @memberof Report\n   * @static\n   * @param {IReport=} [properties] Properties to set\n   * @returns {Report} Report instance\n   */\n  Report.create = function create(properties) {\n    return new Report(properties);\n  };\n\n  /**\n   * Encodes the specified Report message. Does not implicitly {@link Report.verify|verify} messages.\n   * @function encode\n   * @memberof Report\n   * @static\n   * @param {IReport} message Report message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Report.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.header != null && Object.hasOwnProperty.call(message, \"header\")) $root.ReportHeader.encode(message.header, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n    if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\")) $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n    if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\")) for (var keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n      writer.uint32( /* id 5, wireType 2 =*/42).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n      $root.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n    }\n    if (message.operationCount != null && Object.hasOwnProperty.call(message, \"operationCount\")) writer.uint32( /* id 6, wireType 0 =*/48).uint64(message.operationCount);\n    return writer;\n  };\n\n  /**\n   * Encodes the specified Report message, length delimited. Does not implicitly {@link Report.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Report\n   * @static\n   * @param {IReport} message Report message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Report.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a Report message from the specified reader or buffer.\n   * @function decode\n   * @memberof Report\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Report} Report\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Report.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Report(),\n      key;\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.header = $root.ReportHeader.decode(reader, reader.uint32());\n          break;\n        case 5:\n          reader.skip().pos++;\n          if (message.tracesPerQuery === $util.emptyObject) message.tracesPerQuery = {};\n          key = reader.string();\n          reader.pos++;\n          message.tracesPerQuery[key] = $root.TracesAndStats.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.operationCount = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a Report message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Report\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Report} Report\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Report.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a Report message.\n   * @function verify\n   * @memberof Report\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Report.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.header != null && message.hasOwnProperty(\"header\")) {\n      var error = $root.ReportHeader.verify(message.header);\n      if (error) return \"header.\" + error;\n    }\n    if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n      if (!$util.isObject(message.tracesPerQuery)) return \"tracesPerQuery: object expected\";\n      var key = Object.keys(message.tracesPerQuery);\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.TracesAndStats.verify(message.tracesPerQuery[key[i]]);\n        if (error) return \"tracesPerQuery.\" + error;\n      }\n    }\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n      if (error) return \"endTime.\" + error;\n    }\n    if (message.operationCount != null && message.hasOwnProperty(\"operationCount\")) if (!$util.isInteger(message.operationCount) && !(message.operationCount && $util.isInteger(message.operationCount.low) && $util.isInteger(message.operationCount.high))) return \"operationCount: integer|Long expected\";\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a Report message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Report\n   * @static\n   * @param {Report} message Report\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Report.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.tracesPerQuery = {};\n    if (options.defaults) {\n      object.header = null;\n      object.endTime = null;\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.operationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.operationCount = options.longs === String ? \"0\" : 0;\n    }\n    if (message.header != null && message.hasOwnProperty(\"header\")) object.header = $root.ReportHeader.toObject(message.header, options);\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n    var keys2;\n    if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n      object.tracesPerQuery = {};\n      for (var j = 0; j < keys2.length; ++j) object.tracesPerQuery[keys2[j]] = $root.TracesAndStats.toObject(message.tracesPerQuery[keys2[j]], options);\n    }\n    if (message.operationCount != null && message.hasOwnProperty(\"operationCount\")) if (typeof message.operationCount === \"number\") object.operationCount = options.longs === String ? String(message.operationCount) : message.operationCount;else object.operationCount = options.longs === String ? $util.Long.prototype.toString.call(message.operationCount) : options.longs === Number ? new $util.LongBits(message.operationCount.low >>> 0, message.operationCount.high >>> 0).toNumber(true) : message.operationCount;\n    return object;\n  };\n\n  /**\n   * Converts this Report to JSON.\n   * @function toJSON\n   * @memberof Report\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Report.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return Report;\n}();\n$root.ContextualizedStats = function () {\n  /**\n   * Properties of a ContextualizedStats.\n   * @exports IContextualizedStats\n   * @interface IContextualizedStats\n   * @property {IStatsContext|null} [context] ContextualizedStats context\n   * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedStats queryLatencyStats\n   * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedStats perTypeStat\n   */\n\n  /**\n   * Constructs a new ContextualizedStats.\n   * @exports ContextualizedStats\n   * @classdesc Represents a ContextualizedStats.\n   * @implements IContextualizedStats\n   * @constructor\n   * @param {IContextualizedStats=} [properties] Properties to set\n   */\n  function ContextualizedStats(properties) {\n    this.perTypeStat = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * ContextualizedStats context.\n   * @member {IStatsContext|null|undefined} context\n   * @memberof ContextualizedStats\n   * @instance\n   */\n  ContextualizedStats.prototype.context = null;\n\n  /**\n   * ContextualizedStats queryLatencyStats.\n   * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n   * @memberof ContextualizedStats\n   * @instance\n   */\n  ContextualizedStats.prototype.queryLatencyStats = null;\n\n  /**\n   * ContextualizedStats perTypeStat.\n   * @member {Object.<string,ITypeStat>} perTypeStat\n   * @memberof ContextualizedStats\n   * @instance\n   */\n  ContextualizedStats.prototype.perTypeStat = $util.emptyObject;\n\n  /**\n   * Creates a new ContextualizedStats instance using the specified properties.\n   * @function create\n   * @memberof ContextualizedStats\n   * @static\n   * @param {IContextualizedStats=} [properties] Properties to set\n   * @returns {ContextualizedStats} ContextualizedStats instance\n   */\n  ContextualizedStats.create = function create(properties) {\n    return new ContextualizedStats(properties);\n  };\n\n  /**\n   * Encodes the specified ContextualizedStats message. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n   * @function encode\n   * @memberof ContextualizedStats\n   * @static\n   * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ContextualizedStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.context != null && Object.hasOwnProperty.call(message, \"context\")) $root.StatsContext.encode(message.context, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n    if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\")) $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n    if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\")) for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n      writer.uint32( /* id 3, wireType 2 =*/26).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n      $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n\n  /**\n   * Encodes the specified ContextualizedStats message, length delimited. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ContextualizedStats\n   * @static\n   * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  ContextualizedStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a ContextualizedStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof ContextualizedStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ContextualizedStats} ContextualizedStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ContextualizedStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.ContextualizedStats(),\n      key;\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.context = $root.StatsContext.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n          break;\n        case 3:\n          reader.skip().pos++;\n          if (message.perTypeStat === $util.emptyObject) message.perTypeStat = {};\n          key = reader.string();\n          reader.pos++;\n          message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a ContextualizedStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ContextualizedStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ContextualizedStats} ContextualizedStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  ContextualizedStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a ContextualizedStats message.\n   * @function verify\n   * @memberof ContextualizedStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  ContextualizedStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.context != null && message.hasOwnProperty(\"context\")) {\n      var error = $root.StatsContext.verify(message.context);\n      if (error) return \"context.\" + error;\n    }\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n      var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n      if (error) return \"queryLatencyStats.\" + error;\n    }\n    if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n      if (!$util.isObject(message.perTypeStat)) return \"perTypeStat: object expected\";\n      var key = Object.keys(message.perTypeStat);\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n        if (error) return \"perTypeStat.\" + error;\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a ContextualizedStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ContextualizedStats\n   * @static\n   * @param {ContextualizedStats} message ContextualizedStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  ContextualizedStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.perTypeStat = {};\n    if (options.defaults) {\n      object.context = null;\n      object.queryLatencyStats = null;\n    }\n    if (message.context != null && message.hasOwnProperty(\"context\")) object.context = $root.StatsContext.toObject(message.context, options);\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n    var keys2;\n    if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n      object.perTypeStat = {};\n      for (var j = 0; j < keys2.length; ++j) object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n    }\n    return object;\n  };\n\n  /**\n   * Converts this ContextualizedStats to JSON.\n   * @function toJSON\n   * @memberof ContextualizedStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  ContextualizedStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return ContextualizedStats;\n}();\n$root.TracesAndStats = function () {\n  /**\n   * Properties of a TracesAndStats.\n   * @exports ITracesAndStats\n   * @interface ITracesAndStats\n   * @property {Array.<ITrace|Uint8Array>|null} [trace] TracesAndStats trace\n   * @property {$protobuf.ToArray.<IContextualizedStats>|Array.<IContextualizedStats>|null} [statsWithContext] TracesAndStats statsWithContext\n   * @property {Object.<string,IReferencedFieldsForType>|null} [referencedFieldsByType] TracesAndStats referencedFieldsByType\n   * @property {Array.<ITrace|Uint8Array>|null} [internalTracesContributingToStats] TracesAndStats internalTracesContributingToStats\n   */\n\n  /**\n   * Constructs a new TracesAndStats.\n   * @exports TracesAndStats\n   * @classdesc Represents a TracesAndStats.\n   * @implements ITracesAndStats\n   * @constructor\n   * @param {ITracesAndStats=} [properties] Properties to set\n   */\n  function TracesAndStats(properties) {\n    this.trace = [];\n    this.statsWithContext = [];\n    this.referencedFieldsByType = {};\n    this.internalTracesContributingToStats = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n\n  /**\n   * TracesAndStats trace.\n   * @member {Array.<ITrace|Uint8Array>} trace\n   * @memberof TracesAndStats\n   * @instance\n   */\n  TracesAndStats.prototype.trace = $util.emptyArray;\n\n  /**\n   * TracesAndStats statsWithContext.\n   * @member {Array.<IContextualizedStats>} statsWithContext\n   * @memberof TracesAndStats\n   * @instance\n   */\n  TracesAndStats.prototype.statsWithContext = $util.emptyArray;\n\n  /**\n   * TracesAndStats referencedFieldsByType.\n   * @member {Object.<string,IReferencedFieldsForType>} referencedFieldsByType\n   * @memberof TracesAndStats\n   * @instance\n   */\n  TracesAndStats.prototype.referencedFieldsByType = $util.emptyObject;\n\n  /**\n   * TracesAndStats internalTracesContributingToStats.\n   * @member {Array.<ITrace|Uint8Array>} internalTracesContributingToStats\n   * @memberof TracesAndStats\n   * @instance\n   */\n  TracesAndStats.prototype.internalTracesContributingToStats = $util.emptyArray;\n\n  /**\n   * Creates a new TracesAndStats instance using the specified properties.\n   * @function create\n   * @memberof TracesAndStats\n   * @static\n   * @param {ITracesAndStats=} [properties] Properties to set\n   * @returns {TracesAndStats} TracesAndStats instance\n   */\n  TracesAndStats.create = function create(properties) {\n    return new TracesAndStats(properties);\n  };\n\n  /**\n   * Encodes the specified TracesAndStats message. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n   * @function encode\n   * @memberof TracesAndStats\n   * @static\n   * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  TracesAndStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.trace != null && message.trace.length) for (var i = 0; i < message.trace.length; ++i) if (message.trace[i] instanceof Uint8Array) {\n      writer.uint32( /* id 1, wireType 2 =*/10);\n      writer.bytes(message.trace[i]);\n    } else $root.Trace.encode(message.trace[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n    var array2;\n    if (message.statsWithContext != null && message.statsWithContext.toArray) array2 = message.statsWithContext.toArray();else array2 = message.statsWithContext;\n    if (array2 != null && array2.length) for (var i = 0; i < array2.length; ++i) $root.ContextualizedStats.encode(array2[i], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n    if (message.internalTracesContributingToStats != null && message.internalTracesContributingToStats.length) for (var i = 0; i < message.internalTracesContributingToStats.length; ++i) if (message.internalTracesContributingToStats[i] instanceof Uint8Array) {\n      writer.uint32( /* id 3, wireType 2 =*/26);\n      writer.bytes(message.internalTracesContributingToStats[i]);\n    } else $root.Trace.encode(message.internalTracesContributingToStats[i], writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n    if (message.referencedFieldsByType != null && Object.hasOwnProperty.call(message, \"referencedFieldsByType\")) for (var keys = Object.keys(message.referencedFieldsByType), i = 0; i < keys.length; ++i) {\n      writer.uint32( /* id 4, wireType 2 =*/34).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n      $root.ReferencedFieldsForType.encode(message.referencedFieldsByType[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n\n  /**\n   * Encodes the specified TracesAndStats message, length delimited. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof TracesAndStats\n   * @static\n   * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  TracesAndStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n\n  /**\n   * Decodes a TracesAndStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof TracesAndStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {TracesAndStats} TracesAndStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  TracesAndStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.TracesAndStats(),\n      key;\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (!(message.trace && message.trace.length)) message.trace = [];\n          message.trace.push($root.Trace.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          if (!(message.statsWithContext && message.statsWithContext.length)) message.statsWithContext = [];\n          message.statsWithContext.push($root.ContextualizedStats.decode(reader, reader.uint32()));\n          break;\n        case 4:\n          reader.skip().pos++;\n          if (message.referencedFieldsByType === $util.emptyObject) message.referencedFieldsByType = {};\n          key = reader.string();\n          reader.pos++;\n          message.referencedFieldsByType[key] = $root.ReferencedFieldsForType.decode(reader, reader.uint32());\n          break;\n        case 3:\n          if (!(message.internalTracesContributingToStats && message.internalTracesContributingToStats.length)) message.internalTracesContributingToStats = [];\n          message.internalTracesContributingToStats.push($root.Trace.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  };\n\n  /**\n   * Decodes a TracesAndStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof TracesAndStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {TracesAndStats} TracesAndStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  TracesAndStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n\n  /**\n   * Verifies a TracesAndStats message.\n   * @function verify\n   * @memberof TracesAndStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  TracesAndStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n      if (!Array.isArray(message.trace)) return \"trace: array expected\";\n      for (var i = 0; i < message.trace.length; ++i) if (!(message.trace[i] instanceof Uint8Array)) {\n        var error = $root.Trace.verify(message.trace[i]);\n        if (error) return \"trace.\" + error;\n      }\n    }\n    if (message.statsWithContext != null && message.hasOwnProperty(\"statsWithContext\")) {\n      var array2;\n      if (message.statsWithContext != null && message.statsWithContext.toArray) array2 = message.statsWithContext.toArray();else array2 = message.statsWithContext;\n      if (!Array.isArray(array2)) return \"statsWithContext: array expected\";\n      for (var i = 0; i < array2.length; ++i) {\n        var error = $root.ContextualizedStats.verify(array2[i]);\n        if (error) return \"statsWithContext.\" + error;\n      }\n    }\n    if (message.referencedFieldsByType != null && message.hasOwnProperty(\"referencedFieldsByType\")) {\n      if (!$util.isObject(message.referencedFieldsByType)) return \"referencedFieldsByType: object expected\";\n      var key = Object.keys(message.referencedFieldsByType);\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.ReferencedFieldsForType.verify(message.referencedFieldsByType[key[i]]);\n        if (error) return \"referencedFieldsByType.\" + error;\n      }\n    }\n    if (message.internalTracesContributingToStats != null && message.hasOwnProperty(\"internalTracesContributingToStats\")) {\n      if (!Array.isArray(message.internalTracesContributingToStats)) return \"internalTracesContributingToStats: array expected\";\n      for (var i = 0; i < message.internalTracesContributingToStats.length; ++i) if (!(message.internalTracesContributingToStats[i] instanceof Uint8Array)) {\n        var error = $root.Trace.verify(message.internalTracesContributingToStats[i]);\n        if (error) return \"internalTracesContributingToStats.\" + error;\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Creates a plain object from a TracesAndStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof TracesAndStats\n   * @static\n   * @param {TracesAndStats} message TracesAndStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  TracesAndStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) {\n      object.trace = [];\n      object.statsWithContext = [];\n      object.internalTracesContributingToStats = [];\n    }\n    if (options.objects || options.defaults) object.referencedFieldsByType = {};\n    if (message.trace && message.trace.length) {\n      object.trace = [];\n      for (var j = 0; j < message.trace.length; ++j) object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n    }\n    if (message.statsWithContext && message.statsWithContext.length) {\n      object.statsWithContext = [];\n      for (var j = 0; j < message.statsWithContext.length; ++j) object.statsWithContext[j] = $root.ContextualizedStats.toObject(message.statsWithContext[j], options);\n    }\n    if (message.internalTracesContributingToStats && message.internalTracesContributingToStats.length) {\n      object.internalTracesContributingToStats = [];\n      for (var j = 0; j < message.internalTracesContributingToStats.length; ++j) object.internalTracesContributingToStats[j] = $root.Trace.toObject(message.internalTracesContributingToStats[j], options);\n    }\n    var keys2;\n    if (message.referencedFieldsByType && (keys2 = Object.keys(message.referencedFieldsByType)).length) {\n      object.referencedFieldsByType = {};\n      for (var j = 0; j < keys2.length; ++j) object.referencedFieldsByType[keys2[j]] = $root.ReferencedFieldsForType.toObject(message.referencedFieldsByType[keys2[j]], options);\n    }\n    return object;\n  };\n\n  /**\n   * Converts this TracesAndStats to JSON.\n   * @function toJSON\n   * @memberof TracesAndStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  TracesAndStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return TracesAndStats;\n}();\n$root.google = function () {\n  /**\n   * Namespace google.\n   * @exports google\n   * @namespace\n   */\n  var google = {};\n  google.protobuf = function () {\n    /**\n     * Namespace protobuf.\n     * @memberof google\n     * @namespace\n     */\n    var protobuf = {};\n    protobuf.Timestamp = function () {\n      /**\n       * Properties of a Timestamp.\n       * @memberof google.protobuf\n       * @interface ITimestamp\n       * @property {number|null} [seconds] Timestamp seconds\n       * @property {number|null} [nanos] Timestamp nanos\n       */\n\n      /**\n       * Constructs a new Timestamp.\n       * @memberof google.protobuf\n       * @classdesc Represents a Timestamp.\n       * @implements ITimestamp\n       * @constructor\n       * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n       */\n      function Timestamp(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Timestamp seconds.\n       * @member {number} seconds\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       */\n      Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Timestamp nanos.\n       * @member {number} nanos\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       */\n      Timestamp.prototype.nanos = 0;\n\n      /**\n       * Creates a new Timestamp instance using the specified properties.\n       * @function create\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n       * @returns {google.protobuf.Timestamp} Timestamp instance\n       */\n      Timestamp.create = function create(properties) {\n        return new Timestamp(properties);\n      };\n\n      /**\n       * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n       * @function encode\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Timestamp.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\")) writer.uint32( /* id 1, wireType 0 =*/8).int64(message.seconds);\n        if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.nanos);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Timestamp message from the specified reader or buffer.\n       * @function decode\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {google.protobuf.Timestamp} Timestamp\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Timestamp.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.google.protobuf.Timestamp();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.seconds = reader.int64();\n              break;\n            case 2:\n              message.nanos = reader.int32();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {google.protobuf.Timestamp} Timestamp\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Timestamp.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Timestamp message.\n       * @function verify\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Timestamp.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.seconds != null && message.hasOwnProperty(\"seconds\")) if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high))) return \"seconds: integer|Long expected\";\n        if (message.nanos != null && message.hasOwnProperty(\"nanos\")) if (!$util.isInteger(message.nanos)) return \"nanos: integer expected\";\n        return null;\n      };\n\n      /**\n       * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.Timestamp} message Timestamp\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Timestamp.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.seconds = options.longs === String ? \"0\" : 0;\n          object.nanos = 0;\n        }\n        if (message.seconds != null && message.hasOwnProperty(\"seconds\")) if (typeof message.seconds === \"number\") object.seconds = options.longs === String ? String(message.seconds) : message.seconds;else object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n        if (message.nanos != null && message.hasOwnProperty(\"nanos\")) object.nanos = message.nanos;\n        return object;\n      };\n\n      /**\n       * Converts this Timestamp to JSON.\n       * @function toJSON\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Timestamp.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Timestamp;\n    }();\n    return protobuf;\n  }();\n  return google;\n}();\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Trace","properties","keys","Object","i","length","prototype","startTime","endTime","durationNs","Long","fromBits","root","signature","unexecutedOperationBody","unexecutedOperationName","details","clientName","clientVersion","http","cachePolicy","queryPlan","fullQueryCacheHit","persistedQueryHit","persistedQueryRegister","registeredOperation","forbiddenOperation","fieldExecutionWeight","create","encode","message","writer","hasOwnProperty","call","google","protobuf","Timestamp","uint32","fork","ldelim","Details","string","HTTP","uint64","Node","CachePolicy","bool","QueryPlanNode","double","encodeDelimited","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","error","isInteger","low","high","isString","toObject","options","object","defaults","long","longs","String","toString","Number","toNumber","LongBits","json","isFinite","toJSON","constructor","toJSONOptions","scope","maxAgeNs","int32","int64","enums","Scope","valuesById","values","variablesJson","emptyObject","operationName","key","skip","isObject","objects","keys2","j","Error","location","emptyArray","timeNs","Location","push","Array","isArray","arrays","requestHeaders","responseHeaders","method","host","path","statusCode","secure","protocol","Values","Method","value","line","column","child","responseName","index","originalFieldName","type","parentType","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","id","oneofs","sequence","parallel","fetch","flatten","SequenceNode","ParallelNode","FetchNode","FlattenNode","node","nodes","serviceName","traceParsingFailed","trace","sentTimeOffset","sentTime","receivedTime","responsePath","ResponsePathElement","fieldName","ReportHeader","graphRef","hostname","agentVersion","serviceVersion","runtimeVersion","uname","executableSchemaId","PathErrorStats","children","errorsCount","requestsWithErrorsCount","QueryLatencyStats","latencyCount","cacheLatencyCount","publicCacheTtlCount","privateCacheTtlCount","requestCount","cacheHits","persistedQueryHits","persistedQueryMisses","rootErrorStats","registeredOperationCount","forbiddenOperationCount","requestsWithoutFieldInstrumentation","array13","toArray","sint64","array14","array15","array16","end2","StatsContext","ContextualizedQueryLatencyStats","queryLatencyStats","context","ContextualizedTypeStats","perTypeStat","TypeStat","FieldStat","returnType","observedExecutionCount","estimatedExecutionCount","array9","perFieldStat","ReferencedFieldsForType","fieldNames","isInterface","Report","tracesPerQuery","header","operationCount","TracesAndStats","ContextualizedStats","statsWithContext","referencedFieldsByType","internalTracesContributingToStats","Uint8Array","bytes","array2","seconds","nanos","module","exports"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/apollo-reporting-protobuf/generated/protobuf.js"],"sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"@apollo/protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.Trace = (function() {\n\n    /**\n     * Properties of a Trace.\n     * @exports ITrace\n     * @interface ITrace\n     * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n     * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n     * @property {number|null} [durationNs] Trace durationNs\n     * @property {Trace.INode|null} [root] Trace root\n     * @property {string|null} [signature] Trace signature\n     * @property {string|null} [unexecutedOperationBody] Trace unexecutedOperationBody\n     * @property {string|null} [unexecutedOperationName] Trace unexecutedOperationName\n     * @property {Trace.IDetails|null} [details] Trace details\n     * @property {string|null} [clientName] Trace clientName\n     * @property {string|null} [clientVersion] Trace clientVersion\n     * @property {Trace.IHTTP|null} [http] Trace http\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n     * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n     * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n     * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n     * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n     * @property {boolean|null} [registeredOperation] Trace registeredOperation\n     * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n     * @property {number|null} [fieldExecutionWeight] Trace fieldExecutionWeight\n     */\n\n    /**\n     * Constructs a new Trace.\n     * @exports Trace\n     * @classdesc Represents a Trace.\n     * @implements ITrace\n     * @constructor\n     * @param {ITrace=} [properties] Properties to set\n     */\n    function Trace(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Trace startTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} startTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.startTime = null;\n\n    /**\n     * Trace endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.endTime = null;\n\n    /**\n     * Trace durationNs.\n     * @member {number} durationNs\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.durationNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Trace root.\n     * @member {Trace.INode|null|undefined} root\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.root = null;\n\n    /**\n     * Trace signature.\n     * @member {string} signature\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.signature = \"\";\n\n    /**\n     * Trace unexecutedOperationBody.\n     * @member {string} unexecutedOperationBody\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationBody = \"\";\n\n    /**\n     * Trace unexecutedOperationName.\n     * @member {string} unexecutedOperationName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationName = \"\";\n\n    /**\n     * Trace details.\n     * @member {Trace.IDetails|null|undefined} details\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.details = null;\n\n    /**\n     * Trace clientName.\n     * @member {string} clientName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientName = \"\";\n\n    /**\n     * Trace clientVersion.\n     * @member {string} clientVersion\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientVersion = \"\";\n\n    /**\n     * Trace http.\n     * @member {Trace.IHTTP|null|undefined} http\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.http = null;\n\n    /**\n     * Trace cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.cachePolicy = null;\n\n    /**\n     * Trace queryPlan.\n     * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.queryPlan = null;\n\n    /**\n     * Trace fullQueryCacheHit.\n     * @member {boolean} fullQueryCacheHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fullQueryCacheHit = false;\n\n    /**\n     * Trace persistedQueryHit.\n     * @member {boolean} persistedQueryHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryHit = false;\n\n    /**\n     * Trace persistedQueryRegister.\n     * @member {boolean} persistedQueryRegister\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryRegister = false;\n\n    /**\n     * Trace registeredOperation.\n     * @member {boolean} registeredOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.registeredOperation = false;\n\n    /**\n     * Trace forbiddenOperation.\n     * @member {boolean} forbiddenOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.forbiddenOperation = false;\n\n    /**\n     * Trace fieldExecutionWeight.\n     * @member {number} fieldExecutionWeight\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fieldExecutionWeight = 0;\n\n    /**\n     * Creates a new Trace instance using the specified properties.\n     * @function create\n     * @memberof Trace\n     * @static\n     * @param {ITrace=} [properties] Properties to set\n     * @returns {Trace} Trace instance\n     */\n    Trace.create = function create(properties) {\n        return new Trace(properties);\n    };\n\n    /**\n     * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encode\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.details != null && Object.hasOwnProperty.call(message, \"details\"))\n            $root.Trace.Details.encode(message.details, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.clientVersion);\n        if (message.http != null && Object.hasOwnProperty.call(message, \"http\"))\n            $root.Trace.HTTP.encode(message.http, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.durationNs);\n        if (message.root != null && Object.hasOwnProperty.call(message, \"root\"))\n            $root.Trace.Node.encode(message.root, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n        if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n            $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\"))\n            writer.uint32(/* id 19, wireType 2 =*/154).string(message.signature);\n        if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\"))\n            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.fullQueryCacheHit);\n        if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\"))\n            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.persistedQueryHit);\n        if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\"))\n            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.persistedQueryRegister);\n        if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\"))\n            writer.uint32(/* id 24, wireType 0 =*/192).bool(message.registeredOperation);\n        if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\"))\n            writer.uint32(/* id 25, wireType 0 =*/200).bool(message.forbiddenOperation);\n        if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\"))\n            $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n        if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, \"unexecutedOperationBody\"))\n            writer.uint32(/* id 27, wireType 2 =*/218).string(message.unexecutedOperationBody);\n        if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, \"unexecutedOperationName\"))\n            writer.uint32(/* id 28, wireType 2 =*/226).string(message.unexecutedOperationName);\n        if (message.fieldExecutionWeight != null && Object.hasOwnProperty.call(message, \"fieldExecutionWeight\"))\n            writer.uint32(/* id 31, wireType 1 =*/249).double(message.fieldExecutionWeight);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 4:\n                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.durationNs = reader.uint64();\n                break;\n            case 14:\n                message.root = $root.Trace.Node.decode(reader, reader.uint32());\n                break;\n            case 19:\n                message.signature = reader.string();\n                break;\n            case 27:\n                message.unexecutedOperationBody = reader.string();\n                break;\n            case 28:\n                message.unexecutedOperationName = reader.string();\n                break;\n            case 6:\n                message.details = $root.Trace.Details.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.clientName = reader.string();\n                break;\n            case 8:\n                message.clientVersion = reader.string();\n                break;\n            case 10:\n                message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n                break;\n            case 18:\n                message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                break;\n            case 26:\n                message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                break;\n            case 20:\n                message.fullQueryCacheHit = reader.bool();\n                break;\n            case 21:\n                message.persistedQueryHit = reader.bool();\n                break;\n            case 22:\n                message.persistedQueryRegister = reader.bool();\n                break;\n            case 24:\n                message.registeredOperation = reader.bool();\n                break;\n            case 25:\n                message.forbiddenOperation = reader.bool();\n                break;\n            case 31:\n                message.fieldExecutionWeight = reader.double();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Trace message.\n     * @function verify\n     * @memberof Trace\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Trace.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n            if (error)\n                return \"startTime.\" + error;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high)))\n                return \"durationNs: integer|Long expected\";\n        if (message.root != null && message.hasOwnProperty(\"root\")) {\n            var error = $root.Trace.Node.verify(message.root);\n            if (error)\n                return \"root.\" + error;\n        }\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            if (!$util.isString(message.signature))\n                return \"signature: string expected\";\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            if (!$util.isString(message.unexecutedOperationBody))\n                return \"unexecutedOperationBody: string expected\";\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            if (!$util.isString(message.unexecutedOperationName))\n                return \"unexecutedOperationName: string expected\";\n        if (message.details != null && message.hasOwnProperty(\"details\")) {\n            var error = $root.Trace.Details.verify(message.details);\n            if (error)\n                return \"details.\" + error;\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        if (message.http != null && message.hasOwnProperty(\"http\")) {\n            var error = $root.Trace.HTTP.verify(message.http);\n            if (error)\n                return \"http.\" + error;\n        }\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n            var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n            if (error)\n                return \"cachePolicy.\" + error;\n        }\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n            var error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n            if (error)\n                return \"queryPlan.\" + error;\n        }\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            if (typeof message.fullQueryCacheHit !== \"boolean\")\n                return \"fullQueryCacheHit: boolean expected\";\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            if (typeof message.persistedQueryHit !== \"boolean\")\n                return \"persistedQueryHit: boolean expected\";\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            if (typeof message.persistedQueryRegister !== \"boolean\")\n                return \"persistedQueryRegister: boolean expected\";\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            if (typeof message.registeredOperation !== \"boolean\")\n                return \"registeredOperation: boolean expected\";\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            if (typeof message.forbiddenOperation !== \"boolean\")\n                return \"forbiddenOperation: boolean expected\";\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            if (typeof message.fieldExecutionWeight !== \"number\")\n                return \"fieldExecutionWeight: number expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Trace message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace\n     * @static\n     * @param {Trace} message Trace\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Trace.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.endTime = null;\n            object.startTime = null;\n            object.details = null;\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n            object.http = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.durationNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.durationNs = options.longs === String ? \"0\" : 0;\n            object.root = null;\n            object.cachePolicy = null;\n            object.signature = \"\";\n            object.fullQueryCacheHit = false;\n            object.persistedQueryHit = false;\n            object.persistedQueryRegister = false;\n            object.registeredOperation = false;\n            object.forbiddenOperation = false;\n            object.queryPlan = null;\n            object.unexecutedOperationBody = \"\";\n            object.unexecutedOperationName = \"\";\n            object.fieldExecutionWeight = 0;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n        if (message.details != null && message.hasOwnProperty(\"details\"))\n            object.details = $root.Trace.Details.toObject(message.details, options);\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        if (message.http != null && message.hasOwnProperty(\"http\"))\n            object.http = $root.Trace.HTTP.toObject(message.http, options);\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (typeof message.durationNs === \"number\")\n                object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;\n            else\n                object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n        if (message.root != null && message.hasOwnProperty(\"root\"))\n            object.root = $root.Trace.Node.toObject(message.root, options);\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n            object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            object.signature = message.signature;\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            object.fullQueryCacheHit = message.fullQueryCacheHit;\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            object.persistedQueryHit = message.persistedQueryHit;\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            object.persistedQueryRegister = message.persistedQueryRegister;\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            object.registeredOperation = message.registeredOperation;\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            object.forbiddenOperation = message.forbiddenOperation;\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\"))\n            object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            object.unexecutedOperationBody = message.unexecutedOperationBody;\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            object.unexecutedOperationName = message.unexecutedOperationName;\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            object.fieldExecutionWeight = options.json && !isFinite(message.fieldExecutionWeight) ? String(message.fieldExecutionWeight) : message.fieldExecutionWeight;\n        return object;\n    };\n\n    /**\n     * Converts this Trace to JSON.\n     * @function toJSON\n     * @memberof Trace\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Trace.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Trace.CachePolicy = (function() {\n\n        /**\n         * Properties of a CachePolicy.\n         * @memberof Trace\n         * @interface ICachePolicy\n         * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n         * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n         */\n\n        /**\n         * Constructs a new CachePolicy.\n         * @memberof Trace\n         * @classdesc Represents a CachePolicy.\n         * @implements ICachePolicy\n         * @constructor\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         */\n        function CachePolicy(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CachePolicy scope.\n         * @member {Trace.CachePolicy.Scope} scope\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.scope = 0;\n\n        /**\n         * CachePolicy maxAgeNs.\n         * @member {number} maxAgeNs\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.maxAgeNs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new CachePolicy instance using the specified properties.\n         * @function create\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         * @returns {Trace.CachePolicy} CachePolicy instance\n         */\n        CachePolicy.create = function create(properties) {\n            return new CachePolicy(properties);\n        };\n\n        /**\n         * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scope);\n            if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxAgeNs);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.CachePolicy();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.scope = reader.int32();\n                    break;\n                case 2:\n                    message.maxAgeNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CachePolicy message.\n         * @function verify\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CachePolicy.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                switch (message.scope) {\n                default:\n                    return \"scope: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high)))\n                    return \"maxAgeNs: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.CachePolicy} message CachePolicy\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CachePolicy.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.maxAgeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.maxAgeNs = options.longs === String ? \"0\" : 0;\n            }\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (typeof message.maxAgeNs === \"number\")\n                    object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;\n                else\n                    object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n            return object;\n        };\n\n        /**\n         * Converts this CachePolicy to JSON.\n         * @function toJSON\n         * @memberof Trace.CachePolicy\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CachePolicy.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Scope enum.\n         * @name Trace.CachePolicy.Scope\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} PUBLIC=1 PUBLIC value\n         * @property {number} PRIVATE=2 PRIVATE value\n         */\n        CachePolicy.Scope = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"PUBLIC\"] = 1;\n            values[valuesById[2] = \"PRIVATE\"] = 2;\n            return values;\n        })();\n\n        return CachePolicy;\n    })();\n\n    Trace.Details = (function() {\n\n        /**\n         * Properties of a Details.\n         * @memberof Trace\n         * @interface IDetails\n         * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n         * @property {string|null} [operationName] Details operationName\n         */\n\n        /**\n         * Constructs a new Details.\n         * @memberof Trace\n         * @classdesc Represents a Details.\n         * @implements IDetails\n         * @constructor\n         * @param {Trace.IDetails=} [properties] Properties to set\n         */\n        function Details(properties) {\n            this.variablesJson = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Details variablesJson.\n         * @member {Object.<string,string>} variablesJson\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.variablesJson = $util.emptyObject;\n\n        /**\n         * Details operationName.\n         * @member {string} operationName\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.operationName = \"\";\n\n        /**\n         * Creates a new Details instance using the specified properties.\n         * @function create\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails=} [properties] Properties to set\n         * @returns {Trace.Details} Details instance\n         */\n        Details.create = function create(properties) {\n            return new Details(properties);\n        };\n\n        /**\n         * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.operationName);\n            if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\"))\n                for (var keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variablesJson[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Details(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 4:\n                    reader.skip().pos++;\n                    if (message.variablesJson === $util.emptyObject)\n                        message.variablesJson = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.variablesJson[key] = reader.string();\n                    break;\n                case 3:\n                    message.operationName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Details message.\n         * @function verify\n         * @memberof Trace.Details\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Details.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n                if (!$util.isObject(message.variablesJson))\n                    return \"variablesJson: object expected\";\n                var key = Object.keys(message.variablesJson);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variablesJson[key[i]]))\n                        return \"variablesJson: string{k:string} expected\";\n            }\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                if (!$util.isString(message.operationName))\n                    return \"operationName: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Details message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.Details} message Details\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Details.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults)\n                object.variablesJson = {};\n            if (options.defaults)\n                object.operationName = \"\";\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                object.operationName = message.operationName;\n            var keys2;\n            if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n                object.variablesJson = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Details to JSON.\n         * @function toJSON\n         * @memberof Trace.Details\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Details.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Details;\n    })();\n\n    Trace.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof Trace\n         * @interface IError\n         * @property {string|null} [message] Error message\n         * @property {Array.<Trace.ILocation>|null} [location] Error location\n         * @property {number|null} [timeNs] Error timeNs\n         * @property {string|null} [json] Error json\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof Trace\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {Trace.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            this.location = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error message.\n         * @member {string} message\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.message = \"\";\n\n        /**\n         * Error location.\n         * @member {Array.<Trace.ILocation>} location\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.location = $util.emptyArray;\n\n        /**\n         * Error timeNs.\n         * @member {number} timeNs\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.timeNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Error json.\n         * @member {string} json\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.json = \"\";\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError=} [properties] Properties to set\n         * @returns {Trace.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n            if (message.location != null && message.location.length)\n                for (var i = 0; i < message.location.length; ++i)\n                    $root.Trace.Location.encode(message.location[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timeNs);\n            if (message.json != null && Object.hasOwnProperty.call(message, \"json\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.json);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Error();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                case 2:\n                    if (!(message.location && message.location.length))\n                        message.location = [];\n                    message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.timeNs = reader.uint64();\n                    break;\n                case 4:\n                    message.json = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof Trace.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                if (!Array.isArray(message.location))\n                    return \"location: array expected\";\n                for (var i = 0; i < message.location.length; ++i) {\n                    var error = $root.Trace.Location.verify(message.location[i]);\n                    if (error)\n                        return \"location.\" + error;\n                }\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high)))\n                    return \"timeNs: integer|Long expected\";\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                if (!$util.isString(message.json))\n                    return \"json: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.location = [];\n            if (options.defaults) {\n                object.message = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.timeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timeNs = options.longs === String ? \"0\" : 0;\n                object.json = \"\";\n            }\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.location && message.location.length) {\n                object.location = [];\n                for (var j = 0; j < message.location.length; ++j)\n                    object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (typeof message.timeNs === \"number\")\n                    object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;\n                else\n                    object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                object.json = message.json;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof Trace.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    Trace.HTTP = (function() {\n\n        /**\n         * Properties of a HTTP.\n         * @memberof Trace\n         * @interface IHTTP\n         * @property {Trace.HTTP.Method|null} [method] HTTP method\n         * @property {string|null} [host] HTTP host\n         * @property {string|null} [path] HTTP path\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n         * @property {number|null} [statusCode] HTTP statusCode\n         * @property {boolean|null} [secure] HTTP secure\n         * @property {string|null} [protocol] HTTP protocol\n         */\n\n        /**\n         * Constructs a new HTTP.\n         * @memberof Trace\n         * @classdesc Represents a HTTP.\n         * @implements IHTTP\n         * @constructor\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         */\n        function HTTP(properties) {\n            this.requestHeaders = {};\n            this.responseHeaders = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HTTP method.\n         * @member {Trace.HTTP.Method} method\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.method = 0;\n\n        /**\n         * HTTP host.\n         * @member {string} host\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.host = \"\";\n\n        /**\n         * HTTP path.\n         * @member {string} path\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.path = \"\";\n\n        /**\n         * HTTP requestHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.requestHeaders = $util.emptyObject;\n\n        /**\n         * HTTP responseHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.responseHeaders = $util.emptyObject;\n\n        /**\n         * HTTP statusCode.\n         * @member {number} statusCode\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.statusCode = 0;\n\n        /**\n         * HTTP secure.\n         * @member {boolean} secure\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.secure = false;\n\n        /**\n         * HTTP protocol.\n         * @member {string} protocol\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.protocol = \"\";\n\n        /**\n         * Creates a new HTTP instance using the specified properties.\n         * @function create\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         * @returns {Trace.HTTP} HTTP instance\n         */\n        HTTP.create = function create(properties) {\n            return new HTTP(properties);\n        };\n\n        /**\n         * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.method != null && Object.hasOwnProperty.call(message, \"method\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.method);\n            if (message.host != null && Object.hasOwnProperty.call(message, \"host\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.host);\n            if (message.path != null && Object.hasOwnProperty.call(message, \"path\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.path);\n            if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\"))\n                for (var keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\"))\n                for (var keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.statusCode);\n            if (message.secure != null && Object.hasOwnProperty.call(message, \"secure\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.secure);\n            if (message.protocol != null && Object.hasOwnProperty.call(message, \"protocol\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).string(message.protocol);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.method = reader.int32();\n                    break;\n                case 2:\n                    message.host = reader.string();\n                    break;\n                case 3:\n                    message.path = reader.string();\n                    break;\n                case 4:\n                    reader.skip().pos++;\n                    if (message.requestHeaders === $util.emptyObject)\n                        message.requestHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    reader.skip().pos++;\n                    if (message.responseHeaders === $util.emptyObject)\n                        message.responseHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.statusCode = reader.uint32();\n                    break;\n                case 8:\n                    message.secure = reader.bool();\n                    break;\n                case 9:\n                    message.protocol = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HTTP message.\n         * @function verify\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HTTP.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                switch (message.method) {\n                default:\n                    return \"method: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                    break;\n                }\n            if (message.host != null && message.hasOwnProperty(\"host\"))\n                if (!$util.isString(message.host))\n                    return \"host: string expected\";\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                if (!$util.isString(message.path))\n                    return \"path: string expected\";\n            if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n                if (!$util.isObject(message.requestHeaders))\n                    return \"requestHeaders: object expected\";\n                var key = Object.keys(message.requestHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n                    if (error)\n                        return \"requestHeaders.\" + error;\n                }\n            }\n            if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n                if (!$util.isObject(message.responseHeaders))\n                    return \"responseHeaders: object expected\";\n                var key = Object.keys(message.responseHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n                    if (error)\n                        return \"responseHeaders.\" + error;\n                }\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                if (!$util.isInteger(message.statusCode))\n                    return \"statusCode: integer expected\";\n            if (message.secure != null && message.hasOwnProperty(\"secure\"))\n                if (typeof message.secure !== \"boolean\")\n                    return \"secure: boolean expected\";\n            if (message.protocol != null && message.hasOwnProperty(\"protocol\"))\n                if (!$util.isString(message.protocol))\n                    return \"protocol: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.HTTP} message HTTP\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HTTP.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults) {\n                object.requestHeaders = {};\n                object.responseHeaders = {};\n            }\n            if (options.defaults) {\n                object.method = options.enums === String ? \"UNKNOWN\" : 0;\n                object.host = \"\";\n                object.path = \"\";\n                object.statusCode = 0;\n                object.secure = false;\n                object.protocol = \"\";\n            }\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n            if (message.host != null && message.hasOwnProperty(\"host\"))\n                object.host = message.host;\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                object.path = message.path;\n            var keys2;\n            if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n                object.requestHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n            }\n            if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n                object.responseHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                object.statusCode = message.statusCode;\n            if (message.secure != null && message.hasOwnProperty(\"secure\"))\n                object.secure = message.secure;\n            if (message.protocol != null && message.hasOwnProperty(\"protocol\"))\n                object.protocol = message.protocol;\n            return object;\n        };\n\n        /**\n         * Converts this HTTP to JSON.\n         * @function toJSON\n         * @memberof Trace.HTTP\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HTTP.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        HTTP.Values = (function() {\n\n            /**\n             * Properties of a Values.\n             * @memberof Trace.HTTP\n             * @interface IValues\n             * @property {Array.<string>|null} [value] Values value\n             */\n\n            /**\n             * Constructs a new Values.\n             * @memberof Trace.HTTP\n             * @classdesc Represents a Values.\n             * @implements IValues\n             * @constructor\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             */\n            function Values(properties) {\n                this.value = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Values value.\n             * @member {Array.<string>} value\n             * @memberof Trace.HTTP.Values\n             * @instance\n             */\n            Values.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new Values instance using the specified properties.\n             * @function create\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             * @returns {Trace.HTTP.Values} Values instance\n             */\n            Values.create = function create(properties) {\n                return new Values(properties);\n            };\n\n            /**\n             * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.value != null && message.value.length)\n                    for (var i = 0; i < message.value.length; ++i)\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP.Values();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.value && message.value.length))\n                            message.value = [];\n                        message.value.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Values message.\n             * @function verify\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Values.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value))\n                        return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i)\n                        if (!$util.isString(message.value[i]))\n                            return \"value: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Values message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.Values} message Values\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Values.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j)\n                        object.value[j] = message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Values to JSON.\n             * @function toJSON\n             * @memberof Trace.HTTP.Values\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Values.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Values;\n        })();\n\n        /**\n         * Method enum.\n         * @name Trace.HTTP.Method\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} OPTIONS=1 OPTIONS value\n         * @property {number} GET=2 GET value\n         * @property {number} HEAD=3 HEAD value\n         * @property {number} POST=4 POST value\n         * @property {number} PUT=5 PUT value\n         * @property {number} DELETE=6 DELETE value\n         * @property {number} TRACE=7 TRACE value\n         * @property {number} CONNECT=8 CONNECT value\n         * @property {number} PATCH=9 PATCH value\n         */\n        HTTP.Method = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"OPTIONS\"] = 1;\n            values[valuesById[2] = \"GET\"] = 2;\n            values[valuesById[3] = \"HEAD\"] = 3;\n            values[valuesById[4] = \"POST\"] = 4;\n            values[valuesById[5] = \"PUT\"] = 5;\n            values[valuesById[6] = \"DELETE\"] = 6;\n            values[valuesById[7] = \"TRACE\"] = 7;\n            values[valuesById[8] = \"CONNECT\"] = 8;\n            values[valuesById[9] = \"PATCH\"] = 9;\n            return values;\n        })();\n\n        return HTTP;\n    })();\n\n    Trace.Location = (function() {\n\n        /**\n         * Properties of a Location.\n         * @memberof Trace\n         * @interface ILocation\n         * @property {number|null} [line] Location line\n         * @property {number|null} [column] Location column\n         */\n\n        /**\n         * Constructs a new Location.\n         * @memberof Trace\n         * @classdesc Represents a Location.\n         * @implements ILocation\n         * @constructor\n         * @param {Trace.ILocation=} [properties] Properties to set\n         */\n        function Location(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Location line.\n         * @member {number} line\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.line = 0;\n\n        /**\n         * Location column.\n         * @member {number} column\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.column = 0;\n\n        /**\n         * Creates a new Location instance using the specified properties.\n         * @function create\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation=} [properties] Properties to set\n         * @returns {Trace.Location} Location instance\n         */\n        Location.create = function create(properties) {\n            return new Location(properties);\n        };\n\n        /**\n         * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.line != null && Object.hasOwnProperty.call(message, \"line\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.line);\n            if (message.column != null && Object.hasOwnProperty.call(message, \"column\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.column);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Location();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.line = reader.uint32();\n                    break;\n                case 2:\n                    message.column = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Location message.\n         * @function verify\n         * @memberof Trace.Location\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Location.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                if (!$util.isInteger(message.line))\n                    return \"line: integer expected\";\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                if (!$util.isInteger(message.column))\n                    return \"column: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Location message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.Location} message Location\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Location.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.line = 0;\n                object.column = 0;\n            }\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                object.line = message.line;\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                object.column = message.column;\n            return object;\n        };\n\n        /**\n         * Converts this Location to JSON.\n         * @function toJSON\n         * @memberof Trace.Location\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Location.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Location;\n    })();\n\n    Trace.Node = (function() {\n\n        /**\n         * Properties of a Node.\n         * @memberof Trace\n         * @interface INode\n         * @property {string|null} [responseName] Node responseName\n         * @property {number|null} [index] Node index\n         * @property {string|null} [originalFieldName] Node originalFieldName\n         * @property {string|null} [type] Node type\n         * @property {string|null} [parentType] Node parentType\n         * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n         * @property {number|null} [startTime] Node startTime\n         * @property {number|null} [endTime] Node endTime\n         * @property {Array.<Trace.IError>|null} [error] Node error\n         * @property {Array.<Trace.INode>|null} [child] Node child\n         */\n\n        /**\n         * Constructs a new Node.\n         * @memberof Trace\n         * @classdesc Represents a Node.\n         * @implements INode\n         * @constructor\n         * @param {Trace.INode=} [properties] Properties to set\n         */\n        function Node(properties) {\n            this.error = [];\n            this.child = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Node responseName.\n         * @member {string} responseName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.responseName = \"\";\n\n        /**\n         * Node index.\n         * @member {number} index\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.index = 0;\n\n        /**\n         * Node originalFieldName.\n         * @member {string} originalFieldName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.originalFieldName = \"\";\n\n        /**\n         * Node type.\n         * @member {string} type\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.type = \"\";\n\n        /**\n         * Node parentType.\n         * @member {string} parentType\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.parentType = \"\";\n\n        /**\n         * Node cachePolicy.\n         * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.cachePolicy = null;\n\n        /**\n         * Node startTime.\n         * @member {number} startTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Node endTime.\n         * @member {number} endTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Node error.\n         * @member {Array.<Trace.IError>} error\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.error = $util.emptyArray;\n\n        /**\n         * Node child.\n         * @member {Array.<Trace.INode>} child\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.child = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Node id.\n         * @member {\"responseName\"|\"index\"|undefined} id\n         * @memberof Trace.Node\n         * @instance\n         */\n        Object.defineProperty(Node.prototype, \"id\", {\n            get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Node instance using the specified properties.\n         * @function create\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode=} [properties] Properties to set\n         * @returns {Trace.Node} Node instance\n         */\n        Node.create = function create(properties) {\n            return new Node(properties);\n        };\n\n        /**\n         * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseName);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n            if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n                $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.startTime);\n            if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.endTime);\n            if (message.error != null && message.error.length)\n                for (var i = 0; i < message.error.length; ++i)\n                    $root.Trace.Error.encode(message.error[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.child != null && message.child.length)\n                for (var i = 0; i < message.child.length; ++i)\n                    $root.Trace.Node.encode(message.child[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.parentType);\n            if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.originalFieldName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Node();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.responseName = reader.string();\n                    break;\n                case 2:\n                    message.index = reader.uint32();\n                    break;\n                case 14:\n                    message.originalFieldName = reader.string();\n                    break;\n                case 3:\n                    message.type = reader.string();\n                    break;\n                case 13:\n                    message.parentType = reader.string();\n                    break;\n                case 5:\n                    message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.startTime = reader.uint64();\n                    break;\n                case 9:\n                    message.endTime = reader.uint64();\n                    break;\n                case 11:\n                    if (!(message.error && message.error.length))\n                        message.error = [];\n                    message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.child && message.child.length))\n                        message.child = [];\n                    message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Node message.\n         * @function verify\n         * @memberof Trace.Node\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Node.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                properties.id = 1;\n                if (!$util.isString(message.responseName))\n                    return \"responseName: string expected\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                if (properties.id === 1)\n                    return \"id: multiple values\";\n                properties.id = 1;\n                if (!$util.isInteger(message.index))\n                    return \"index: integer expected\";\n            }\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                if (!$util.isString(message.originalFieldName))\n                    return \"originalFieldName: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                if (!$util.isString(message.parentType))\n                    return \"parentType: string expected\";\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n                var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n                if (error)\n                    return \"cachePolicy.\" + error;\n            }\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))\n                    return \"startTime: integer|Long expected\";\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))\n                    return \"endTime: integer|Long expected\";\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                if (!Array.isArray(message.error))\n                    return \"error: array expected\";\n                for (var i = 0; i < message.error.length; ++i) {\n                    var error = $root.Trace.Error.verify(message.error[i]);\n                    if (error)\n                        return \"error.\" + error;\n                }\n            }\n            if (message.child != null && message.hasOwnProperty(\"child\")) {\n                if (!Array.isArray(message.child))\n                    return \"child: array expected\";\n                for (var i = 0; i < message.child.length; ++i) {\n                    var error = $root.Trace.Node.verify(message.child[i]);\n                    if (error)\n                        return \"child.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Node message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.Node} message Node\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Node.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.error = [];\n                object.child = [];\n            }\n            if (options.defaults) {\n                object.type = \"\";\n                object.cachePolicy = null;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.startTime = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.endTime = options.longs === String ? \"0\" : 0;\n                object.parentType = \"\";\n                object.originalFieldName = \"\";\n            }\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                object.responseName = message.responseName;\n                if (options.oneofs)\n                    object.id = \"responseName\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                object.index = message.index;\n                if (options.oneofs)\n                    object.id = \"index\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n                object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (typeof message.startTime === \"number\")\n                    object.startTime = options.longs === String ? String(message.startTime) : message.startTime;\n                else\n                    object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (typeof message.endTime === \"number\")\n                    object.endTime = options.longs === String ? String(message.endTime) : message.endTime;\n                else\n                    object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n            if (message.error && message.error.length) {\n                object.error = [];\n                for (var j = 0; j < message.error.length; ++j)\n                    object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n            }\n            if (message.child && message.child.length) {\n                object.child = [];\n                for (var j = 0; j < message.child.length; ++j)\n                    object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n            }\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                object.parentType = message.parentType;\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                object.originalFieldName = message.originalFieldName;\n            return object;\n        };\n\n        /**\n         * Converts this Node to JSON.\n         * @function toJSON\n         * @memberof Trace.Node\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Node.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Node;\n    })();\n\n    Trace.QueryPlanNode = (function() {\n\n        /**\n         * Properties of a QueryPlanNode.\n         * @memberof Trace\n         * @interface IQueryPlanNode\n         * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n         * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n         * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n         * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n         */\n\n        /**\n         * Constructs a new QueryPlanNode.\n         * @memberof Trace\n         * @classdesc Represents a QueryPlanNode.\n         * @implements IQueryPlanNode\n         * @constructor\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         */\n        function QueryPlanNode(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * QueryPlanNode sequence.\n         * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.sequence = null;\n\n        /**\n         * QueryPlanNode parallel.\n         * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.parallel = null;\n\n        /**\n         * QueryPlanNode fetch.\n         * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.fetch = null;\n\n        /**\n         * QueryPlanNode flatten.\n         * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.flatten = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * QueryPlanNode node.\n         * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|undefined} node\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new QueryPlanNode instance using the specified properties.\n         * @function create\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n         */\n        QueryPlanNode.create = function create(properties) {\n            return new QueryPlanNode(properties);\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\"))\n                $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\"))\n                $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\"))\n                $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\"))\n                $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a QueryPlanNode message.\n         * @function verify\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        QueryPlanNode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n                    if (error)\n                        return \"sequence.\" + error;\n                }\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n                    if (error)\n                        return \"parallel.\" + error;\n                }\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n                    if (error)\n                        return \"fetch.\" + error;\n                }\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n                    if (error)\n                        return \"flatten.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.QueryPlanNode} message QueryPlanNode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        QueryPlanNode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n                if (options.oneofs)\n                    object.node = \"sequence\";\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n                if (options.oneofs)\n                    object.node = \"parallel\";\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n                if (options.oneofs)\n                    object.node = \"fetch\";\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n                if (options.oneofs)\n                    object.node = \"flatten\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this QueryPlanNode to JSON.\n         * @function toJSON\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        QueryPlanNode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        QueryPlanNode.SequenceNode = (function() {\n\n            /**\n             * Properties of a SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface ISequenceNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n             */\n\n            /**\n             * Constructs a new SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a SequenceNode.\n             * @implements ISequenceNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             */\n            function SequenceNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             */\n            SequenceNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n             */\n            SequenceNode.create = function create(properties) {\n                return new SequenceNode(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.SequenceNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SequenceNode;\n        })();\n\n        QueryPlanNode.ParallelNode = (function() {\n\n            /**\n             * Properties of a ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IParallelNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n             */\n\n            /**\n             * Constructs a new ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ParallelNode.\n             * @implements IParallelNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             */\n            function ParallelNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ParallelNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             */\n            ParallelNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new ParallelNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n             */\n            ParallelNode.create = function create(properties) {\n                return new ParallelNode(properties);\n            };\n\n            /**\n             * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ParallelNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ParallelNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ParallelNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ParallelNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ParallelNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ParallelNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ParallelNode;\n        })();\n\n        QueryPlanNode.FetchNode = (function() {\n\n            /**\n             * Properties of a FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFetchNode\n             * @property {string|null} [serviceName] FetchNode serviceName\n             * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n             * @property {ITrace|null} [trace] FetchNode trace\n             * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n             * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n             * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n             */\n\n            /**\n             * Constructs a new FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FetchNode.\n             * @implements IFetchNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             */\n            function FetchNode(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FetchNode serviceName.\n             * @member {string} serviceName\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.serviceName = \"\";\n\n            /**\n             * FetchNode traceParsingFailed.\n             * @member {boolean} traceParsingFailed\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.traceParsingFailed = false;\n\n            /**\n             * FetchNode trace.\n             * @member {ITrace|null|undefined} trace\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.trace = null;\n\n            /**\n             * FetchNode sentTimeOffset.\n             * @member {number} sentTimeOffset\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTimeOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * FetchNode sentTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTime = null;\n\n            /**\n             * FetchNode receivedTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.receivedTime = null;\n\n            /**\n             * Creates a new FetchNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n             */\n            FetchNode.create = function create(properties) {\n                return new FetchNode(properties);\n            };\n\n            /**\n             * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);\n                if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.traceParsingFailed);\n                if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\"))\n                    $root.Trace.encode(message.trace, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sentTimeOffset);\n                if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FetchNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.serviceName = reader.string();\n                        break;\n                    case 2:\n                        message.traceParsingFailed = reader.bool();\n                        break;\n                    case 3:\n                        message.trace = $root.Trace.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        message.sentTimeOffset = reader.uint64();\n                        break;\n                    case 5:\n                        message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    case 6:\n                        message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FetchNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FetchNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    if (!$util.isString(message.serviceName))\n                        return \"serviceName: string expected\";\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    if (typeof message.traceParsingFailed !== \"boolean\")\n                        return \"traceParsingFailed: boolean expected\";\n                if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n                    var error = $root.Trace.verify(message.trace);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high)))\n                        return \"sentTimeOffset: integer|Long expected\";\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n                    if (error)\n                        return \"sentTime.\" + error;\n                }\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n                    if (error)\n                        return \"receivedTime.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FetchNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.serviceName = \"\";\n                    object.traceParsingFailed = false;\n                    object.trace = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.sentTimeOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.sentTimeOffset = options.longs === String ? \"0\" : 0;\n                    object.sentTime = null;\n                    object.receivedTime = null;\n                }\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    object.serviceName = message.serviceName;\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    object.traceParsingFailed = message.traceParsingFailed;\n                if (message.trace != null && message.hasOwnProperty(\"trace\"))\n                    object.trace = $root.Trace.toObject(message.trace, options);\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (typeof message.sentTimeOffset === \"number\")\n                        object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;\n                    else\n                        object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\"))\n                    object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\"))\n                    object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n                return object;\n            };\n\n            /**\n             * Converts this FetchNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FetchNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FetchNode;\n        })();\n\n        QueryPlanNode.FlattenNode = (function() {\n\n            /**\n             * Properties of a FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFlattenNode\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n             * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n             */\n\n            /**\n             * Constructs a new FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FlattenNode.\n             * @implements IFlattenNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             */\n            function FlattenNode(properties) {\n                this.responsePath = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FlattenNode responsePath.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.responsePath = $util.emptyArray;\n\n            /**\n             * FlattenNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.node = null;\n\n            /**\n             * Creates a new FlattenNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n             */\n            FlattenNode.create = function create(properties) {\n                return new FlattenNode(properties);\n            };\n\n            /**\n             * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.responsePath != null && message.responsePath.length)\n                    for (var i = 0; i < message.responsePath.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FlattenNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.responsePath && message.responsePath.length))\n                            message.responsePath = [];\n                        message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FlattenNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FlattenNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n                    if (!Array.isArray(message.responsePath))\n                        return \"responsePath: array expected\";\n                    for (var i = 0; i < message.responsePath.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n                        if (error)\n                            return \"responsePath.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FlattenNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.responsePath = [];\n                if (options.defaults)\n                    object.node = null;\n                if (message.responsePath && message.responsePath.length) {\n                    object.responsePath = [];\n                    for (var j = 0; j < message.responsePath.length; ++j)\n                        object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this FlattenNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FlattenNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FlattenNode;\n        })();\n\n        QueryPlanNode.ResponsePathElement = (function() {\n\n            /**\n             * Properties of a ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @interface IResponsePathElement\n             * @property {string|null} [fieldName] ResponsePathElement fieldName\n             * @property {number|null} [index] ResponsePathElement index\n             */\n\n            /**\n             * Constructs a new ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ResponsePathElement.\n             * @implements IResponsePathElement\n             * @constructor\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             */\n            function ResponsePathElement(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ResponsePathElement fieldName.\n             * @member {string} fieldName\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.fieldName = \"\";\n\n            /**\n             * ResponsePathElement index.\n             * @member {number} index\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.index = 0;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ResponsePathElement id.\n             * @member {\"fieldName\"|\"index\"|undefined} id\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n                get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ResponsePathElement instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n             */\n            ResponsePathElement.create = function create(properties) {\n                return new ResponsePathElement(properties);\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldName);\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.fieldName = reader.string();\n                        break;\n                    case 2:\n                        message.index = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ResponsePathElement message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ResponsePathElement.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    properties.id = 1;\n                    if (!$util.isString(message.fieldName))\n                        return \"fieldName: string expected\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    if (properties.id === 1)\n                        return \"id: multiple values\";\n                    properties.id = 1;\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ResponsePathElement.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    object.fieldName = message.fieldName;\n                    if (options.oneofs)\n                        object.id = \"fieldName\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    object.index = message.index;\n                    if (options.oneofs)\n                        object.id = \"index\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ResponsePathElement to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ResponsePathElement.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ResponsePathElement;\n        })();\n\n        return QueryPlanNode;\n    })();\n\n    return Trace;\n})();\n\n$root.ReportHeader = (function() {\n\n    /**\n     * Properties of a ReportHeader.\n     * @exports IReportHeader\n     * @interface IReportHeader\n     * @property {string|null} [graphRef] ReportHeader graphRef\n     * @property {string|null} [hostname] ReportHeader hostname\n     * @property {string|null} [agentVersion] ReportHeader agentVersion\n     * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n     * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n     * @property {string|null} [uname] ReportHeader uname\n     * @property {string|null} [executableSchemaId] ReportHeader executableSchemaId\n     */\n\n    /**\n     * Constructs a new ReportHeader.\n     * @exports ReportHeader\n     * @classdesc Represents a ReportHeader.\n     * @implements IReportHeader\n     * @constructor\n     * @param {IReportHeader=} [properties] Properties to set\n     */\n    function ReportHeader(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportHeader graphRef.\n     * @member {string} graphRef\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.graphRef = \"\";\n\n    /**\n     * ReportHeader hostname.\n     * @member {string} hostname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.hostname = \"\";\n\n    /**\n     * ReportHeader agentVersion.\n     * @member {string} agentVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.agentVersion = \"\";\n\n    /**\n     * ReportHeader serviceVersion.\n     * @member {string} serviceVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.serviceVersion = \"\";\n\n    /**\n     * ReportHeader runtimeVersion.\n     * @member {string} runtimeVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.runtimeVersion = \"\";\n\n    /**\n     * ReportHeader uname.\n     * @member {string} uname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.uname = \"\";\n\n    /**\n     * ReportHeader executableSchemaId.\n     * @member {string} executableSchemaId\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.executableSchemaId = \"\";\n\n    /**\n     * Creates a new ReportHeader instance using the specified properties.\n     * @function create\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader=} [properties] Properties to set\n     * @returns {ReportHeader} ReportHeader instance\n     */\n    ReportHeader.create = function create(properties) {\n        return new ReportHeader(properties);\n    };\n\n    /**\n     * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encode\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.hostname);\n        if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.agentVersion);\n        if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.serviceVersion);\n        if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.runtimeVersion);\n        if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.uname);\n        if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, \"executableSchemaId\"))\n            writer.uint32(/* id 11, wireType 2 =*/90).string(message.executableSchemaId);\n        if (message.graphRef != null && Object.hasOwnProperty.call(message, \"graphRef\"))\n            writer.uint32(/* id 12, wireType 2 =*/98).string(message.graphRef);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportHeader();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 12:\n                message.graphRef = reader.string();\n                break;\n            case 5:\n                message.hostname = reader.string();\n                break;\n            case 6:\n                message.agentVersion = reader.string();\n                break;\n            case 7:\n                message.serviceVersion = reader.string();\n                break;\n            case 8:\n                message.runtimeVersion = reader.string();\n                break;\n            case 9:\n                message.uname = reader.string();\n                break;\n            case 11:\n                message.executableSchemaId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportHeader message.\n     * @function verify\n     * @memberof ReportHeader\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportHeader.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            if (!$util.isString(message.graphRef))\n                return \"graphRef: string expected\";\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            if (!$util.isString(message.hostname))\n                return \"hostname: string expected\";\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            if (!$util.isString(message.agentVersion))\n                return \"agentVersion: string expected\";\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            if (!$util.isString(message.serviceVersion))\n                return \"serviceVersion: string expected\";\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            if (!$util.isString(message.runtimeVersion))\n                return \"runtimeVersion: string expected\";\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            if (!$util.isString(message.uname))\n                return \"uname: string expected\";\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            if (!$util.isString(message.executableSchemaId))\n                return \"executableSchemaId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportHeader\n     * @static\n     * @param {ReportHeader} message ReportHeader\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportHeader.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.hostname = \"\";\n            object.agentVersion = \"\";\n            object.serviceVersion = \"\";\n            object.runtimeVersion = \"\";\n            object.uname = \"\";\n            object.executableSchemaId = \"\";\n            object.graphRef = \"\";\n        }\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            object.hostname = message.hostname;\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            object.agentVersion = message.agentVersion;\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            object.serviceVersion = message.serviceVersion;\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            object.runtimeVersion = message.runtimeVersion;\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            object.uname = message.uname;\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            object.executableSchemaId = message.executableSchemaId;\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            object.graphRef = message.graphRef;\n        return object;\n    };\n\n    /**\n     * Converts this ReportHeader to JSON.\n     * @function toJSON\n     * @memberof ReportHeader\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportHeader.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportHeader;\n})();\n\n$root.PathErrorStats = (function() {\n\n    /**\n     * Properties of a PathErrorStats.\n     * @exports IPathErrorStats\n     * @interface IPathErrorStats\n     * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n     * @property {number|null} [errorsCount] PathErrorStats errorsCount\n     * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n     */\n\n    /**\n     * Constructs a new PathErrorStats.\n     * @exports PathErrorStats\n     * @classdesc Represents a PathErrorStats.\n     * @implements IPathErrorStats\n     * @constructor\n     * @param {IPathErrorStats=} [properties] Properties to set\n     */\n    function PathErrorStats(properties) {\n        this.children = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PathErrorStats children.\n     * @member {Object.<string,IPathErrorStats>} children\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.children = $util.emptyObject;\n\n    /**\n     * PathErrorStats errorsCount.\n     * @member {number} errorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * PathErrorStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new PathErrorStats instance using the specified properties.\n     * @function create\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats=} [properties] Properties to set\n     * @returns {PathErrorStats} PathErrorStats instance\n     */\n    PathErrorStats.create = function create(properties) {\n        return new PathErrorStats(properties);\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encode\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.requestsWithErrorsCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PathErrorStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                reader.skip().pos++;\n                if (message.children === $util.emptyObject)\n                    message.children = {};\n                key = reader.string();\n                reader.pos++;\n                message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PathErrorStats message.\n     * @function verify\n     * @memberof PathErrorStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PathErrorStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\")) {\n            if (!$util.isObject(message.children))\n                return \"children: object expected\";\n            var key = Object.keys(message.children);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.PathErrorStats.verify(message.children[key[i]]);\n                if (error)\n                    return \"children.\" + error;\n            }\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PathErrorStats\n     * @static\n     * @param {PathErrorStats} message PathErrorStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PathErrorStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.children = {};\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.errorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n        }\n        var keys2;\n        if (message.children && (keys2 = Object.keys(message.children)).length) {\n            object.children = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        return object;\n    };\n\n    /**\n     * Converts this PathErrorStats to JSON.\n     * @function toJSON\n     * @memberof PathErrorStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PathErrorStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PathErrorStats;\n})();\n\n$root.QueryLatencyStats = (function() {\n\n    /**\n     * Properties of a QueryLatencyStats.\n     * @exports IQueryLatencyStats\n     * @interface IQueryLatencyStats\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n     * @property {number|null} [requestCount] QueryLatencyStats requestCount\n     * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n     * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n     * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n     * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n     * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n     * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n     * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n     * @property {number|null} [requestsWithoutFieldInstrumentation] QueryLatencyStats requestsWithoutFieldInstrumentation\n     */\n\n    /**\n     * Constructs a new QueryLatencyStats.\n     * @exports QueryLatencyStats\n     * @classdesc Represents a QueryLatencyStats.\n     * @implements IQueryLatencyStats\n     * @constructor\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     */\n    function QueryLatencyStats(properties) {\n        this.latencyCount = [];\n        this.cacheLatencyCount = [];\n        this.publicCacheTtlCount = [];\n        this.privateCacheTtlCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * QueryLatencyStats latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats requestCount.\n     * @member {number} requestCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats cacheHits.\n     * @member {number} cacheHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheHits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats persistedQueryHits.\n     * @member {number} persistedQueryHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryHits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats persistedQueryMisses.\n     * @member {number} persistedQueryMisses\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryMisses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats cacheLatencyCount.\n     * @member {Array.<number>} cacheLatencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats rootErrorStats.\n     * @member {IPathErrorStats|null|undefined} rootErrorStats\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.rootErrorStats = null;\n\n    /**\n     * QueryLatencyStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats publicCacheTtlCount.\n     * @member {Array.<number>} publicCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats privateCacheTtlCount.\n     * @member {Array.<number>} privateCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats registeredOperationCount.\n     * @member {number} registeredOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.registeredOperationCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats forbiddenOperationCount.\n     * @member {number} forbiddenOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.forbiddenOperationCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats requestsWithoutFieldInstrumentation.\n     * @member {number} requestsWithoutFieldInstrumentation\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithoutFieldInstrumentation = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new QueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     * @returns {QueryLatencyStats} QueryLatencyStats instance\n     */\n    QueryLatencyStats.create = function create(properties) {\n        return new QueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.requestCount);\n        if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.cacheHits);\n        if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.persistedQueryHits);\n        if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.persistedQueryMisses);\n        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\"))\n            $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.requestsWithErrorsCount);\n        if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.registeredOperationCount);\n        if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.forbiddenOperationCount);\n        var array13;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array13 = message.latencyCount.toArray();\n        else\n            array13 = message.latencyCount;\n        if (array13 != null && array13.length) {\n            writer.uint32(/* id 13, wireType 2 =*/106).fork();\n            for (var i = 0; i < array13.length; ++i)\n                writer.sint64(array13[i]);\n            writer.ldelim();\n        }\n        var array14;\n        if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n            array14 = message.cacheLatencyCount.toArray();\n        else\n            array14 = message.cacheLatencyCount;\n        if (array14 != null && array14.length) {\n            writer.uint32(/* id 14, wireType 2 =*/114).fork();\n            for (var i = 0; i < array14.length; ++i)\n                writer.sint64(array14[i]);\n            writer.ldelim();\n        }\n        var array15;\n        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n            array15 = message.publicCacheTtlCount.toArray();\n        else\n            array15 = message.publicCacheTtlCount;\n        if (array15 != null && array15.length) {\n            writer.uint32(/* id 15, wireType 2 =*/122).fork();\n            for (var i = 0; i < array15.length; ++i)\n                writer.sint64(array15[i]);\n            writer.ldelim();\n        }\n        var array16;\n        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n            array16 = message.privateCacheTtlCount.toArray();\n        else\n            array16 = message.privateCacheTtlCount;\n        if (array16 != null && array16.length) {\n            writer.uint32(/* id 16, wireType 2 =*/130).fork();\n            for (var i = 0; i < array16.length; ++i)\n                writer.sint64(array16[i]);\n            writer.ldelim();\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && Object.hasOwnProperty.call(message, \"requestsWithoutFieldInstrumentation\"))\n            writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.requestsWithoutFieldInstrumentation);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.QueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 13:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            case 2:\n                message.requestCount = reader.uint64();\n                break;\n            case 3:\n                message.cacheHits = reader.uint64();\n                break;\n            case 4:\n                message.persistedQueryHits = reader.uint64();\n                break;\n            case 5:\n                message.persistedQueryMisses = reader.uint64();\n                break;\n            case 14:\n                if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))\n                    message.cacheLatencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.cacheLatencyCount.push(reader.sint64());\n                } else\n                    message.cacheLatencyCount.push(reader.sint64());\n                break;\n            case 7:\n                message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 15:\n                if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))\n                    message.publicCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.publicCacheTtlCount.push(reader.sint64());\n                } else\n                    message.publicCacheTtlCount.push(reader.sint64());\n                break;\n            case 16:\n                if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))\n                    message.privateCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.privateCacheTtlCount.push(reader.sint64());\n                } else\n                    message.privateCacheTtlCount.push(reader.sint64());\n                break;\n            case 11:\n                message.registeredOperationCount = reader.uint64();\n                break;\n            case 12:\n                message.forbiddenOperationCount = reader.uint64();\n                break;\n            case 17:\n                message.requestsWithoutFieldInstrumentation = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a QueryLatencyStats message.\n     * @function verify\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    QueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            var array13;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array13 = message.latencyCount.toArray();\n            else\n                array13 = message.latencyCount;\n            if (!Array.isArray(array13))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < array13.length; ++i)\n                if (!$util.isInteger(array13[i]) && !(array13[i] && $util.isInteger(array13[i].low) && $util.isInteger(array13[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high)))\n                return \"requestCount: integer|Long expected\";\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high)))\n                return \"cacheHits: integer|Long expected\";\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high)))\n                return \"persistedQueryHits: integer|Long expected\";\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high)))\n                return \"persistedQueryMisses: integer|Long expected\";\n        if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n            var array14;\n            if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n                array14 = message.cacheLatencyCount.toArray();\n            else\n                array14 = message.cacheLatencyCount;\n            if (!Array.isArray(array14))\n                return \"cacheLatencyCount: array expected\";\n            for (var i = 0; i < array14.length; ++i)\n                if (!$util.isInteger(array14[i]) && !(array14[i] && $util.isInteger(array14[i].low) && $util.isInteger(array14[i].high)))\n                    return \"cacheLatencyCount: integer|Long[] expected\";\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n            var error = $root.PathErrorStats.verify(message.rootErrorStats);\n            if (error)\n                return \"rootErrorStats.\" + error;\n        }\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n            var array15;\n            if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n                array15 = message.publicCacheTtlCount.toArray();\n            else\n                array15 = message.publicCacheTtlCount;\n            if (!Array.isArray(array15))\n                return \"publicCacheTtlCount: array expected\";\n            for (var i = 0; i < array15.length; ++i)\n                if (!$util.isInteger(array15[i]) && !(array15[i] && $util.isInteger(array15[i].low) && $util.isInteger(array15[i].high)))\n                    return \"publicCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n            var array16;\n            if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n                array16 = message.privateCacheTtlCount.toArray();\n            else\n                array16 = message.privateCacheTtlCount;\n            if (!Array.isArray(array16))\n                return \"privateCacheTtlCount: array expected\";\n            for (var i = 0; i < array16.length; ++i)\n                if (!$util.isInteger(array16[i]) && !(array16[i] && $util.isInteger(array16[i].low) && $util.isInteger(array16[i].high)))\n                    return \"privateCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high)))\n                return \"registeredOperationCount: integer|Long expected\";\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high)))\n                return \"forbiddenOperationCount: integer|Long expected\";\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (!$util.isInteger(message.requestsWithoutFieldInstrumentation) && !(message.requestsWithoutFieldInstrumentation && $util.isInteger(message.requestsWithoutFieldInstrumentation.low) && $util.isInteger(message.requestsWithoutFieldInstrumentation.high)))\n                return \"requestsWithoutFieldInstrumentation: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {QueryLatencyStats} message QueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    QueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.latencyCount = [];\n            object.cacheLatencyCount = [];\n            object.publicCacheTtlCount = [];\n            object.privateCacheTtlCount = [];\n        }\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.cacheHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.cacheHits = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.persistedQueryHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.persistedQueryHits = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.persistedQueryMisses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.persistedQueryMisses = options.longs === String ? \"0\" : 0;\n            object.rootErrorStats = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.registeredOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.registeredOperationCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.forbiddenOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.forbiddenOperationCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? \"0\" : 0;\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (typeof message.requestCount === \"number\")\n                object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;\n            else\n                object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (typeof message.cacheHits === \"number\")\n                object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;\n            else\n                object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (typeof message.persistedQueryHits === \"number\")\n                object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;\n            else\n                object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (typeof message.persistedQueryMisses === \"number\")\n                object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;\n            else\n                object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\"))\n            object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (typeof message.registeredOperationCount === \"number\")\n                object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;\n            else\n                object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (typeof message.forbiddenOperationCount === \"number\")\n                object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;\n            else\n                object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n            object.cacheLatencyCount = [];\n            for (var j = 0; j < message.cacheLatencyCount.length; ++j)\n                if (typeof message.cacheLatencyCount[j] === \"number\")\n                    object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];\n                else\n                    object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n        }\n        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n            object.publicCacheTtlCount = [];\n            for (var j = 0; j < message.publicCacheTtlCount.length; ++j)\n                if (typeof message.publicCacheTtlCount[j] === \"number\")\n                    object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];\n                else\n                    object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n        }\n        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n            object.privateCacheTtlCount = [];\n            for (var j = 0; j < message.privateCacheTtlCount.length; ++j)\n                if (typeof message.privateCacheTtlCount[j] === \"number\")\n                    object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];\n                else\n                    object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (typeof message.requestsWithoutFieldInstrumentation === \"number\")\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? String(message.requestsWithoutFieldInstrumentation) : message.requestsWithoutFieldInstrumentation;\n            else\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithoutFieldInstrumentation) : options.longs === Number ? new $util.LongBits(message.requestsWithoutFieldInstrumentation.low >>> 0, message.requestsWithoutFieldInstrumentation.high >>> 0).toNumber(true) : message.requestsWithoutFieldInstrumentation;\n        return object;\n    };\n\n    /**\n     * Converts this QueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof QueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    QueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return QueryLatencyStats;\n})();\n\n$root.StatsContext = (function() {\n\n    /**\n     * Properties of a StatsContext.\n     * @exports IStatsContext\n     * @interface IStatsContext\n     * @property {string|null} [clientName] StatsContext clientName\n     * @property {string|null} [clientVersion] StatsContext clientVersion\n     */\n\n    /**\n     * Constructs a new StatsContext.\n     * @exports StatsContext\n     * @classdesc Represents a StatsContext.\n     * @implements IStatsContext\n     * @constructor\n     * @param {IStatsContext=} [properties] Properties to set\n     */\n    function StatsContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StatsContext clientName.\n     * @member {string} clientName\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientName = \"\";\n\n    /**\n     * StatsContext clientVersion.\n     * @member {string} clientVersion\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientVersion = \"\";\n\n    /**\n     * Creates a new StatsContext instance using the specified properties.\n     * @function create\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext=} [properties] Properties to set\n     * @returns {StatsContext} StatsContext instance\n     */\n    StatsContext.create = function create(properties) {\n        return new StatsContext(properties);\n    };\n\n    /**\n     * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encode\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.clientVersion);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StatsContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.clientName = reader.string();\n                break;\n            case 3:\n                message.clientVersion = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StatsContext message.\n     * @function verify\n     * @memberof StatsContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StatsContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StatsContext\n     * @static\n     * @param {StatsContext} message StatsContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StatsContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        return object;\n    };\n\n    /**\n     * Converts this StatsContext to JSON.\n     * @function toJSON\n     * @memberof StatsContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StatsContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return StatsContext;\n})();\n\n$root.ContextualizedQueryLatencyStats = (function() {\n\n    /**\n     * Properties of a ContextualizedQueryLatencyStats.\n     * @exports IContextualizedQueryLatencyStats\n     * @interface IContextualizedQueryLatencyStats\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n     * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n     */\n\n    /**\n     * Constructs a new ContextualizedQueryLatencyStats.\n     * @exports ContextualizedQueryLatencyStats\n     * @classdesc Represents a ContextualizedQueryLatencyStats.\n     * @implements IContextualizedQueryLatencyStats\n     * @constructor\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     */\n    function ContextualizedQueryLatencyStats(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedQueryLatencyStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedQueryLatencyStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.context = null;\n\n    /**\n     * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n     */\n    ContextualizedQueryLatencyStats.create = function create(properties) {\n        return new ContextualizedQueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedQueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedQueryLatencyStats message.\n     * @function verify\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedQueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.queryLatencyStats = null;\n            object.context = null;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedQueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedQueryLatencyStats;\n})();\n\n$root.ContextualizedTypeStats = (function() {\n\n    /**\n     * Properties of a ContextualizedTypeStats.\n     * @exports IContextualizedTypeStats\n     * @interface IContextualizedTypeStats\n     * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedTypeStats.\n     * @exports ContextualizedTypeStats\n     * @classdesc Represents a ContextualizedTypeStats.\n     * @implements IContextualizedTypeStats\n     * @constructor\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     */\n    function ContextualizedTypeStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedTypeStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.context = null;\n\n    /**\n     * ContextualizedTypeStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedTypeStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n     */\n    ContextualizedTypeStats.create = function create(properties) {\n        return new ContextualizedTypeStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedTypeStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedTypeStats message.\n     * @function verify\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedTypeStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedTypeStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults)\n            object.context = null;\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        var keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedTypeStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedTypeStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedTypeStats;\n})();\n\n$root.FieldStat = (function() {\n\n    /**\n     * Properties of a FieldStat.\n     * @exports IFieldStat\n     * @interface IFieldStat\n     * @property {string|null} [returnType] FieldStat returnType\n     * @property {number|null} [errorsCount] FieldStat errorsCount\n     * @property {number|null} [observedExecutionCount] FieldStat observedExecutionCount\n     * @property {number|null} [estimatedExecutionCount] FieldStat estimatedExecutionCount\n     * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] FieldStat latencyCount\n     */\n\n    /**\n     * Constructs a new FieldStat.\n     * @exports FieldStat\n     * @classdesc Represents a FieldStat.\n     * @implements IFieldStat\n     * @constructor\n     * @param {IFieldStat=} [properties] Properties to set\n     */\n    function FieldStat(properties) {\n        this.latencyCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FieldStat returnType.\n     * @member {string} returnType\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.returnType = \"\";\n\n    /**\n     * FieldStat errorsCount.\n     * @member {number} errorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat observedExecutionCount.\n     * @member {number} observedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.observedExecutionCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat estimatedExecutionCount.\n     * @member {number} estimatedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.estimatedExecutionCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * Creates a new FieldStat instance using the specified properties.\n     * @function create\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat=} [properties] Properties to set\n     * @returns {FieldStat} FieldStat instance\n     */\n    FieldStat.create = function create(properties) {\n        return new FieldStat(properties);\n    };\n\n    /**\n     * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encode\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.returnType);\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.observedExecutionCount != null && Object.hasOwnProperty.call(message, \"observedExecutionCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.observedExecutionCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.requestsWithErrorsCount);\n        var array9;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array9 = message.latencyCount.toArray();\n        else\n            array9 = message.latencyCount;\n        if (array9 != null && array9.length) {\n            writer.uint32(/* id 9, wireType 2 =*/74).fork();\n            for (var i = 0; i < array9.length; ++i)\n                writer.sint64(array9[i]);\n            writer.ldelim();\n        }\n        if (message.estimatedExecutionCount != null && Object.hasOwnProperty.call(message, \"estimatedExecutionCount\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.estimatedExecutionCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FieldStat();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                message.returnType = reader.string();\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.observedExecutionCount = reader.uint64();\n                break;\n            case 10:\n                message.estimatedExecutionCount = reader.uint64();\n                break;\n            case 6:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 9:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FieldStat message.\n     * @function verify\n     * @memberof FieldStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FieldStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (!$util.isInteger(message.observedExecutionCount) && !(message.observedExecutionCount && $util.isInteger(message.observedExecutionCount.low) && $util.isInteger(message.observedExecutionCount.high)))\n                return \"observedExecutionCount: integer|Long expected\";\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (!$util.isInteger(message.estimatedExecutionCount) && !(message.estimatedExecutionCount && $util.isInteger(message.estimatedExecutionCount.low) && $util.isInteger(message.estimatedExecutionCount.high)))\n                return \"estimatedExecutionCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            var array9;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array9 = message.latencyCount.toArray();\n            else\n                array9 = message.latencyCount;\n            if (!Array.isArray(array9))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < array9.length; ++i)\n                if (!$util.isInteger(array9[i]) && !(array9[i] && $util.isInteger(array9[i].low) && $util.isInteger(array9[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FieldStat\n     * @static\n     * @param {FieldStat} message FieldStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FieldStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.latencyCount = [];\n        if (options.defaults) {\n            object.returnType = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.errorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.observedExecutionCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.observedExecutionCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.estimatedExecutionCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.estimatedExecutionCount = options.longs === String ? \"0\" : 0;\n        }\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (typeof message.observedExecutionCount === \"number\")\n                object.observedExecutionCount = options.longs === String ? String(message.observedExecutionCount) : message.observedExecutionCount;\n            else\n                object.observedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.observedExecutionCount) : options.longs === Number ? new $util.LongBits(message.observedExecutionCount.low >>> 0, message.observedExecutionCount.high >>> 0).toNumber(true) : message.observedExecutionCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (typeof message.estimatedExecutionCount === \"number\")\n                object.estimatedExecutionCount = options.longs === String ? String(message.estimatedExecutionCount) : message.estimatedExecutionCount;\n            else\n                object.estimatedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.estimatedExecutionCount) : options.longs === Number ? new $util.LongBits(message.estimatedExecutionCount.low >>> 0, message.estimatedExecutionCount.high >>> 0).toNumber(true) : message.estimatedExecutionCount;\n        return object;\n    };\n\n    /**\n     * Converts this FieldStat to JSON.\n     * @function toJSON\n     * @memberof FieldStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FieldStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FieldStat;\n})();\n\n$root.TypeStat = (function() {\n\n    /**\n     * Properties of a TypeStat.\n     * @exports ITypeStat\n     * @interface ITypeStat\n     * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n     */\n\n    /**\n     * Constructs a new TypeStat.\n     * @exports TypeStat\n     * @classdesc Represents a TypeStat.\n     * @implements ITypeStat\n     * @constructor\n     * @param {ITypeStat=} [properties] Properties to set\n     */\n    function TypeStat(properties) {\n        this.perFieldStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TypeStat perFieldStat.\n     * @member {Object.<string,IFieldStat>} perFieldStat\n     * @memberof TypeStat\n     * @instance\n     */\n    TypeStat.prototype.perFieldStat = $util.emptyObject;\n\n    /**\n     * Creates a new TypeStat instance using the specified properties.\n     * @function create\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat=} [properties] Properties to set\n     * @returns {TypeStat} TypeStat instance\n     */\n    TypeStat.create = function create(properties) {\n        return new TypeStat(properties);\n    };\n\n    /**\n     * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encode\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\"))\n            for (var keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TypeStat(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                reader.skip().pos++;\n                if (message.perFieldStat === $util.emptyObject)\n                    message.perFieldStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TypeStat message.\n     * @function verify\n     * @memberof TypeStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n            if (!$util.isObject(message.perFieldStat))\n                return \"perFieldStat: object expected\";\n            var key = Object.keys(message.perFieldStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n                if (error)\n                    return \"perFieldStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TypeStat\n     * @static\n     * @param {TypeStat} message TypeStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perFieldStat = {};\n        var keys2;\n        if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n            object.perFieldStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TypeStat to JSON.\n     * @function toJSON\n     * @memberof TypeStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TypeStat;\n})();\n\n$root.ReferencedFieldsForType = (function() {\n\n    /**\n     * Properties of a ReferencedFieldsForType.\n     * @exports IReferencedFieldsForType\n     * @interface IReferencedFieldsForType\n     * @property {Array.<string>|null} [fieldNames] ReferencedFieldsForType fieldNames\n     * @property {boolean|null} [isInterface] ReferencedFieldsForType isInterface\n     */\n\n    /**\n     * Constructs a new ReferencedFieldsForType.\n     * @exports ReferencedFieldsForType\n     * @classdesc Represents a ReferencedFieldsForType.\n     * @implements IReferencedFieldsForType\n     * @constructor\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     */\n    function ReferencedFieldsForType(properties) {\n        this.fieldNames = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReferencedFieldsForType fieldNames.\n     * @member {Array.<string>} fieldNames\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.fieldNames = $util.emptyArray;\n\n    /**\n     * ReferencedFieldsForType isInterface.\n     * @member {boolean} isInterface\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.isInterface = false;\n\n    /**\n     * Creates a new ReferencedFieldsForType instance using the specified properties.\n     * @function create\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType instance\n     */\n    ReferencedFieldsForType.create = function create(properties) {\n        return new ReferencedFieldsForType(properties);\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.fieldNames != null && message.fieldNames.length)\n            for (var i = 0; i < message.fieldNames.length; ++i)\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldNames[i]);\n        if (message.isInterface != null && Object.hasOwnProperty.call(message, \"isInterface\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isInterface);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message, length delimited. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReferencedFieldsForType();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.fieldNames && message.fieldNames.length))\n                    message.fieldNames = [];\n                message.fieldNames.push(reader.string());\n                break;\n            case 2:\n                message.isInterface = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReferencedFieldsForType message.\n     * @function verify\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReferencedFieldsForType.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.fieldNames != null && message.hasOwnProperty(\"fieldNames\")) {\n            if (!Array.isArray(message.fieldNames))\n                return \"fieldNames: array expected\";\n            for (var i = 0; i < message.fieldNames.length; ++i)\n                if (!$util.isString(message.fieldNames[i]))\n                    return \"fieldNames: string[] expected\";\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            if (typeof message.isInterface !== \"boolean\")\n                return \"isInterface: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReferencedFieldsForType message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {ReferencedFieldsForType} message ReferencedFieldsForType\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReferencedFieldsForType.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.fieldNames = [];\n        if (options.defaults)\n            object.isInterface = false;\n        if (message.fieldNames && message.fieldNames.length) {\n            object.fieldNames = [];\n            for (var j = 0; j < message.fieldNames.length; ++j)\n                object.fieldNames[j] = message.fieldNames[j];\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            object.isInterface = message.isInterface;\n        return object;\n    };\n\n    /**\n     * Converts this ReferencedFieldsForType to JSON.\n     * @function toJSON\n     * @memberof ReferencedFieldsForType\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReferencedFieldsForType.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReferencedFieldsForType;\n})();\n\n$root.Report = (function() {\n\n    /**\n     * Properties of a Report.\n     * @exports IReport\n     * @interface IReport\n     * @property {IReportHeader|null} [header] Report header\n     * @property {Object.<string,ITracesAndStats>|null} [tracesPerQuery] Report tracesPerQuery\n     * @property {google.protobuf.ITimestamp|null} [endTime] Report endTime\n     * @property {number|null} [operationCount] Report operationCount\n     */\n\n    /**\n     * Constructs a new Report.\n     * @exports Report\n     * @classdesc Represents a Report.\n     * @implements IReport\n     * @constructor\n     * @param {IReport=} [properties] Properties to set\n     */\n    function Report(properties) {\n        this.tracesPerQuery = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Report header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.header = null;\n\n    /**\n     * Report tracesPerQuery.\n     * @member {Object.<string,ITracesAndStats>} tracesPerQuery\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPerQuery = $util.emptyObject;\n\n    /**\n     * Report endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.endTime = null;\n\n    /**\n     * Report operationCount.\n     * @member {number} operationCount\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.operationCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new Report instance using the specified properties.\n     * @function create\n     * @memberof Report\n     * @static\n     * @param {IReport=} [properties] Properties to set\n     * @returns {Report} Report instance\n     */\n    Report.create = function create(properties) {\n        return new Report(properties);\n    };\n\n    /**\n     * Encodes the specified Report message. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encode\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\"))\n            for (var keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.operationCount != null && Object.hasOwnProperty.call(message, \"operationCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.operationCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Report message, length delimited. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer.\n     * @function decode\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Report(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 5:\n                reader.skip().pos++;\n                if (message.tracesPerQuery === $util.emptyObject)\n                    message.tracesPerQuery = {};\n                key = reader.string();\n                reader.pos++;\n                message.tracesPerQuery[key] = $root.TracesAndStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 6:\n                message.operationCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Report message.\n     * @function verify\n     * @memberof Report\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Report.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            var error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n            if (!$util.isObject(message.tracesPerQuery))\n                return \"tracesPerQuery: object expected\";\n            var key = Object.keys(message.tracesPerQuery);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TracesAndStats.verify(message.tracesPerQuery[key[i]]);\n                if (error)\n                    return \"tracesPerQuery.\" + error;\n            }\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (!$util.isInteger(message.operationCount) && !(message.operationCount && $util.isInteger(message.operationCount.low) && $util.isInteger(message.operationCount.high)))\n                return \"operationCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Report message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Report\n     * @static\n     * @param {Report} message Report\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Report.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.tracesPerQuery = {};\n        if (options.defaults) {\n            object.header = null;\n            object.endTime = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.operationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.operationCount = options.longs === String ? \"0\" : 0;\n        }\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        var keys2;\n        if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n            object.tracesPerQuery = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.tracesPerQuery[keys2[j]] = $root.TracesAndStats.toObject(message.tracesPerQuery[keys2[j]], options);\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (typeof message.operationCount === \"number\")\n                object.operationCount = options.longs === String ? String(message.operationCount) : message.operationCount;\n            else\n                object.operationCount = options.longs === String ? $util.Long.prototype.toString.call(message.operationCount) : options.longs === Number ? new $util.LongBits(message.operationCount.low >>> 0, message.operationCount.high >>> 0).toNumber(true) : message.operationCount;\n        return object;\n    };\n\n    /**\n     * Converts this Report to JSON.\n     * @function toJSON\n     * @memberof Report\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Report.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Report;\n})();\n\n$root.ContextualizedStats = (function() {\n\n    /**\n     * Properties of a ContextualizedStats.\n     * @exports IContextualizedStats\n     * @interface IContextualizedStats\n     * @property {IStatsContext|null} [context] ContextualizedStats context\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedStats queryLatencyStats\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedStats.\n     * @exports ContextualizedStats\n     * @classdesc Represents a ContextualizedStats.\n     * @implements IContextualizedStats\n     * @constructor\n     * @param {IContextualizedStats=} [properties] Properties to set\n     */\n    function ContextualizedStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.context = null;\n\n    /**\n     * ContextualizedStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats=} [properties] Properties to set\n     * @returns {ContextualizedStats} ContextualizedStats instance\n     */\n    ContextualizedStats.create = function create(properties) {\n        return new ContextualizedStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message, length delimited. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedStats message.\n     * @function verify\n     * @memberof ContextualizedStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedStats\n     * @static\n     * @param {ContextualizedStats} message ContextualizedStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults) {\n            object.context = null;\n            object.queryLatencyStats = null;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        var keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedStats;\n})();\n\n$root.TracesAndStats = (function() {\n\n    /**\n     * Properties of a TracesAndStats.\n     * @exports ITracesAndStats\n     * @interface ITracesAndStats\n     * @property {Array.<ITrace|Uint8Array>|null} [trace] TracesAndStats trace\n     * @property {$protobuf.ToArray.<IContextualizedStats>|Array.<IContextualizedStats>|null} [statsWithContext] TracesAndStats statsWithContext\n     * @property {Object.<string,IReferencedFieldsForType>|null} [referencedFieldsByType] TracesAndStats referencedFieldsByType\n     * @property {Array.<ITrace|Uint8Array>|null} [internalTracesContributingToStats] TracesAndStats internalTracesContributingToStats\n     */\n\n    /**\n     * Constructs a new TracesAndStats.\n     * @exports TracesAndStats\n     * @classdesc Represents a TracesAndStats.\n     * @implements ITracesAndStats\n     * @constructor\n     * @param {ITracesAndStats=} [properties] Properties to set\n     */\n    function TracesAndStats(properties) {\n        this.trace = [];\n        this.statsWithContext = [];\n        this.referencedFieldsByType = {};\n        this.internalTracesContributingToStats = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TracesAndStats trace.\n     * @member {Array.<ITrace|Uint8Array>} trace\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.trace = $util.emptyArray;\n\n    /**\n     * TracesAndStats statsWithContext.\n     * @member {Array.<IContextualizedStats>} statsWithContext\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.statsWithContext = $util.emptyArray;\n\n    /**\n     * TracesAndStats referencedFieldsByType.\n     * @member {Object.<string,IReferencedFieldsForType>} referencedFieldsByType\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.referencedFieldsByType = $util.emptyObject;\n\n    /**\n     * TracesAndStats internalTracesContributingToStats.\n     * @member {Array.<ITrace|Uint8Array>} internalTracesContributingToStats\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.internalTracesContributingToStats = $util.emptyArray;\n\n    /**\n     * Creates a new TracesAndStats instance using the specified properties.\n     * @function create\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats=} [properties] Properties to set\n     * @returns {TracesAndStats} TracesAndStats instance\n     */\n    TracesAndStats.create = function create(properties) {\n        return new TracesAndStats(properties);\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encode\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trace != null && message.trace.length)\n            for (var i = 0; i < message.trace.length; ++i)\n                if (message.trace[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 1, wireType 2 =*/10);\n                    writer.bytes(message.trace[i]);\n                } else\n                    $root.Trace.encode(message.trace[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        var array2;\n        if (message.statsWithContext != null && message.statsWithContext.toArray)\n            array2 = message.statsWithContext.toArray();\n        else\n            array2 = message.statsWithContext;\n        if (array2 != null && array2.length)\n            for (var i = 0; i < array2.length; ++i)\n                $root.ContextualizedStats.encode(array2[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.internalTracesContributingToStats != null && message.internalTracesContributingToStats.length)\n            for (var i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (message.internalTracesContributingToStats[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 3, wireType 2 =*/26);\n                    writer.bytes(message.internalTracesContributingToStats[i]);\n                } else\n                    $root.Trace.encode(message.internalTracesContributingToStats[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.referencedFieldsByType != null && Object.hasOwnProperty.call(message, \"referencedFieldsByType\"))\n            for (var keys = Object.keys(message.referencedFieldsByType), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.ReferencedFieldsForType.encode(message.referencedFieldsByType[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message, length delimited. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TracesAndStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.trace && message.trace.length))\n                    message.trace = [];\n                message.trace.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                if (!(message.statsWithContext && message.statsWithContext.length))\n                    message.statsWithContext = [];\n                message.statsWithContext.push($root.ContextualizedStats.decode(reader, reader.uint32()));\n                break;\n            case 4:\n                reader.skip().pos++;\n                if (message.referencedFieldsByType === $util.emptyObject)\n                    message.referencedFieldsByType = {};\n                key = reader.string();\n                reader.pos++;\n                message.referencedFieldsByType[key] = $root.ReferencedFieldsForType.decode(reader, reader.uint32());\n                break;\n            case 3:\n                if (!(message.internalTracesContributingToStats && message.internalTracesContributingToStats.length))\n                    message.internalTracesContributingToStats = [];\n                message.internalTracesContributingToStats.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TracesAndStats message.\n     * @function verify\n     * @memberof TracesAndStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TracesAndStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n            if (!Array.isArray(message.trace))\n                return \"trace: array expected\";\n            for (var i = 0; i < message.trace.length; ++i)\n                if (!(message.trace[i] instanceof Uint8Array)) {\n                    var error = $root.Trace.verify(message.trace[i]);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n        }\n        if (message.statsWithContext != null && message.hasOwnProperty(\"statsWithContext\")) {\n            var array2;\n            if (message.statsWithContext != null && message.statsWithContext.toArray)\n                array2 = message.statsWithContext.toArray();\n            else\n                array2 = message.statsWithContext;\n            if (!Array.isArray(array2))\n                return \"statsWithContext: array expected\";\n            for (var i = 0; i < array2.length; ++i) {\n                var error = $root.ContextualizedStats.verify(array2[i]);\n                if (error)\n                    return \"statsWithContext.\" + error;\n            }\n        }\n        if (message.referencedFieldsByType != null && message.hasOwnProperty(\"referencedFieldsByType\")) {\n            if (!$util.isObject(message.referencedFieldsByType))\n                return \"referencedFieldsByType: object expected\";\n            var key = Object.keys(message.referencedFieldsByType);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.ReferencedFieldsForType.verify(message.referencedFieldsByType[key[i]]);\n                if (error)\n                    return \"referencedFieldsByType.\" + error;\n            }\n        }\n        if (message.internalTracesContributingToStats != null && message.hasOwnProperty(\"internalTracesContributingToStats\")) {\n            if (!Array.isArray(message.internalTracesContributingToStats))\n                return \"internalTracesContributingToStats: array expected\";\n            for (var i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (!(message.internalTracesContributingToStats[i] instanceof Uint8Array)) {\n                    var error = $root.Trace.verify(message.internalTracesContributingToStats[i]);\n                    if (error)\n                        return \"internalTracesContributingToStats.\" + error;\n                }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TracesAndStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TracesAndStats\n     * @static\n     * @param {TracesAndStats} message TracesAndStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TracesAndStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.trace = [];\n            object.statsWithContext = [];\n            object.internalTracesContributingToStats = [];\n        }\n        if (options.objects || options.defaults)\n            object.referencedFieldsByType = {};\n        if (message.trace && message.trace.length) {\n            object.trace = [];\n            for (var j = 0; j < message.trace.length; ++j)\n                object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n        }\n        if (message.statsWithContext && message.statsWithContext.length) {\n            object.statsWithContext = [];\n            for (var j = 0; j < message.statsWithContext.length; ++j)\n                object.statsWithContext[j] = $root.ContextualizedStats.toObject(message.statsWithContext[j], options);\n        }\n        if (message.internalTracesContributingToStats && message.internalTracesContributingToStats.length) {\n            object.internalTracesContributingToStats = [];\n            for (var j = 0; j < message.internalTracesContributingToStats.length; ++j)\n                object.internalTracesContributingToStats[j] = $root.Trace.toObject(message.internalTracesContributingToStats[j], options);\n        }\n        var keys2;\n        if (message.referencedFieldsByType && (keys2 = Object.keys(message.referencedFieldsByType)).length) {\n            object.referencedFieldsByType = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.referencedFieldsByType[keys2[j]] = $root.ReferencedFieldsForType.toObject(message.referencedFieldsByType[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TracesAndStats to JSON.\n     * @function toJSON\n     * @memberof TracesAndStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TracesAndStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TracesAndStats;\n})();\n\n$root.google = (function() {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    var google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        var protobuf = {};\n\n        protobuf.Timestamp = (function() {\n\n            /**\n             * Properties of a Timestamp.\n             * @memberof google.protobuf\n             * @interface ITimestamp\n             * @property {number|null} [seconds] Timestamp seconds\n             * @property {number|null} [nanos] Timestamp nanos\n             */\n\n            /**\n             * Constructs a new Timestamp.\n             * @memberof google.protobuf\n             * @classdesc Represents a Timestamp.\n             * @implements ITimestamp\n             * @constructor\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             */\n            function Timestamp(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Timestamp seconds.\n             * @member {number} seconds\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Timestamp nanos.\n             * @member {number} nanos\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.nanos = 0;\n\n            /**\n             * Creates a new Timestamp instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             * @returns {google.protobuf.Timestamp} Timestamp instance\n             */\n            Timestamp.create = function create(properties) {\n                return new Timestamp(properties);\n            };\n\n            /**\n             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.seconds = reader.int64();\n                        break;\n                    case 2:\n                        message.nanos = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Timestamp message.\n             * @function verify\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Timestamp.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                        return \"seconds: integer|Long expected\";\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    if (!$util.isInteger(message.nanos))\n                        return \"nanos: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.Timestamp} message Timestamp\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Timestamp.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.seconds = options.longs === String ? \"0\" : 0;\n                    object.nanos = 0;\n                }\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (typeof message.seconds === \"number\")\n                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                    else\n                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    object.nanos = message.nanos;\n                return object;\n            };\n\n            /**\n             * Converts this Timestamp to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Timestamp.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Timestamp;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\nmodule.exports = $root;\n"],"mappings":"AAAA;AACA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,4BAA4B,CAAC;;AAErD;AACA,IAAIC,OAAO,GAAGF,SAAS,CAACG,MAAM;EAAEC,OAAO,GAAGJ,SAAS,CAACK,MAAM;EAAEC,KAAK,GAAGN,SAAS,CAACO,IAAI;;AAElF;AACA,IAAIC,KAAK,GAAGR,SAAS,CAACS,KAAK,CAAC,SAAS,CAAC,KAAKT,SAAS,CAACS,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAE3ED,KAAK,CAACE,KAAK,GAAI,YAAW;EAEtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,KAAK,CAACC,UAAU,EAAE;IACvB,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIJ,KAAK,CAACM,SAAS,CAACC,SAAS,GAAG,IAAI;;EAEhC;AACJ;AACA;AACA;AACA;AACA;EACIP,KAAK,CAACM,SAAS,CAACE,OAAO,GAAG,IAAI;;EAE9B;AACJ;AACA;AACA;AACA;AACA;EACIR,KAAK,CAACM,SAAS,CAACG,UAAU,GAAGb,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAE3E;AACJ;AACA;AACA;AACA;AACA;EACIX,KAAK,CAACM,SAAS,CAACM,IAAI,GAAG,IAAI;;EAE3B;AACJ;AACA;AACA;AACA;AACA;EACIZ,KAAK,CAACM,SAAS,CAACO,SAAS,GAAG,EAAE;;EAE9B;AACJ;AACA;AACA;AACA;AACA;EACIb,KAAK,CAACM,SAAS,CAACQ,uBAAuB,GAAG,EAAE;;EAE5C;AACJ;AACA;AACA;AACA;AACA;EACId,KAAK,CAACM,SAAS,CAACS,uBAAuB,GAAG,EAAE;;EAE5C;AACJ;AACA;AACA;AACA;AACA;EACIf,KAAK,CAACM,SAAS,CAACU,OAAO,GAAG,IAAI;;EAE9B;AACJ;AACA;AACA;AACA;AACA;EACIhB,KAAK,CAACM,SAAS,CAACW,UAAU,GAAG,EAAE;;EAE/B;AACJ;AACA;AACA;AACA;AACA;EACIjB,KAAK,CAACM,SAAS,CAACY,aAAa,GAAG,EAAE;;EAElC;AACJ;AACA;AACA;AACA;AACA;EACIlB,KAAK,CAACM,SAAS,CAACa,IAAI,GAAG,IAAI;;EAE3B;AACJ;AACA;AACA;AACA;AACA;EACInB,KAAK,CAACM,SAAS,CAACc,WAAW,GAAG,IAAI;;EAElC;AACJ;AACA;AACA;AACA;AACA;EACIpB,KAAK,CAACM,SAAS,CAACe,SAAS,GAAG,IAAI;;EAEhC;AACJ;AACA;AACA;AACA;AACA;EACIrB,KAAK,CAACM,SAAS,CAACgB,iBAAiB,GAAG,KAAK;;EAEzC;AACJ;AACA;AACA;AACA;AACA;EACItB,KAAK,CAACM,SAAS,CAACiB,iBAAiB,GAAG,KAAK;;EAEzC;AACJ;AACA;AACA;AACA;AACA;EACIvB,KAAK,CAACM,SAAS,CAACkB,sBAAsB,GAAG,KAAK;;EAE9C;AACJ;AACA;AACA;AACA;AACA;EACIxB,KAAK,CAACM,SAAS,CAACmB,mBAAmB,GAAG,KAAK;;EAE3C;AACJ;AACA;AACA;AACA;AACA;EACIzB,KAAK,CAACM,SAAS,CAACoB,kBAAkB,GAAG,KAAK;;EAE1C;AACJ;AACA;AACA;AACA;AACA;EACI1B,KAAK,CAACM,SAAS,CAACqB,oBAAoB,GAAG,CAAC;;EAExC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI3B,KAAK,CAAC4B,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IACvC,OAAO,IAAID,KAAK,CAACC,UAAU,CAAC;EAChC,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACID,KAAK,CAAC6B,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAACtB,OAAO,IAAI,IAAI,IAAIL,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEhC,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACP,MAAM,CAACC,OAAO,CAACtB,OAAO,EAAEuB,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACrH,IAAIT,OAAO,CAACvB,SAAS,IAAI,IAAI,IAAIJ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,WAAW,CAAC,EAC7EhC,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACP,MAAM,CAACC,OAAO,CAACvB,SAAS,EAAEwB,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACvH,IAAIT,OAAO,CAACd,OAAO,IAAI,IAAI,IAAIb,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEhC,KAAK,CAACE,KAAK,CAACwC,OAAO,CAACX,MAAM,CAACC,OAAO,CAACd,OAAO,EAAEe,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACzG,IAAIT,OAAO,CAACb,UAAU,IAAI,IAAI,IAAId,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,YAAY,CAAC,EAC/EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACb,UAAU,CAAC;IACvE,IAAIa,OAAO,CAACZ,aAAa,IAAI,IAAI,IAAIf,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,eAAe,CAAC,EACrFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACZ,aAAa,CAAC;IAC1E,IAAIY,OAAO,CAACX,IAAI,IAAI,IAAI,IAAIhB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,MAAM,CAAC,EACnEhC,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACb,MAAM,CAACC,OAAO,CAACX,IAAI,EAAEY,MAAM,CAACM,MAAM,EAAC,wBAAwB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACpG,IAAIT,OAAO,CAACrB,UAAU,IAAI,IAAI,IAAIN,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,YAAY,CAAC,EAC/EC,MAAM,CAACM,MAAM,EAAC,wBAAwB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACrB,UAAU,CAAC;IACxE,IAAIqB,OAAO,CAAClB,IAAI,IAAI,IAAI,IAAIT,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,MAAM,CAAC,EACnEhC,KAAK,CAACE,KAAK,CAAC4C,IAAI,CAACf,MAAM,CAACC,OAAO,CAAClB,IAAI,EAAEmB,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACrG,IAAIT,OAAO,CAACV,WAAW,IAAI,IAAI,IAAIjB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,aAAa,CAAC,EACjFhC,KAAK,CAACE,KAAK,CAAC6C,WAAW,CAAChB,MAAM,CAACC,OAAO,CAACV,WAAW,EAAEW,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACnH,IAAIT,OAAO,CAACjB,SAAS,IAAI,IAAI,IAAIV,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,WAAW,CAAC,EAC7EC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACI,MAAM,CAACX,OAAO,CAACjB,SAAS,CAAC;IACxE,IAAIiB,OAAO,CAACR,iBAAiB,IAAI,IAAI,IAAInB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,mBAAmB,CAAC,EAC7FC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACS,IAAI,CAAChB,OAAO,CAACR,iBAAiB,CAAC;IAC9E,IAAIQ,OAAO,CAACP,iBAAiB,IAAI,IAAI,IAAIpB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,mBAAmB,CAAC,EAC7FC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACS,IAAI,CAAChB,OAAO,CAACP,iBAAiB,CAAC;IAC9E,IAAIO,OAAO,CAACN,sBAAsB,IAAI,IAAI,IAAIrB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,wBAAwB,CAAC,EACvGC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACS,IAAI,CAAChB,OAAO,CAACN,sBAAsB,CAAC;IACnF,IAAIM,OAAO,CAACL,mBAAmB,IAAI,IAAI,IAAItB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,qBAAqB,CAAC,EACjGC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACS,IAAI,CAAChB,OAAO,CAACL,mBAAmB,CAAC;IAChF,IAAIK,OAAO,CAACJ,kBAAkB,IAAI,IAAI,IAAIvB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,oBAAoB,CAAC,EAC/FC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACS,IAAI,CAAChB,OAAO,CAACJ,kBAAkB,CAAC;IAC/E,IAAII,OAAO,CAACT,SAAS,IAAI,IAAI,IAAIlB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,WAAW,CAAC,EAC7EhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAClB,MAAM,CAACC,OAAO,CAACT,SAAS,EAAEU,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACnH,IAAIT,OAAO,CAAChB,uBAAuB,IAAI,IAAI,IAAIX,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,yBAAyB,CAAC,EACzGC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACI,MAAM,CAACX,OAAO,CAAChB,uBAAuB,CAAC;IACtF,IAAIgB,OAAO,CAACf,uBAAuB,IAAI,IAAI,IAAIZ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,yBAAyB,CAAC,EACzGC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACI,MAAM,CAACX,OAAO,CAACf,uBAAuB,CAAC;IACtF,IAAIe,OAAO,CAACH,oBAAoB,IAAI,IAAI,IAAIxB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,sBAAsB,CAAC,EACnGC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACW,MAAM,CAAClB,OAAO,CAACH,oBAAoB,CAAC;IACnF,OAAOI,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI/B,KAAK,CAACiD,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IAC9D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvC,KAAK,CAACkD,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IAC3C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,EAAE;IAC9F,OAAOmD,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACF1B,OAAO,CAACvB,SAAS,GAAGT,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACc,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACnF;QACJ,KAAK,CAAC;UACFP,OAAO,CAACtB,OAAO,GAAGV,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACc,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACjF;QACJ,KAAK,EAAE;UACHP,OAAO,CAACrB,UAAU,GAAG0C,MAAM,CAACR,MAAM,EAAE;UACpC;QACJ,KAAK,EAAE;UACHb,OAAO,CAAClB,IAAI,GAAGd,KAAK,CAACE,KAAK,CAAC4C,IAAI,CAACM,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UAC/D;QACJ,KAAK,EAAE;UACHP,OAAO,CAACjB,SAAS,GAAGsC,MAAM,CAACV,MAAM,EAAE;UACnC;QACJ,KAAK,EAAE;UACHX,OAAO,CAAChB,uBAAuB,GAAGqC,MAAM,CAACV,MAAM,EAAE;UACjD;QACJ,KAAK,EAAE;UACHX,OAAO,CAACf,uBAAuB,GAAGoC,MAAM,CAACV,MAAM,EAAE;UACjD;QACJ,KAAK,CAAC;UACFX,OAAO,CAACd,OAAO,GAAGlB,KAAK,CAACE,KAAK,CAACwC,OAAO,CAACU,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACrE;QACJ,KAAK,CAAC;UACFP,OAAO,CAACb,UAAU,GAAGkC,MAAM,CAACV,MAAM,EAAE;UACpC;QACJ,KAAK,CAAC;UACFX,OAAO,CAACZ,aAAa,GAAGiC,MAAM,CAACV,MAAM,EAAE;UACvC;QACJ,KAAK,EAAE;UACHX,OAAO,CAACX,IAAI,GAAGrB,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACQ,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UAC/D;QACJ,KAAK,EAAE;UACHP,OAAO,CAACV,WAAW,GAAGtB,KAAK,CAACE,KAAK,CAAC6C,WAAW,CAACK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UAC7E;QACJ,KAAK,EAAE;UACHP,OAAO,CAACT,SAAS,GAAGvB,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UAC7E;QACJ,KAAK,EAAE;UACHP,OAAO,CAACR,iBAAiB,GAAG6B,MAAM,CAACL,IAAI,EAAE;UACzC;QACJ,KAAK,EAAE;UACHhB,OAAO,CAACP,iBAAiB,GAAG4B,MAAM,CAACL,IAAI,EAAE;UACzC;QACJ,KAAK,EAAE;UACHhB,OAAO,CAACN,sBAAsB,GAAG2B,MAAM,CAACL,IAAI,EAAE;UAC9C;QACJ,KAAK,EAAE;UACHhB,OAAO,CAACL,mBAAmB,GAAG0B,MAAM,CAACL,IAAI,EAAE;UAC3C;QACJ,KAAK,EAAE;UACHhB,OAAO,CAACJ,kBAAkB,GAAGyB,MAAM,CAACL,IAAI,EAAE;UAC1C;QACJ,KAAK,EAAE;UACHhB,OAAO,CAACH,oBAAoB,GAAGwB,MAAM,CAACH,MAAM,EAAE;UAC9C;QACJ;UACIG,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI9B,KAAK,CAAC0D,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IACrD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIrC,KAAK,CAAC2D,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IACpC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAACvB,SAAS,IAAI,IAAI,IAAIuB,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;MAClE,IAAI4B,KAAK,GAAG9D,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACuB,MAAM,CAAC7B,OAAO,CAACvB,SAAS,CAAC;MACrE,IAAIqD,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;IACnC;IACA,IAAI9B,OAAO,CAACtB,OAAO,IAAI,IAAI,IAAIsB,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;MAC9D,IAAI4B,KAAK,GAAG9D,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACuB,MAAM,CAAC7B,OAAO,CAACtB,OAAO,CAAC;MACnE,IAAIoD,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;IACjC;IACA,IAAI9B,OAAO,CAACrB,UAAU,IAAI,IAAI,IAAIqB,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACrB,UAAU,CAAC,IAAI,EAAEqB,OAAO,CAACrB,UAAU,IAAIb,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACrB,UAAU,CAACqD,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACrB,UAAU,CAACsD,IAAI,CAAC,CAAC,EACpJ,OAAO,mCAAmC;IAClD,IAAIjC,OAAO,CAAClB,IAAI,IAAI,IAAI,IAAIkB,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;MACxD,IAAI4B,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC4C,IAAI,CAACe,MAAM,CAAC7B,OAAO,CAAClB,IAAI,CAAC;MACjD,IAAIgD,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;IAC9B;IACA,IAAI9B,OAAO,CAACjB,SAAS,IAAI,IAAI,IAAIiB,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACjB,SAAS,CAAC,EAClC,OAAO,4BAA4B;IAC3C,IAAIiB,OAAO,CAAChB,uBAAuB,IAAI,IAAI,IAAIgB,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAChB,uBAAuB,CAAC,EAChD,OAAO,0CAA0C;IACzD,IAAIgB,OAAO,CAACf,uBAAuB,IAAI,IAAI,IAAIe,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACf,uBAAuB,CAAC,EAChD,OAAO,0CAA0C;IACzD,IAAIe,OAAO,CAACd,OAAO,IAAI,IAAI,IAAIc,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;MAC9D,IAAI4B,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAACwC,OAAO,CAACmB,MAAM,CAAC7B,OAAO,CAACd,OAAO,CAAC;MACvD,IAAI4C,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;IACjC;IACA,IAAI9B,OAAO,CAACb,UAAU,IAAI,IAAI,IAAIa,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACb,UAAU,CAAC,EACnC,OAAO,6BAA6B;IAC5C,IAAIa,OAAO,CAACZ,aAAa,IAAI,IAAI,IAAIY,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACZ,aAAa,CAAC,EACtC,OAAO,gCAAgC;IAC/C,IAAIY,OAAO,CAACX,IAAI,IAAI,IAAI,IAAIW,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;MACxD,IAAI4B,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACiB,MAAM,CAAC7B,OAAO,CAACX,IAAI,CAAC;MACjD,IAAIyC,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;IAC9B;IACA,IAAI9B,OAAO,CAACV,WAAW,IAAI,IAAI,IAAIU,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EAAE;MACtE,IAAI4B,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC6C,WAAW,CAACc,MAAM,CAAC7B,OAAO,CAACV,WAAW,CAAC;MAC/D,IAAIwC,KAAK,EACL,OAAO,cAAc,GAAGA,KAAK;IACrC;IACA,IAAI9B,OAAO,CAACT,SAAS,IAAI,IAAI,IAAIS,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;MAClE,IAAI4B,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACY,MAAM,CAAC7B,OAAO,CAACT,SAAS,CAAC;MAC/D,IAAIuC,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;IACnC;IACA,IAAI9B,OAAO,CAACR,iBAAiB,IAAI,IAAI,IAAIQ,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChF,IAAI,OAAOF,OAAO,CAACR,iBAAiB,KAAK,SAAS,EAC9C,OAAO,qCAAqC;IACpD,IAAIQ,OAAO,CAACP,iBAAiB,IAAI,IAAI,IAAIO,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChF,IAAI,OAAOF,OAAO,CAACP,iBAAiB,KAAK,SAAS,EAC9C,OAAO,qCAAqC;IACpD,IAAIO,OAAO,CAACN,sBAAsB,IAAI,IAAI,IAAIM,OAAO,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAC1F,IAAI,OAAOF,OAAO,CAACN,sBAAsB,KAAK,SAAS,EACnD,OAAO,0CAA0C;IACzD,IAAIM,OAAO,CAACL,mBAAmB,IAAI,IAAI,IAAIK,OAAO,CAACE,cAAc,CAAC,qBAAqB,CAAC,EACpF,IAAI,OAAOF,OAAO,CAACL,mBAAmB,KAAK,SAAS,EAChD,OAAO,uCAAuC;IACtD,IAAIK,OAAO,CAACJ,kBAAkB,IAAI,IAAI,IAAII,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClF,IAAI,OAAOF,OAAO,CAACJ,kBAAkB,KAAK,SAAS,EAC/C,OAAO,sCAAsC;IACrD,IAAII,OAAO,CAACH,oBAAoB,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,sBAAsB,CAAC,EACtF,IAAI,OAAOF,OAAO,CAACH,oBAAoB,KAAK,QAAQ,EAChD,OAAO,uCAAuC;IACtD,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI3B,KAAK,CAACiE,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IACjD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAACE,QAAQ,EAAE;MAClBD,MAAM,CAAC3D,OAAO,GAAG,IAAI;MACrB2D,MAAM,CAAC5D,SAAS,GAAG,IAAI;MACvB4D,MAAM,CAACnD,OAAO,GAAG,IAAI;MACrBmD,MAAM,CAAClD,UAAU,GAAG,EAAE;MACtBkD,MAAM,CAACjD,aAAa,GAAG,EAAE;MACzBiD,MAAM,CAAChD,IAAI,GAAG,IAAI;MAClB,IAAIvB,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAAC1D,UAAU,GAAGyD,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACtH,CAAC,MACGF,MAAM,CAAC1D,UAAU,GAAGyD,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MAC1DJ,MAAM,CAACvD,IAAI,GAAG,IAAI;MAClBuD,MAAM,CAAC/C,WAAW,GAAG,IAAI;MACzB+C,MAAM,CAACtD,SAAS,GAAG,EAAE;MACrBsD,MAAM,CAAC7C,iBAAiB,GAAG,KAAK;MAChC6C,MAAM,CAAC5C,iBAAiB,GAAG,KAAK;MAChC4C,MAAM,CAAC3C,sBAAsB,GAAG,KAAK;MACrC2C,MAAM,CAAC1C,mBAAmB,GAAG,KAAK;MAClC0C,MAAM,CAACzC,kBAAkB,GAAG,KAAK;MACjCyC,MAAM,CAAC9C,SAAS,GAAG,IAAI;MACvB8C,MAAM,CAACrD,uBAAuB,GAAG,EAAE;MACnCqD,MAAM,CAACpD,uBAAuB,GAAG,EAAE;MACnCoD,MAAM,CAACxC,oBAAoB,GAAG,CAAC;IACnC;IACA,IAAIG,OAAO,CAACtB,OAAO,IAAI,IAAI,IAAIsB,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DmC,MAAM,CAAC3D,OAAO,GAAGV,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC6B,QAAQ,CAACnC,OAAO,CAACtB,OAAO,EAAE0D,OAAO,CAAC;IACvF,IAAIpC,OAAO,CAACvB,SAAS,IAAI,IAAI,IAAIuB,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEmC,MAAM,CAAC5D,SAAS,GAAGT,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC6B,QAAQ,CAACnC,OAAO,CAACvB,SAAS,EAAE2D,OAAO,CAAC;IAC3F,IAAIpC,OAAO,CAACd,OAAO,IAAI,IAAI,IAAIc,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DmC,MAAM,CAACnD,OAAO,GAAGlB,KAAK,CAACE,KAAK,CAACwC,OAAO,CAACyB,QAAQ,CAACnC,OAAO,CAACd,OAAO,EAAEkD,OAAO,CAAC;IAC3E,IAAIpC,OAAO,CAACb,UAAU,IAAI,IAAI,IAAIa,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEmC,MAAM,CAAClD,UAAU,GAAGa,OAAO,CAACb,UAAU;IAC1C,IAAIa,OAAO,CAACZ,aAAa,IAAI,IAAI,IAAIY,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEmC,MAAM,CAACjD,aAAa,GAAGY,OAAO,CAACZ,aAAa;IAChD,IAAIY,OAAO,CAACX,IAAI,IAAI,IAAI,IAAIW,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDmC,MAAM,CAAChD,IAAI,GAAGrB,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACuB,QAAQ,CAACnC,OAAO,CAACX,IAAI,EAAE+C,OAAO,CAAC;IAClE,IAAIpC,OAAO,CAACrB,UAAU,IAAI,IAAI,IAAIqB,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,OAAOF,OAAO,CAACrB,UAAU,KAAK,QAAQ,EACtC0D,MAAM,CAAC1D,UAAU,GAAGyD,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACrB,UAAU,CAAC,GAAGqB,OAAO,CAACrB,UAAU,CAAC,KAE/F0D,MAAM,CAAC1D,UAAU,GAAGyD,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACrB,UAAU,CAAC,GAAGyD,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACrB,UAAU,CAACqD,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACrB,UAAU,CAACsD,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACrB,UAAU;IAC9P,IAAIqB,OAAO,CAAClB,IAAI,IAAI,IAAI,IAAIkB,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDmC,MAAM,CAACvD,IAAI,GAAGd,KAAK,CAACE,KAAK,CAAC4C,IAAI,CAACqB,QAAQ,CAACnC,OAAO,CAAClB,IAAI,EAAEsD,OAAO,CAAC;IAClE,IAAIpC,OAAO,CAACV,WAAW,IAAI,IAAI,IAAIU,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEmC,MAAM,CAAC/C,WAAW,GAAGtB,KAAK,CAACE,KAAK,CAAC6C,WAAW,CAACoB,QAAQ,CAACnC,OAAO,CAACV,WAAW,EAAE8C,OAAO,CAAC;IACvF,IAAIpC,OAAO,CAACjB,SAAS,IAAI,IAAI,IAAIiB,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEmC,MAAM,CAACtD,SAAS,GAAGiB,OAAO,CAACjB,SAAS;IACxC,IAAIiB,OAAO,CAACR,iBAAiB,IAAI,IAAI,IAAIQ,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFmC,MAAM,CAAC7C,iBAAiB,GAAGQ,OAAO,CAACR,iBAAiB;IACxD,IAAIQ,OAAO,CAACP,iBAAiB,IAAI,IAAI,IAAIO,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFmC,MAAM,CAAC5C,iBAAiB,GAAGO,OAAO,CAACP,iBAAiB;IACxD,IAAIO,OAAO,CAACN,sBAAsB,IAAI,IAAI,IAAIM,OAAO,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAC1FmC,MAAM,CAAC3C,sBAAsB,GAAGM,OAAO,CAACN,sBAAsB;IAClE,IAAIM,OAAO,CAACL,mBAAmB,IAAI,IAAI,IAAIK,OAAO,CAACE,cAAc,CAAC,qBAAqB,CAAC,EACpFmC,MAAM,CAAC1C,mBAAmB,GAAGK,OAAO,CAACL,mBAAmB;IAC5D,IAAIK,OAAO,CAACJ,kBAAkB,IAAI,IAAI,IAAII,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClFmC,MAAM,CAACzC,kBAAkB,GAAGI,OAAO,CAACJ,kBAAkB;IAC1D,IAAII,OAAO,CAACT,SAAS,IAAI,IAAI,IAAIS,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEmC,MAAM,CAAC9C,SAAS,GAAGvB,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACkB,QAAQ,CAACnC,OAAO,CAACT,SAAS,EAAE6C,OAAO,CAAC;IACrF,IAAIpC,OAAO,CAAChB,uBAAuB,IAAI,IAAI,IAAIgB,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5FmC,MAAM,CAACrD,uBAAuB,GAAGgB,OAAO,CAAChB,uBAAuB;IACpE,IAAIgB,OAAO,CAACf,uBAAuB,IAAI,IAAI,IAAIe,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5FmC,MAAM,CAACpD,uBAAuB,GAAGe,OAAO,CAACf,uBAAuB;IACpE,IAAIe,OAAO,CAACH,oBAAoB,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,sBAAsB,CAAC,EACtFmC,MAAM,CAACxC,oBAAoB,GAAGuC,OAAO,CAACU,IAAI,IAAI,CAACC,QAAQ,CAAC/C,OAAO,CAACH,oBAAoB,CAAC,GAAG4C,MAAM,CAACzC,OAAO,CAACH,oBAAoB,CAAC,GAAGG,OAAO,CAACH,oBAAoB;IAC/J,OAAOwC,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACInE,KAAK,CAACM,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IACvC,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAEDhF,KAAK,CAAC6C,WAAW,GAAI,YAAW;IAE5B;AACR;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,WAAW,CAAC5C,UAAU,EAAE;MAC7B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQyC,WAAW,CAACvC,SAAS,CAAC2E,KAAK,GAAG,CAAC;;IAE/B;AACR;AACA;AACA;AACA;AACA;IACQpC,WAAW,CAACvC,SAAS,CAAC4E,QAAQ,GAAGtF,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,KAAK,CAAC,GAAG,CAAC;;IAEhF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQkC,WAAW,CAACjB,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;MAC7C,OAAO,IAAI4C,WAAW,CAAC5C,UAAU,CAAC;IACtC,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ4C,WAAW,CAAChB,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;MAClD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;MAC7B,IAAIE,OAAO,CAACmD,KAAK,IAAI,IAAI,IAAI9E,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,OAAO,CAAC,EACrEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,CAAC,CAAC,CAAC8C,KAAK,CAACrD,OAAO,CAACmD,KAAK,CAAC;MAChE,IAAInD,OAAO,CAACoD,QAAQ,IAAI,IAAI,IAAI/E,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,UAAU,CAAC,EAC3EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAAC+C,KAAK,CAACtD,OAAO,CAACoD,QAAQ,CAAC;MACpE,OAAOnD,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQc,WAAW,CAACI,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;MACpE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQM,WAAW,CAACK,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;MACjD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;QAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC6C,WAAW,EAAE;MAC1G,OAAOM,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;QACzB,QAAQmB,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACF1B,OAAO,CAACmD,KAAK,GAAG9B,MAAM,CAACgC,KAAK,EAAE;YAC9B;UACJ,KAAK,CAAC;YACFrD,OAAO,CAACoD,QAAQ,GAAG/B,MAAM,CAACiC,KAAK,EAAE;YACjC;UACJ;YACIjC,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QAAM;MAEd;MACA,OAAO1B,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQe,WAAW,CAACa,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;MAC3D,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQQ,WAAW,CAACc,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;MAC1C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAIA,OAAO,CAACmD,KAAK,IAAI,IAAI,IAAInD,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxD,QAAQF,OAAO,CAACmD,KAAK;QACrB;UACI,OAAO,4BAA4B;QACvC,KAAK,CAAC;QACN,KAAK,CAAC;QACN,KAAK,CAAC;UACF;MAAM;MAEd,IAAInD,OAAO,CAACoD,QAAQ,IAAI,IAAI,IAAIpD,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACoD,QAAQ,CAAC,IAAI,EAAEpD,OAAO,CAACoD,QAAQ,IAAItF,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACoD,QAAQ,CAACpB,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACoD,QAAQ,CAACnB,IAAI,CAAC,CAAC,EAC5I,OAAO,iCAAiC;MAChD,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQlB,WAAW,CAACoB,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;MACvD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAID,OAAO,CAACE,QAAQ,EAAE;QAClBD,MAAM,CAACc,KAAK,GAAGf,OAAO,CAACmB,KAAK,KAAKd,MAAM,GAAG,SAAS,GAAG,CAAC;QACvD,IAAI3E,KAAK,CAACc,IAAI,EAAE;UACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;UACtCyD,MAAM,CAACe,QAAQ,GAAGhB,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;QACpH,CAAC,MACGF,MAAM,CAACe,QAAQ,GAAGhB,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MAC5D;MACA,IAAIzC,OAAO,CAACmD,KAAK,IAAI,IAAI,IAAInD,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDmC,MAAM,CAACc,KAAK,GAAGf,OAAO,CAACmB,KAAK,KAAKd,MAAM,GAAGzE,KAAK,CAACE,KAAK,CAAC6C,WAAW,CAACyC,KAAK,CAACxD,OAAO,CAACmD,KAAK,CAAC,GAAGnD,OAAO,CAACmD,KAAK;MAC1G,IAAInD,OAAO,CAACoD,QAAQ,IAAI,IAAI,IAAIpD,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,OAAOF,OAAO,CAACoD,QAAQ,KAAK,QAAQ,EACpCf,MAAM,CAACe,QAAQ,GAAGhB,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACoD,QAAQ,CAAC,GAAGpD,OAAO,CAACoD,QAAQ,CAAC,KAEzFf,MAAM,CAACe,QAAQ,GAAGhB,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACoD,QAAQ,CAAC,GAAGhB,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACoD,QAAQ,CAACpB,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACoD,QAAQ,CAACnB,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,GAAG5C,OAAO,CAACoD,QAAQ;MAChP,OAAOf,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQtB,WAAW,CAACvC,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;MAC7C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;IACxE,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQnC,WAAW,CAACyC,KAAK,GAAI,YAAW;MAC5B,IAAIC,UAAU,GAAG,CAAC,CAAC;QAAEC,MAAM,GAAGrF,MAAM,CAACyB,MAAM,CAAC2D,UAAU,CAAC;MACvDC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;MACrCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;MACpCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;MACrC,OAAOC,MAAM;IACjB,CAAC,EAAG;IAEJ,OAAO3C,WAAW;EACtB,CAAC,EAAG;EAEJ7C,KAAK,CAACwC,OAAO,GAAI,YAAW;IAExB;AACR;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,OAAO,CAACvC,UAAU,EAAE;MACzB,IAAI,CAACwF,aAAa,GAAG,CAAC,CAAC;MACvB,IAAIxF,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQoC,OAAO,CAAClC,SAAS,CAACmF,aAAa,GAAG7F,KAAK,CAAC8F,WAAW;;IAEnD;AACR;AACA;AACA;AACA;AACA;IACQlD,OAAO,CAAClC,SAAS,CAACqF,aAAa,GAAG,EAAE;;IAEpC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQnD,OAAO,CAACZ,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;MACzC,OAAO,IAAIuC,OAAO,CAACvC,UAAU,CAAC;IAClC,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQuC,OAAO,CAACX,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;MAC9C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;MAC7B,IAAIE,OAAO,CAAC6D,aAAa,IAAI,IAAI,IAAIxF,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,eAAe,CAAC,EACrFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC6D,aAAa,CAAC;MAC1E,IAAI7D,OAAO,CAAC2D,aAAa,IAAI,IAAI,IAAItF,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,eAAe,CAAC,EACrF,KAAK,IAAI5B,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC2D,aAAa,CAAC,EAAErF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAC3E2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAACD,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACvC,IAAI,CAACE,CAAC,CAAC,CAAC,CAACiC,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC2D,aAAa,CAACvF,IAAI,CAACE,CAAC,CAAC,CAAC,CAAC,CAACmC,MAAM,EAAE;MAC3L,OAAOR,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQS,OAAO,CAACS,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;MAChE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,OAAO,CAACU,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;MAC7C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;QAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAACwC,OAAO,EAAE;QAAEoD,GAAG;MAC3G,OAAOzC,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;QACzB,QAAQmB,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACFL,MAAM,CAAC0C,IAAI,EAAE,CAACtC,GAAG,EAAE;YACnB,IAAIzB,OAAO,CAAC2D,aAAa,KAAK7F,KAAK,CAAC8F,WAAW,EAC3C5D,OAAO,CAAC2D,aAAa,GAAG,CAAC,CAAC;YAC9BG,GAAG,GAAGzC,MAAM,CAACV,MAAM,EAAE;YACrBU,MAAM,CAACI,GAAG,EAAE;YACZzB,OAAO,CAAC2D,aAAa,CAACG,GAAG,CAAC,GAAGzC,MAAM,CAACV,MAAM,EAAE;YAC5C;UACJ,KAAK,CAAC;YACFX,OAAO,CAAC6D,aAAa,GAAGxC,MAAM,CAACV,MAAM,EAAE;YACvC;UACJ;YACIU,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QAAM;MAEd;MACA,OAAO1B,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQU,OAAO,CAACkB,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;MACvD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQG,OAAO,CAACmB,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;MACtC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAIA,OAAO,CAAC2D,aAAa,IAAI,IAAI,IAAI3D,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EAAE;QAC1E,IAAI,CAACpC,KAAK,CAACkG,QAAQ,CAAChE,OAAO,CAAC2D,aAAa,CAAC,EACtC,OAAO,gCAAgC;QAC3C,IAAIG,GAAG,GAAGzF,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC2D,aAAa,CAAC;QAC5C,KAAK,IAAIrF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,GAAG,CAACvF,MAAM,EAAE,EAAED,CAAC,EAC/B,IAAI,CAACR,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC2D,aAAa,CAACG,GAAG,CAACxF,CAAC,CAAC,CAAC,CAAC,EAC9C,OAAO,0CAA0C;MAC7D;MACA,IAAI0B,OAAO,CAAC6D,aAAa,IAAI,IAAI,IAAI7D,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC6D,aAAa,CAAC,EACtC,OAAO,gCAAgC;MAC/C,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQnD,OAAO,CAACyB,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;MACnD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAID,OAAO,CAAC6B,OAAO,IAAI7B,OAAO,CAACE,QAAQ,EACnCD,MAAM,CAACsB,aAAa,GAAG,CAAC,CAAC;MAC7B,IAAIvB,OAAO,CAACE,QAAQ,EAChBD,MAAM,CAACwB,aAAa,GAAG,EAAE;MAC7B,IAAI7D,OAAO,CAAC6D,aAAa,IAAI,IAAI,IAAI7D,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEmC,MAAM,CAACwB,aAAa,GAAG7D,OAAO,CAAC6D,aAAa;MAChD,IAAIK,KAAK;MACT,IAAIlE,OAAO,CAAC2D,aAAa,IAAI,CAACO,KAAK,GAAG7F,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC2D,aAAa,CAAC,EAAEpF,MAAM,EAAE;QAC9E8D,MAAM,CAACsB,aAAa,GAAG,CAAC,CAAC;QACzB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC3F,MAAM,EAAE,EAAE4F,CAAC,EACjC9B,MAAM,CAACsB,aAAa,CAACO,KAAK,CAACC,CAAC,CAAC,CAAC,GAAGnE,OAAO,CAAC2D,aAAa,CAACO,KAAK,CAACC,CAAC,CAAC,CAAC;MACxE;MACA,OAAO9B,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQ3B,OAAO,CAAClC,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;MACzC,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;IACxE,CAAC;IAED,OAAOxC,OAAO;EAClB,CAAC,EAAG;EAEJxC,KAAK,CAACkG,KAAK,GAAI,YAAW;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,KAAK,CAACjG,UAAU,EAAE;MACvB,IAAI,CAACkG,QAAQ,GAAG,EAAE;MAClB,IAAIlG,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ8F,KAAK,CAAC5F,SAAS,CAACwB,OAAO,GAAG,EAAE;;IAE5B;AACR;AACA;AACA;AACA;AACA;IACQoE,KAAK,CAAC5F,SAAS,CAAC6F,QAAQ,GAAGvG,KAAK,CAACwG,UAAU;;IAE3C;AACR;AACA;AACA;AACA;AACA;IACQF,KAAK,CAAC5F,SAAS,CAAC+F,MAAM,GAAGzG,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;IAEvE;AACR;AACA;AACA;AACA;AACA;IACQuF,KAAK,CAAC5F,SAAS,CAACsE,IAAI,GAAG,EAAE;;IAEzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQsB,KAAK,CAACtE,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;MACvC,OAAO,IAAIiG,KAAK,CAACjG,UAAU,CAAC;IAChC,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQiG,KAAK,CAACrE,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;MAC5C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;MAC7B,IAAIE,OAAO,CAACA,OAAO,IAAI,IAAI,IAAI3B,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACA,OAAO,CAAC;MACpE,IAAIA,OAAO,CAACqE,QAAQ,IAAI,IAAI,IAAIrE,OAAO,CAACqE,QAAQ,CAAC9F,MAAM,EACnD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACqE,QAAQ,CAAC9F,MAAM,EAAE,EAAED,CAAC,EAC5CN,KAAK,CAACE,KAAK,CAACsG,QAAQ,CAACzE,MAAM,CAACC,OAAO,CAACqE,QAAQ,CAAC/F,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;MAClH,IAAIT,OAAO,CAACuE,MAAM,IAAI,IAAI,IAAIlG,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,QAAQ,CAAC,EACvEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACuE,MAAM,CAAC;MACnE,IAAIvE,OAAO,CAAC8C,IAAI,IAAI,IAAI,IAAIzE,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,MAAM,CAAC,EACnEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC8C,IAAI,CAAC;MACjE,OAAO7C,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQmE,KAAK,CAACjD,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;MAC9D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ2D,KAAK,CAAChD,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;MAC3C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;QAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAACkG,KAAK,EAAE;MACpG,OAAO/C,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;QACzB,QAAQmB,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACF1B,OAAO,CAACA,OAAO,GAAGqB,MAAM,CAACV,MAAM,EAAE;YACjC;UACJ,KAAK,CAAC;YACF,IAAI,EAAEX,OAAO,CAACqE,QAAQ,IAAIrE,OAAO,CAACqE,QAAQ,CAAC9F,MAAM,CAAC,EAC9CyB,OAAO,CAACqE,QAAQ,GAAG,EAAE;YACzBrE,OAAO,CAACqE,QAAQ,CAACI,IAAI,CAACzG,KAAK,CAACE,KAAK,CAACsG,QAAQ,CAACpD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC,CAAC;YAC3E;UACJ,KAAK,CAAC;YACFP,OAAO,CAACuE,MAAM,GAAGlD,MAAM,CAACR,MAAM,EAAE;YAChC;UACJ,KAAK,CAAC;YACFb,OAAO,CAAC8C,IAAI,GAAGzB,MAAM,CAACV,MAAM,EAAE;YAC9B;UACJ;YACIU,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QAAM;MAEd;MACA,OAAO1B,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQoE,KAAK,CAACxC,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;MACrD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ6D,KAAK,CAACvC,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;MACpC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAIA,OAAO,CAACA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACA,OAAO,CAAC,EAChC,OAAO,0BAA0B;MACzC,IAAIA,OAAO,CAACqE,QAAQ,IAAI,IAAI,IAAIrE,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;QAChE,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAACqE,QAAQ,CAAC,EAChC,OAAO,0BAA0B;QACrC,KAAK,IAAI/F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACqE,QAAQ,CAAC9F,MAAM,EAAE,EAAED,CAAC,EAAE;UAC9C,IAAIwD,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAACsG,QAAQ,CAAC3C,MAAM,CAAC7B,OAAO,CAACqE,QAAQ,CAAC/F,CAAC,CAAC,CAAC;UAC5D,IAAIwD,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;QAClC;MACJ;MACA,IAAI9B,OAAO,CAACuE,MAAM,IAAI,IAAI,IAAIvE,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACuE,MAAM,CAAC,IAAI,EAAEvE,OAAO,CAACuE,MAAM,IAAIzG,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACuE,MAAM,CAACvC,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACuE,MAAM,CAACtC,IAAI,CAAC,CAAC,EACpI,OAAO,+BAA+B;MAC9C,IAAIjC,OAAO,CAAC8C,IAAI,IAAI,IAAI,IAAI9C,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC8C,IAAI,CAAC,EAC7B,OAAO,uBAAuB;MACtC,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQsB,KAAK,CAACjC,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;MACjD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAClCD,MAAM,CAACgC,QAAQ,GAAG,EAAE;MACxB,IAAIjC,OAAO,CAACE,QAAQ,EAAE;QAClBD,MAAM,CAACrC,OAAO,GAAG,EAAE;QACnB,IAAIlC,KAAK,CAACc,IAAI,EAAE;UACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;UACrCyD,MAAM,CAACkC,MAAM,GAAGnC,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;QAClH,CAAC,MACGF,MAAM,CAACkC,MAAM,GAAGnC,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;QACtDJ,MAAM,CAACS,IAAI,GAAG,EAAE;MACpB;MACA,IAAI9C,OAAO,CAACA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DmC,MAAM,CAACrC,OAAO,GAAGA,OAAO,CAACA,OAAO;MACpC,IAAIA,OAAO,CAACqE,QAAQ,IAAIrE,OAAO,CAACqE,QAAQ,CAAC9F,MAAM,EAAE;QAC7C8D,MAAM,CAACgC,QAAQ,GAAG,EAAE;QACpB,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACqE,QAAQ,CAAC9F,MAAM,EAAE,EAAE4F,CAAC,EAC5C9B,MAAM,CAACgC,QAAQ,CAACF,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAACsG,QAAQ,CAACrC,QAAQ,CAACnC,OAAO,CAACqE,QAAQ,CAACF,CAAC,CAAC,EAAE/B,OAAO,CAAC;MACxF;MACA,IAAIpC,OAAO,CAACuE,MAAM,IAAI,IAAI,IAAIvE,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,IAAI,OAAOF,OAAO,CAACuE,MAAM,KAAK,QAAQ,EAClClC,MAAM,CAACkC,MAAM,GAAGnC,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACuE,MAAM,CAAC,GAAGvE,OAAO,CAACuE,MAAM,CAAC,KAEnFlC,MAAM,CAACkC,MAAM,GAAGnC,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACuE,MAAM,CAAC,GAAGnC,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACuE,MAAM,CAACvC,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACuE,MAAM,CAACtC,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACuE,MAAM;MAC1O,IAAIvE,OAAO,CAAC8C,IAAI,IAAI,IAAI,IAAI9C,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDmC,MAAM,CAACS,IAAI,GAAG9C,OAAO,CAAC8C,IAAI;MAC9B,OAAOT,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQ+B,KAAK,CAAC5F,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;MACvC,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;IACxE,CAAC;IAED,OAAOkB,KAAK;EAChB,CAAC,EAAG;EAEJlG,KAAK,CAAC0C,IAAI,GAAI,YAAW;IAErB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,IAAI,CAACzC,UAAU,EAAE;MACtB,IAAI,CAAC0G,cAAc,GAAG,CAAC,CAAC;MACxB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;MACzB,IAAI3G,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQsC,IAAI,CAACpC,SAAS,CAACuG,MAAM,GAAG,CAAC;;IAEzB;AACR;AACA;AACA;AACA;AACA;IACQnE,IAAI,CAACpC,SAAS,CAACwG,IAAI,GAAG,EAAE;;IAExB;AACR;AACA;AACA;AACA;AACA;IACQpE,IAAI,CAACpC,SAAS,CAACyG,IAAI,GAAG,EAAE;;IAExB;AACR;AACA;AACA;AACA;AACA;IACQrE,IAAI,CAACpC,SAAS,CAACqG,cAAc,GAAG/G,KAAK,CAAC8F,WAAW;;IAEjD;AACR;AACA;AACA;AACA;AACA;IACQhD,IAAI,CAACpC,SAAS,CAACsG,eAAe,GAAGhH,KAAK,CAAC8F,WAAW;;IAElD;AACR;AACA;AACA;AACA;AACA;IACQhD,IAAI,CAACpC,SAAS,CAAC0G,UAAU,GAAG,CAAC;;IAE7B;AACR;AACA;AACA;AACA;AACA;IACQtE,IAAI,CAACpC,SAAS,CAAC2G,MAAM,GAAG,KAAK;;IAE7B;AACR;AACA;AACA;AACA;AACA;IACQvE,IAAI,CAACpC,SAAS,CAAC4G,QAAQ,GAAG,EAAE;;IAE5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQxE,IAAI,CAACd,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;MACtC,OAAO,IAAIyC,IAAI,CAACzC,UAAU,CAAC;IAC/B,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQyC,IAAI,CAACb,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;MAC3C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;MAC7B,IAAIE,OAAO,CAAC+E,MAAM,IAAI,IAAI,IAAI1G,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,QAAQ,CAAC,EACvEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,CAAC,CAAC,CAAC8C,KAAK,CAACrD,OAAO,CAAC+E,MAAM,CAAC;MACjE,IAAI/E,OAAO,CAACgF,IAAI,IAAI,IAAI,IAAI3G,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,MAAM,CAAC,EACnEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACgF,IAAI,CAAC;MACjE,IAAIhF,OAAO,CAACiF,IAAI,IAAI,IAAI,IAAI5G,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,MAAM,CAAC,EACnEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACiF,IAAI,CAAC;MACjE,IAAIjF,OAAO,CAAC6E,cAAc,IAAI,IAAI,IAAIxG,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,gBAAgB,CAAC,EACvF,KAAK,IAAI5B,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC6E,cAAc,CAAC,EAAEvG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;QAC9E2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAACD,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACvC,IAAI,CAACE,CAAC,CAAC,CAAC;QACjGN,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACyE,MAAM,CAACtF,MAAM,CAACC,OAAO,CAAC6E,cAAc,CAACzG,IAAI,CAACE,CAAC,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE,CAACA,MAAM,EAAE;MACtI;MACJ,IAAIT,OAAO,CAAC8E,eAAe,IAAI,IAAI,IAAIzG,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,iBAAiB,CAAC,EACzF,KAAK,IAAI5B,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC8E,eAAe,CAAC,EAAExG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;QAC/E2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAACD,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACvC,IAAI,CAACE,CAAC,CAAC,CAAC;QACjGN,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACyE,MAAM,CAACtF,MAAM,CAACC,OAAO,CAAC8E,eAAe,CAAC1G,IAAI,CAACE,CAAC,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE,CAACA,MAAM,EAAE;MACvI;MACJ,IAAIT,OAAO,CAACkF,UAAU,IAAI,IAAI,IAAI7G,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,YAAY,CAAC,EAC/EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACA,MAAM,CAACP,OAAO,CAACkF,UAAU,CAAC;MACvE,IAAIlF,OAAO,CAACmF,MAAM,IAAI,IAAI,IAAI9G,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,QAAQ,CAAC,EACvEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACS,IAAI,CAAChB,OAAO,CAACmF,MAAM,CAAC;MACjE,IAAInF,OAAO,CAACoF,QAAQ,IAAI,IAAI,IAAI/G,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,UAAU,CAAC,EAC3EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACoF,QAAQ,CAAC;MACrE,OAAOnF,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQW,IAAI,CAACO,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;MAC7D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQG,IAAI,CAACQ,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;MAC1C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;QAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC0C,IAAI,EAAE;QAAEkD,GAAG;MACxG,OAAOzC,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;QACzB,QAAQmB,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACF1B,OAAO,CAAC+E,MAAM,GAAG1D,MAAM,CAACgC,KAAK,EAAE;YAC/B;UACJ,KAAK,CAAC;YACFrD,OAAO,CAACgF,IAAI,GAAG3D,MAAM,CAACV,MAAM,EAAE;YAC9B;UACJ,KAAK,CAAC;YACFX,OAAO,CAACiF,IAAI,GAAG5D,MAAM,CAACV,MAAM,EAAE;YAC9B;UACJ,KAAK,CAAC;YACFU,MAAM,CAAC0C,IAAI,EAAE,CAACtC,GAAG,EAAE;YACnB,IAAIzB,OAAO,CAAC6E,cAAc,KAAK/G,KAAK,CAAC8F,WAAW,EAC5C5D,OAAO,CAAC6E,cAAc,GAAG,CAAC,CAAC;YAC/Bf,GAAG,GAAGzC,MAAM,CAACV,MAAM,EAAE;YACrBU,MAAM,CAACI,GAAG,EAAE;YACZzB,OAAO,CAAC6E,cAAc,CAACf,GAAG,CAAC,GAAG9F,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACyE,MAAM,CAACjE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;YACrF;UACJ,KAAK,CAAC;YACFc,MAAM,CAAC0C,IAAI,EAAE,CAACtC,GAAG,EAAE;YACnB,IAAIzB,OAAO,CAAC8E,eAAe,KAAKhH,KAAK,CAAC8F,WAAW,EAC7C5D,OAAO,CAAC8E,eAAe,GAAG,CAAC,CAAC;YAChChB,GAAG,GAAGzC,MAAM,CAACV,MAAM,EAAE;YACrBU,MAAM,CAACI,GAAG,EAAE;YACZzB,OAAO,CAAC8E,eAAe,CAAChB,GAAG,CAAC,GAAG9F,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACyE,MAAM,CAACjE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;YACtF;UACJ,KAAK,CAAC;YACFP,OAAO,CAACkF,UAAU,GAAG7D,MAAM,CAACd,MAAM,EAAE;YACpC;UACJ,KAAK,CAAC;YACFP,OAAO,CAACmF,MAAM,GAAG9D,MAAM,CAACL,IAAI,EAAE;YAC9B;UACJ,KAAK,CAAC;YACFhB,OAAO,CAACoF,QAAQ,GAAG/D,MAAM,CAACV,MAAM,EAAE;YAClC;UACJ;YACIU,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QAAM;MAEd;MACA,OAAO1B,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQY,IAAI,CAACgB,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;MACpD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQK,IAAI,CAACiB,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;MACnC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAIA,OAAO,CAAC+E,MAAM,IAAI,IAAI,IAAI/E,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,QAAQF,OAAO,CAAC+E,MAAM;QACtB;UACI,OAAO,6BAA6B;QACxC,KAAK,CAAC;QACN,KAAK,CAAC;QACN,KAAK,CAAC;QACN,KAAK,CAAC;QACN,KAAK,CAAC;QACN,KAAK,CAAC;QACN,KAAK,CAAC;QACN,KAAK,CAAC;QACN,KAAK,CAAC;QACN,KAAK,CAAC;UACF;MAAM;MAEd,IAAI/E,OAAO,CAACgF,IAAI,IAAI,IAAI,IAAIhF,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACgF,IAAI,CAAC,EAC7B,OAAO,uBAAuB;MACtC,IAAIhF,OAAO,CAACiF,IAAI,IAAI,IAAI,IAAIjF,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACiF,IAAI,CAAC,EAC7B,OAAO,uBAAuB;MACtC,IAAIjF,OAAO,CAAC6E,cAAc,IAAI,IAAI,IAAI7E,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;QAC5E,IAAI,CAACpC,KAAK,CAACkG,QAAQ,CAAChE,OAAO,CAAC6E,cAAc,CAAC,EACvC,OAAO,iCAAiC;QAC5C,IAAIf,GAAG,GAAGzF,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC6E,cAAc,CAAC;QAC7C,KAAK,IAAIvG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,GAAG,CAACvF,MAAM,EAAE,EAAED,CAAC,EAAE;UACjC,IAAIwD,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACyE,MAAM,CAACxD,MAAM,CAAC7B,OAAO,CAAC6E,cAAc,CAACf,GAAG,CAACxF,CAAC,CAAC,CAAC,CAAC;UAC1E,IAAIwD,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;QACxC;MACJ;MACA,IAAI9B,OAAO,CAAC8E,eAAe,IAAI,IAAI,IAAI9E,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;QAC9E,IAAI,CAACpC,KAAK,CAACkG,QAAQ,CAAChE,OAAO,CAAC8E,eAAe,CAAC,EACxC,OAAO,kCAAkC;QAC7C,IAAIhB,GAAG,GAAGzF,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC8E,eAAe,CAAC;QAC9C,KAAK,IAAIxG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,GAAG,CAACvF,MAAM,EAAE,EAAED,CAAC,EAAE;UACjC,IAAIwD,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACyE,MAAM,CAACxD,MAAM,CAAC7B,OAAO,CAAC8E,eAAe,CAAChB,GAAG,CAACxF,CAAC,CAAC,CAAC,CAAC;UAC3E,IAAIwD,KAAK,EACL,OAAO,kBAAkB,GAAGA,KAAK;QACzC;MACJ;MACA,IAAI9B,OAAO,CAACkF,UAAU,IAAI,IAAI,IAAIlF,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACkF,UAAU,CAAC,EACpC,OAAO,8BAA8B;MAC7C,IAAIlF,OAAO,CAACmF,MAAM,IAAI,IAAI,IAAInF,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,IAAI,OAAOF,OAAO,CAACmF,MAAM,KAAK,SAAS,EACnC,OAAO,0BAA0B;MACzC,IAAInF,OAAO,CAACoF,QAAQ,IAAI,IAAI,IAAIpF,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACoF,QAAQ,CAAC,EACjC,OAAO,2BAA2B;MAC1C,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQxE,IAAI,CAACuB,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;MAChD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAID,OAAO,CAAC6B,OAAO,IAAI7B,OAAO,CAACE,QAAQ,EAAE;QACrCD,MAAM,CAACwC,cAAc,GAAG,CAAC,CAAC;QAC1BxC,MAAM,CAACyC,eAAe,GAAG,CAAC,CAAC;MAC/B;MACA,IAAI1C,OAAO,CAACE,QAAQ,EAAE;QAClBD,MAAM,CAAC0C,MAAM,GAAG3C,OAAO,CAACmB,KAAK,KAAKd,MAAM,GAAG,SAAS,GAAG,CAAC;QACxDJ,MAAM,CAAC2C,IAAI,GAAG,EAAE;QAChB3C,MAAM,CAAC4C,IAAI,GAAG,EAAE;QAChB5C,MAAM,CAAC6C,UAAU,GAAG,CAAC;QACrB7C,MAAM,CAAC8C,MAAM,GAAG,KAAK;QACrB9C,MAAM,CAAC+C,QAAQ,GAAG,EAAE;MACxB;MACA,IAAIpF,OAAO,CAAC+E,MAAM,IAAI,IAAI,IAAI/E,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DmC,MAAM,CAAC0C,MAAM,GAAG3C,OAAO,CAACmB,KAAK,KAAKd,MAAM,GAAGzE,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAAC0E,MAAM,CAACtF,OAAO,CAAC+E,MAAM,CAAC,GAAG/E,OAAO,CAAC+E,MAAM;MACvG,IAAI/E,OAAO,CAACgF,IAAI,IAAI,IAAI,IAAIhF,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDmC,MAAM,CAAC2C,IAAI,GAAGhF,OAAO,CAACgF,IAAI;MAC9B,IAAIhF,OAAO,CAACiF,IAAI,IAAI,IAAI,IAAIjF,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDmC,MAAM,CAAC4C,IAAI,GAAGjF,OAAO,CAACiF,IAAI;MAC9B,IAAIf,KAAK;MACT,IAAIlE,OAAO,CAAC6E,cAAc,IAAI,CAACX,KAAK,GAAG7F,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC6E,cAAc,CAAC,EAAEtG,MAAM,EAAE;QAChF8D,MAAM,CAACwC,cAAc,GAAG,CAAC,CAAC;QAC1B,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC3F,MAAM,EAAE,EAAE4F,CAAC,EACjC9B,MAAM,CAACwC,cAAc,CAACX,KAAK,CAACC,CAAC,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACyE,MAAM,CAAClD,QAAQ,CAACnC,OAAO,CAAC6E,cAAc,CAACX,KAAK,CAACC,CAAC,CAAC,CAAC,EAAE/B,OAAO,CAAC;MACrH;MACA,IAAIpC,OAAO,CAAC8E,eAAe,IAAI,CAACZ,KAAK,GAAG7F,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC8E,eAAe,CAAC,EAAEvG,MAAM,EAAE;QAClF8D,MAAM,CAACyC,eAAe,GAAG,CAAC,CAAC;QAC3B,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC3F,MAAM,EAAE,EAAE4F,CAAC,EACjC9B,MAAM,CAACyC,eAAe,CAACZ,KAAK,CAACC,CAAC,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACyE,MAAM,CAAClD,QAAQ,CAACnC,OAAO,CAAC8E,eAAe,CAACZ,KAAK,CAACC,CAAC,CAAC,CAAC,EAAE/B,OAAO,CAAC;MACvH;MACA,IAAIpC,OAAO,CAACkF,UAAU,IAAI,IAAI,IAAIlF,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEmC,MAAM,CAAC6C,UAAU,GAAGlF,OAAO,CAACkF,UAAU;MAC1C,IAAIlF,OAAO,CAACmF,MAAM,IAAI,IAAI,IAAInF,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DmC,MAAM,CAAC8C,MAAM,GAAGnF,OAAO,CAACmF,MAAM;MAClC,IAAInF,OAAO,CAACoF,QAAQ,IAAI,IAAI,IAAIpF,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DmC,MAAM,CAAC+C,QAAQ,GAAGpF,OAAO,CAACoF,QAAQ;MACtC,OAAO/C,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQzB,IAAI,CAACpC,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;MACtC,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;IACxE,CAAC;IAEDtC,IAAI,CAACyE,MAAM,GAAI,YAAW;MAEtB;AACZ;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,MAAM,CAAClH,UAAU,EAAE;QACxB,IAAI,CAACoH,KAAK,GAAG,EAAE;QACf,IAAIpH,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACY+G,MAAM,CAAC7G,SAAS,CAAC+G,KAAK,GAAGzH,KAAK,CAACwG,UAAU;;MAEzC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYe,MAAM,CAACvF,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;QACxC,OAAO,IAAIkH,MAAM,CAAClH,UAAU,CAAC;MACjC,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYkH,MAAM,CAACtF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;QAC7C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAACuF,KAAK,IAAI,IAAI,IAAIvF,OAAO,CAACuF,KAAK,CAAChH,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACuF,KAAK,CAAChH,MAAM,EAAE,EAAED,CAAC,EACzC2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACuF,KAAK,CAACjH,CAAC,CAAC,CAAC;QACzE,OAAO2B,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYoF,MAAM,CAAClE,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;QAC/D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY4E,MAAM,CAACjE,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;QAC5C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;UAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC0C,IAAI,CAACyE,MAAM,EAAE;QAC1G,OAAOhE,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;UACzB,QAAQmB,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACF,IAAI,EAAE1B,OAAO,CAACuF,KAAK,IAAIvF,OAAO,CAACuF,KAAK,CAAChH,MAAM,CAAC,EACxCyB,OAAO,CAACuF,KAAK,GAAG,EAAE;cACtBvF,OAAO,CAACuF,KAAK,CAACd,IAAI,CAACpD,MAAM,CAACV,MAAM,EAAE,CAAC;cACnC;YACJ;cACIU,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAO1B,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYqF,MAAM,CAACzD,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;QACtD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY8E,MAAM,CAACxD,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;QACrC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAACuF,KAAK,IAAI,IAAI,IAAIvF,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;UAC1D,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAACuF,KAAK,CAAC,EAC7B,OAAO,uBAAuB;UAClC,KAAK,IAAIjH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACuF,KAAK,CAAChH,MAAM,EAAE,EAAED,CAAC,EACzC,IAAI,CAACR,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACuF,KAAK,CAACjH,CAAC,CAAC,CAAC,EACjC,OAAO,0BAA0B;QAC7C;QACA,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY+G,MAAM,CAAClD,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;QAClD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;QACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAClCD,MAAM,CAACkD,KAAK,GAAG,EAAE;QACrB,IAAIvF,OAAO,CAACuF,KAAK,IAAIvF,OAAO,CAACuF,KAAK,CAAChH,MAAM,EAAE;UACvC8D,MAAM,CAACkD,KAAK,GAAG,EAAE;UACjB,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACuF,KAAK,CAAChH,MAAM,EAAE,EAAE4F,CAAC,EACzC9B,MAAM,CAACkD,KAAK,CAACpB,CAAC,CAAC,GAAGnE,OAAO,CAACuF,KAAK,CAACpB,CAAC,CAAC;QAC1C;QACA,OAAO9B,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACYgD,MAAM,CAAC7G,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;QACxC,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;MACxE,CAAC;MAED,OAAOmC,MAAM;IACjB,CAAC,EAAG;;IAEJ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQzE,IAAI,CAAC0E,MAAM,GAAI,YAAW;MACtB,IAAI7B,UAAU,GAAG,CAAC,CAAC;QAAEC,MAAM,GAAGrF,MAAM,CAACyB,MAAM,CAAC2D,UAAU,CAAC;MACvDC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;MACrCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;MACrCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;MACjCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC;MAClCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC;MAClCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;MACjCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;MACpCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;MACnCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;MACrCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;MACnC,OAAOC,MAAM;IACjB,CAAC,EAAG;IAEJ,OAAO9C,IAAI;EACf,CAAC,EAAG;EAEJ1C,KAAK,CAACsG,QAAQ,GAAI,YAAW;IAEzB;AACR;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,QAAQ,CAACrG,UAAU,EAAE;MAC1B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQkG,QAAQ,CAAChG,SAAS,CAACgH,IAAI,GAAG,CAAC;;IAE3B;AACR;AACA;AACA;AACA;AACA;IACQhB,QAAQ,CAAChG,SAAS,CAACiH,MAAM,GAAG,CAAC;;IAE7B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQjB,QAAQ,CAAC1E,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;MAC1C,OAAO,IAAIqG,QAAQ,CAACrG,UAAU,CAAC;IACnC,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQqG,QAAQ,CAACzE,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;MAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;MAC7B,IAAIE,OAAO,CAACwF,IAAI,IAAI,IAAI,IAAInH,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,MAAM,CAAC,EACnEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,CAAC,CAAC,CAACA,MAAM,CAACP,OAAO,CAACwF,IAAI,CAAC;MAChE,IAAIxF,OAAO,CAACyF,MAAM,IAAI,IAAI,IAAIpH,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,QAAQ,CAAC,EACvEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACA,MAAM,CAACP,OAAO,CAACyF,MAAM,CAAC;MACnE,OAAOxF,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQuE,QAAQ,CAACrD,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;MACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ+D,QAAQ,CAACpD,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;MAC9C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;QAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAACsG,QAAQ,EAAE;MACvG,OAAOnD,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;QACzB,QAAQmB,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACF1B,OAAO,CAACwF,IAAI,GAAGnE,MAAM,CAACd,MAAM,EAAE;YAC9B;UACJ,KAAK,CAAC;YACFP,OAAO,CAACyF,MAAM,GAAGpE,MAAM,CAACd,MAAM,EAAE;YAChC;UACJ;YACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QAAM;MAEd;MACA,OAAO1B,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQwE,QAAQ,CAAC5C,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;MACxD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQiE,QAAQ,CAAC3C,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;MACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAIA,OAAO,CAACwF,IAAI,IAAI,IAAI,IAAIxF,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACwF,IAAI,CAAC,EAC9B,OAAO,wBAAwB;MACvC,IAAIxF,OAAO,CAACyF,MAAM,IAAI,IAAI,IAAIzF,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACyF,MAAM,CAAC,EAChC,OAAO,0BAA0B;MACzC,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQjB,QAAQ,CAACrC,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;MACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAID,OAAO,CAACE,QAAQ,EAAE;QAClBD,MAAM,CAACmD,IAAI,GAAG,CAAC;QACfnD,MAAM,CAACoD,MAAM,GAAG,CAAC;MACrB;MACA,IAAIzF,OAAO,CAACwF,IAAI,IAAI,IAAI,IAAIxF,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDmC,MAAM,CAACmD,IAAI,GAAGxF,OAAO,CAACwF,IAAI;MAC9B,IAAIxF,OAAO,CAACyF,MAAM,IAAI,IAAI,IAAIzF,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DmC,MAAM,CAACoD,MAAM,GAAGzF,OAAO,CAACyF,MAAM;MAClC,OAAOpD,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQmC,QAAQ,CAAChG,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;MAC1C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;IACxE,CAAC;IAED,OAAOsB,QAAQ;EACnB,CAAC,EAAG;EAEJtG,KAAK,CAAC4C,IAAI,GAAI,YAAW;IAErB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,IAAI,CAAC3C,UAAU,EAAE;MACtB,IAAI,CAAC2D,KAAK,GAAG,EAAE;MACf,IAAI,CAAC4D,KAAK,GAAG,EAAE;MACf,IAAIvH,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQwC,IAAI,CAACtC,SAAS,CAACmH,YAAY,GAAG,EAAE;;IAEhC;AACR;AACA;AACA;AACA;AACA;IACQ7E,IAAI,CAACtC,SAAS,CAACoH,KAAK,GAAG,CAAC;;IAExB;AACR;AACA;AACA;AACA;AACA;IACQ9E,IAAI,CAACtC,SAAS,CAACqH,iBAAiB,GAAG,EAAE;;IAErC;AACR;AACA;AACA;AACA;AACA;IACQ/E,IAAI,CAACtC,SAAS,CAACsH,IAAI,GAAG,EAAE;;IAExB;AACR;AACA;AACA;AACA;AACA;IACQhF,IAAI,CAACtC,SAAS,CAACuH,UAAU,GAAG,EAAE;;IAE9B;AACR;AACA;AACA;AACA;AACA;IACQjF,IAAI,CAACtC,SAAS,CAACc,WAAW,GAAG,IAAI;;IAEjC;AACR;AACA;AACA;AACA;AACA;IACQwB,IAAI,CAACtC,SAAS,CAACC,SAAS,GAAGX,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;IAEzE;AACR;AACA;AACA;AACA;AACA;IACQiC,IAAI,CAACtC,SAAS,CAACE,OAAO,GAAGZ,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;IAEvE;AACR;AACA;AACA;AACA;AACA;IACQiC,IAAI,CAACtC,SAAS,CAACsD,KAAK,GAAGhE,KAAK,CAACwG,UAAU;;IAEvC;AACR;AACA;AACA;AACA;AACA;IACQxD,IAAI,CAACtC,SAAS,CAACkH,KAAK,GAAG5H,KAAK,CAACwG,UAAU;;IAEvC;IACA,IAAI0B,YAAY;;IAEhB;AACR;AACA;AACA;AACA;AACA;IACQ3H,MAAM,CAAC4H,cAAc,CAACnF,IAAI,CAACtC,SAAS,EAAE,IAAI,EAAE;MACxC0H,GAAG,EAAEpI,KAAK,CAACqI,WAAW,CAACH,YAAY,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;MAChEI,GAAG,EAAEtI,KAAK,CAACuI,WAAW,CAACL,YAAY;IACvC,CAAC,CAAC;;IAEF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQlF,IAAI,CAAChB,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;MACtC,OAAO,IAAI2C,IAAI,CAAC3C,UAAU,CAAC;IAC/B,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ2C,IAAI,CAACf,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;MAC3C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;MAC7B,IAAIE,OAAO,CAAC2F,YAAY,IAAI,IAAI,IAAItH,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,cAAc,CAAC,EACnFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC2F,YAAY,CAAC;MACzE,IAAI3F,OAAO,CAAC4F,KAAK,IAAI,IAAI,IAAIvH,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,OAAO,CAAC,EACrEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACA,MAAM,CAACP,OAAO,CAAC4F,KAAK,CAAC;MAClE,IAAI5F,OAAO,CAAC8F,IAAI,IAAI,IAAI,IAAIzH,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,MAAM,CAAC,EACnEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC8F,IAAI,CAAC;MACjE,IAAI9F,OAAO,CAACV,WAAW,IAAI,IAAI,IAAIjB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,aAAa,CAAC,EACjFhC,KAAK,CAACE,KAAK,CAAC6C,WAAW,CAAChB,MAAM,CAACC,OAAO,CAACV,WAAW,EAAEW,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;MACjH,IAAIT,OAAO,CAACvB,SAAS,IAAI,IAAI,IAAIJ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,WAAW,CAAC,EAC7EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACvB,SAAS,CAAC;MACtE,IAAIuB,OAAO,CAACtB,OAAO,IAAI,IAAI,IAAIL,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACtB,OAAO,CAAC;MACpE,IAAIsB,OAAO,CAAC8B,KAAK,IAAI,IAAI,IAAI9B,OAAO,CAAC8B,KAAK,CAACvD,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAAC8B,KAAK,CAACvD,MAAM,EAAE,EAAED,CAAC,EACzCN,KAAK,CAACE,KAAK,CAACkG,KAAK,CAACrE,MAAM,CAACC,OAAO,CAAC8B,KAAK,CAACxD,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,wBAAwB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;MAC7G,IAAIT,OAAO,CAAC0F,KAAK,IAAI,IAAI,IAAI1F,OAAO,CAAC0F,KAAK,CAACnH,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAAC0F,KAAK,CAACnH,MAAM,EAAE,EAAED,CAAC,EACzCN,KAAK,CAACE,KAAK,CAAC4C,IAAI,CAACf,MAAM,CAACC,OAAO,CAAC0F,KAAK,CAACpH,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,wBAAwB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;MAC5G,IAAIT,OAAO,CAAC+F,UAAU,IAAI,IAAI,IAAI1H,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,YAAY,CAAC,EAC/EC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC+F,UAAU,CAAC;MACzE,IAAI/F,OAAO,CAAC6F,iBAAiB,IAAI,IAAI,IAAIxH,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,mBAAmB,CAAC,EAC7FC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC6F,iBAAiB,CAAC;MAChF,OAAO5F,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQa,IAAI,CAACK,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;MAC7D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQK,IAAI,CAACM,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;MAC1C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;QAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC4C,IAAI,EAAE;MACnG,OAAOO,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;QACzB,QAAQmB,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACF1B,OAAO,CAAC2F,YAAY,GAAGtE,MAAM,CAACV,MAAM,EAAE;YACtC;UACJ,KAAK,CAAC;YACFX,OAAO,CAAC4F,KAAK,GAAGvE,MAAM,CAACd,MAAM,EAAE;YAC/B;UACJ,KAAK,EAAE;YACHP,OAAO,CAAC6F,iBAAiB,GAAGxE,MAAM,CAACV,MAAM,EAAE;YAC3C;UACJ,KAAK,CAAC;YACFX,OAAO,CAAC8F,IAAI,GAAGzE,MAAM,CAACV,MAAM,EAAE;YAC9B;UACJ,KAAK,EAAE;YACHX,OAAO,CAAC+F,UAAU,GAAG1E,MAAM,CAACV,MAAM,EAAE;YACpC;UACJ,KAAK,CAAC;YACFX,OAAO,CAACV,WAAW,GAAGtB,KAAK,CAACE,KAAK,CAAC6C,WAAW,CAACK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;YAC7E;UACJ,KAAK,CAAC;YACFP,OAAO,CAACvB,SAAS,GAAG4C,MAAM,CAACR,MAAM,EAAE;YACnC;UACJ,KAAK,CAAC;YACFb,OAAO,CAACtB,OAAO,GAAG2C,MAAM,CAACR,MAAM,EAAE;YACjC;UACJ,KAAK,EAAE;YACH,IAAI,EAAEb,OAAO,CAAC8B,KAAK,IAAI9B,OAAO,CAAC8B,KAAK,CAACvD,MAAM,CAAC,EACxCyB,OAAO,CAAC8B,KAAK,GAAG,EAAE;YACtB9B,OAAO,CAAC8B,KAAK,CAAC2C,IAAI,CAACzG,KAAK,CAACE,KAAK,CAACkG,KAAK,CAAChD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC,CAAC;YACrE;UACJ,KAAK,EAAE;YACH,IAAI,EAAEP,OAAO,CAAC0F,KAAK,IAAI1F,OAAO,CAAC0F,KAAK,CAACnH,MAAM,CAAC,EACxCyB,OAAO,CAAC0F,KAAK,GAAG,EAAE;YACtB1F,OAAO,CAAC0F,KAAK,CAACjB,IAAI,CAACzG,KAAK,CAACE,KAAK,CAAC4C,IAAI,CAACM,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC,CAAC;YACpE;UACJ;YACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QAAM;MAEd;MACA,OAAO1B,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQc,IAAI,CAACc,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;MACpD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQO,IAAI,CAACe,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;MACnC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAI7B,UAAU,GAAG,CAAC,CAAC;MACnB,IAAI6B,OAAO,CAAC2F,YAAY,IAAI,IAAI,IAAI3F,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;QACxE/B,UAAU,CAACmI,EAAE,GAAG,CAAC;QACjB,IAAI,CAACxI,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC2F,YAAY,CAAC,EACrC,OAAO,+BAA+B;MAC9C;MACA,IAAI3F,OAAO,CAAC4F,KAAK,IAAI,IAAI,IAAI5F,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;QAC1D,IAAI/B,UAAU,CAACmI,EAAE,KAAK,CAAC,EACnB,OAAO,qBAAqB;QAChCnI,UAAU,CAACmI,EAAE,GAAG,CAAC;QACjB,IAAI,CAACxI,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC4F,KAAK,CAAC,EAC/B,OAAO,yBAAyB;MACxC;MACA,IAAI5F,OAAO,CAAC6F,iBAAiB,IAAI,IAAI,IAAI7F,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChF,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC6F,iBAAiB,CAAC,EAC1C,OAAO,oCAAoC;MACnD,IAAI7F,OAAO,CAAC8F,IAAI,IAAI,IAAI,IAAI9F,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC8F,IAAI,CAAC,EAC7B,OAAO,uBAAuB;MACtC,IAAI9F,OAAO,CAAC+F,UAAU,IAAI,IAAI,IAAI/F,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC+F,UAAU,CAAC,EACnC,OAAO,6BAA6B;MAC5C,IAAI/F,OAAO,CAACV,WAAW,IAAI,IAAI,IAAIU,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EAAE;QACtE,IAAI4B,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC6C,WAAW,CAACc,MAAM,CAAC7B,OAAO,CAACV,WAAW,CAAC;QAC/D,IAAIwC,KAAK,EACL,OAAO,cAAc,GAAGA,KAAK;MACrC;MACA,IAAI9B,OAAO,CAACvB,SAAS,IAAI,IAAI,IAAIuB,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChE,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACvB,SAAS,CAAC,IAAI,EAAEuB,OAAO,CAACvB,SAAS,IAAIX,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACvB,SAAS,CAACuD,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACvB,SAAS,CAACwD,IAAI,CAAC,CAAC,EAChJ,OAAO,kCAAkC;MACjD,IAAIjC,OAAO,CAACtB,OAAO,IAAI,IAAI,IAAIsB,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACtB,OAAO,CAAC,IAAI,EAAEsB,OAAO,CAACtB,OAAO,IAAIZ,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACtB,OAAO,CAACsD,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACtB,OAAO,CAACuD,IAAI,CAAC,CAAC,EACxI,OAAO,gCAAgC;MAC/C,IAAIjC,OAAO,CAAC8B,KAAK,IAAI,IAAI,IAAI9B,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;QAC1D,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAAC8B,KAAK,CAAC,EAC7B,OAAO,uBAAuB;QAClC,KAAK,IAAIxD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAAC8B,KAAK,CAACvD,MAAM,EAAE,EAAED,CAAC,EAAE;UAC3C,IAAIwD,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAACkG,KAAK,CAACvC,MAAM,CAAC7B,OAAO,CAAC8B,KAAK,CAACxD,CAAC,CAAC,CAAC;UACtD,IAAIwD,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;QAC/B;MACJ;MACA,IAAI9B,OAAO,CAAC0F,KAAK,IAAI,IAAI,IAAI1F,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;QAC1D,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAAC0F,KAAK,CAAC,EAC7B,OAAO,uBAAuB;QAClC,KAAK,IAAIpH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAAC0F,KAAK,CAACnH,MAAM,EAAE,EAAED,CAAC,EAAE;UAC3C,IAAIwD,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC4C,IAAI,CAACe,MAAM,CAAC7B,OAAO,CAAC0F,KAAK,CAACpH,CAAC,CAAC,CAAC;UACrD,IAAIwD,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;QAC/B;MACJ;MACA,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQhB,IAAI,CAACqB,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;MAChD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAAE;QACpCD,MAAM,CAACP,KAAK,GAAG,EAAE;QACjBO,MAAM,CAACqD,KAAK,GAAG,EAAE;MACrB;MACA,IAAItD,OAAO,CAACE,QAAQ,EAAE;QAClBD,MAAM,CAACyD,IAAI,GAAG,EAAE;QAChBzD,MAAM,CAAC/C,WAAW,GAAG,IAAI;QACzB,IAAIxB,KAAK,CAACc,IAAI,EAAE;UACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;UACrCyD,MAAM,CAAC5D,SAAS,GAAG2D,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;QACrH,CAAC,MACGF,MAAM,CAAC5D,SAAS,GAAG2D,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;QACzD,IAAI3E,KAAK,CAACc,IAAI,EAAE;UACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;UACrCyD,MAAM,CAAC3D,OAAO,GAAG0D,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;QACnH,CAAC,MACGF,MAAM,CAAC3D,OAAO,GAAG0D,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;QACvDJ,MAAM,CAAC0D,UAAU,GAAG,EAAE;QACtB1D,MAAM,CAACwD,iBAAiB,GAAG,EAAE;MACjC;MACA,IAAI7F,OAAO,CAAC2F,YAAY,IAAI,IAAI,IAAI3F,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;QACxEmC,MAAM,CAACsD,YAAY,GAAG3F,OAAO,CAAC2F,YAAY;QAC1C,IAAIvD,OAAO,CAACmE,MAAM,EACdlE,MAAM,CAACiE,EAAE,GAAG,cAAc;MAClC;MACA,IAAItG,OAAO,CAAC4F,KAAK,IAAI,IAAI,IAAI5F,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;QAC1DmC,MAAM,CAACuD,KAAK,GAAG5F,OAAO,CAAC4F,KAAK;QAC5B,IAAIxD,OAAO,CAACmE,MAAM,EACdlE,MAAM,CAACiE,EAAE,GAAG,OAAO;MAC3B;MACA,IAAItG,OAAO,CAAC8F,IAAI,IAAI,IAAI,IAAI9F,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDmC,MAAM,CAACyD,IAAI,GAAG9F,OAAO,CAAC8F,IAAI;MAC9B,IAAI9F,OAAO,CAACV,WAAW,IAAI,IAAI,IAAIU,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEmC,MAAM,CAAC/C,WAAW,GAAGtB,KAAK,CAACE,KAAK,CAAC6C,WAAW,CAACoB,QAAQ,CAACnC,OAAO,CAACV,WAAW,EAAE8C,OAAO,CAAC;MACvF,IAAIpC,OAAO,CAACvB,SAAS,IAAI,IAAI,IAAIuB,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChE,IAAI,OAAOF,OAAO,CAACvB,SAAS,KAAK,QAAQ,EACrC4D,MAAM,CAAC5D,SAAS,GAAG2D,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACvB,SAAS,CAAC,GAAGuB,OAAO,CAACvB,SAAS,CAAC,KAE5F4D,MAAM,CAAC5D,SAAS,GAAG2D,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACvB,SAAS,CAAC,GAAG2D,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACvB,SAAS,CAACuD,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACvB,SAAS,CAACwD,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACvB,SAAS;MACzP,IAAIuB,OAAO,CAACtB,OAAO,IAAI,IAAI,IAAIsB,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,OAAOF,OAAO,CAACtB,OAAO,KAAK,QAAQ,EACnC2D,MAAM,CAAC3D,OAAO,GAAG0D,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACtB,OAAO,CAAC,GAAGsB,OAAO,CAACtB,OAAO,CAAC,KAEtF2D,MAAM,CAAC3D,OAAO,GAAG0D,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACtB,OAAO,CAAC,GAAG0D,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACtB,OAAO,CAACsD,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACtB,OAAO,CAACuD,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACtB,OAAO;MAC/O,IAAIsB,OAAO,CAAC8B,KAAK,IAAI9B,OAAO,CAAC8B,KAAK,CAACvD,MAAM,EAAE;QACvC8D,MAAM,CAACP,KAAK,GAAG,EAAE;QACjB,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAAC8B,KAAK,CAACvD,MAAM,EAAE,EAAE4F,CAAC,EACzC9B,MAAM,CAACP,KAAK,CAACqC,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAACkG,KAAK,CAACjC,QAAQ,CAACnC,OAAO,CAAC8B,KAAK,CAACqC,CAAC,CAAC,EAAE/B,OAAO,CAAC;MAC/E;MACA,IAAIpC,OAAO,CAAC0F,KAAK,IAAI1F,OAAO,CAAC0F,KAAK,CAACnH,MAAM,EAAE;QACvC8D,MAAM,CAACqD,KAAK,GAAG,EAAE;QACjB,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAAC0F,KAAK,CAACnH,MAAM,EAAE,EAAE4F,CAAC,EACzC9B,MAAM,CAACqD,KAAK,CAACvB,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAAC4C,IAAI,CAACqB,QAAQ,CAACnC,OAAO,CAAC0F,KAAK,CAACvB,CAAC,CAAC,EAAE/B,OAAO,CAAC;MAC9E;MACA,IAAIpC,OAAO,CAAC+F,UAAU,IAAI,IAAI,IAAI/F,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEmC,MAAM,CAAC0D,UAAU,GAAG/F,OAAO,CAAC+F,UAAU;MAC1C,IAAI/F,OAAO,CAAC6F,iBAAiB,IAAI,IAAI,IAAI7F,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFmC,MAAM,CAACwD,iBAAiB,GAAG7F,OAAO,CAAC6F,iBAAiB;MACxD,OAAOxD,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQvB,IAAI,CAACtC,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;MACtC,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;IACxE,CAAC;IAED,OAAOpC,IAAI;EACf,CAAC,EAAG;EAEJ5C,KAAK,CAAC+C,aAAa,GAAI,YAAW;IAE9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,aAAa,CAAC9C,UAAU,EAAE;MAC/B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ2C,aAAa,CAACzC,SAAS,CAACgI,QAAQ,GAAG,IAAI;;IAEvC;AACR;AACA;AACA;AACA;AACA;IACQvF,aAAa,CAACzC,SAAS,CAACiI,QAAQ,GAAG,IAAI;;IAEvC;AACR;AACA;AACA;AACA;AACA;IACQxF,aAAa,CAACzC,SAAS,CAACkI,KAAK,GAAG,IAAI;;IAEpC;AACR;AACA;AACA;AACA;AACA;IACQzF,aAAa,CAACzC,SAAS,CAACmI,OAAO,GAAG,IAAI;;IAEtC;IACA,IAAIX,YAAY;;IAEhB;AACR;AACA;AACA;AACA;AACA;IACQ3H,MAAM,CAAC4H,cAAc,CAAChF,aAAa,CAACzC,SAAS,EAAE,MAAM,EAAE;MACnD0H,GAAG,EAAEpI,KAAK,CAACqI,WAAW,CAACH,YAAY,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;MACnFI,GAAG,EAAEtI,KAAK,CAACuI,WAAW,CAACL,YAAY;IACvC,CAAC,CAAC;;IAEF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ/E,aAAa,CAACnB,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;MAC/C,OAAO,IAAI8C,aAAa,CAAC9C,UAAU,CAAC;IACxC,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ8C,aAAa,CAAClB,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;MACpD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;MAC7B,IAAIE,OAAO,CAACwG,QAAQ,IAAI,IAAI,IAAInI,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,UAAU,CAAC,EAC3EhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC2F,YAAY,CAAC7G,MAAM,CAACC,OAAO,CAACwG,QAAQ,EAAEvG,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;MAC7H,IAAIT,OAAO,CAACyG,QAAQ,IAAI,IAAI,IAAIpI,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,UAAU,CAAC,EAC3EhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC4F,YAAY,CAAC9G,MAAM,CAACC,OAAO,CAACyG,QAAQ,EAAExG,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;MAC7H,IAAIT,OAAO,CAAC0G,KAAK,IAAI,IAAI,IAAIrI,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,OAAO,CAAC,EACrEhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC6F,SAAS,CAAC/G,MAAM,CAACC,OAAO,CAAC0G,KAAK,EAAEzG,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;MACvH,IAAIT,OAAO,CAAC2G,OAAO,IAAI,IAAI,IAAItI,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC8F,WAAW,CAAChH,MAAM,CAACC,OAAO,CAAC2G,OAAO,EAAE1G,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;MAC3H,OAAOR,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQgB,aAAa,CAACE,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;MACtE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQQ,aAAa,CAACG,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;MACnD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;QAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,EAAE;MAC5G,OAAOI,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;QACzB,QAAQmB,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACF1B,OAAO,CAACwG,QAAQ,GAAGxI,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC2F,YAAY,CAACxF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;YACzF;UACJ,KAAK,CAAC;YACFP,OAAO,CAACyG,QAAQ,GAAGzI,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC4F,YAAY,CAACzF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;YACzF;UACJ,KAAK,CAAC;YACFP,OAAO,CAAC0G,KAAK,GAAG1I,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC6F,SAAS,CAAC1F,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;YACnF;UACJ,KAAK,CAAC;YACFP,OAAO,CAAC2G,OAAO,GAAG3I,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC8F,WAAW,CAAC3F,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;YACvF;UACJ;YACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QAAM;MAEd;MACA,OAAO1B,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQiB,aAAa,CAACW,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;MAC7D,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQU,aAAa,CAACY,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;MAC5C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAI7B,UAAU,GAAG,CAAC,CAAC;MACnB,IAAI6B,OAAO,CAACwG,QAAQ,IAAI,IAAI,IAAIxG,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;QAChE/B,UAAU,CAAC6I,IAAI,GAAG,CAAC;QACnB;UACI,IAAIlF,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC2F,YAAY,CAAC/E,MAAM,CAAC7B,OAAO,CAACwG,QAAQ,CAAC;UAC3E,IAAI1E,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;QAClC;MACJ;MACA,IAAI9B,OAAO,CAACyG,QAAQ,IAAI,IAAI,IAAIzG,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;QAChE,IAAI/B,UAAU,CAAC6I,IAAI,KAAK,CAAC,EACrB,OAAO,uBAAuB;QAClC7I,UAAU,CAAC6I,IAAI,GAAG,CAAC;QACnB;UACI,IAAIlF,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC4F,YAAY,CAAChF,MAAM,CAAC7B,OAAO,CAACyG,QAAQ,CAAC;UAC3E,IAAI3E,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;QAClC;MACJ;MACA,IAAI9B,OAAO,CAAC0G,KAAK,IAAI,IAAI,IAAI1G,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;QAC1D,IAAI/B,UAAU,CAAC6I,IAAI,KAAK,CAAC,EACrB,OAAO,uBAAuB;QAClC7I,UAAU,CAAC6I,IAAI,GAAG,CAAC;QACnB;UACI,IAAIlF,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC6F,SAAS,CAACjF,MAAM,CAAC7B,OAAO,CAAC0G,KAAK,CAAC;UACrE,IAAI5E,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;QAC/B;MACJ;MACA,IAAI9B,OAAO,CAAC2G,OAAO,IAAI,IAAI,IAAI3G,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;QAC9D,IAAI/B,UAAU,CAAC6I,IAAI,KAAK,CAAC,EACrB,OAAO,uBAAuB;QAClC7I,UAAU,CAAC6I,IAAI,GAAG,CAAC;QACnB;UACI,IAAIlF,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC8F,WAAW,CAAClF,MAAM,CAAC7B,OAAO,CAAC2G,OAAO,CAAC;UACzE,IAAI7E,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;QACjC;MACJ;MACA,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQb,aAAa,CAACkB,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;MACzD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAIrC,OAAO,CAACwG,QAAQ,IAAI,IAAI,IAAIxG,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;QAChEmC,MAAM,CAACmE,QAAQ,GAAGxI,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC2F,YAAY,CAACzE,QAAQ,CAACnC,OAAO,CAACwG,QAAQ,EAAEpE,OAAO,CAAC;QAC5F,IAAIA,OAAO,CAACmE,MAAM,EACdlE,MAAM,CAAC2E,IAAI,GAAG,UAAU;MAChC;MACA,IAAIhH,OAAO,CAACyG,QAAQ,IAAI,IAAI,IAAIzG,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;QAChEmC,MAAM,CAACoE,QAAQ,GAAGzI,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC4F,YAAY,CAAC1E,QAAQ,CAACnC,OAAO,CAACyG,QAAQ,EAAErE,OAAO,CAAC;QAC5F,IAAIA,OAAO,CAACmE,MAAM,EACdlE,MAAM,CAAC2E,IAAI,GAAG,UAAU;MAChC;MACA,IAAIhH,OAAO,CAAC0G,KAAK,IAAI,IAAI,IAAI1G,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;QAC1DmC,MAAM,CAACqE,KAAK,GAAG1I,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC6F,SAAS,CAAC3E,QAAQ,CAACnC,OAAO,CAAC0G,KAAK,EAAEtE,OAAO,CAAC;QACnF,IAAIA,OAAO,CAACmE,MAAM,EACdlE,MAAM,CAAC2E,IAAI,GAAG,OAAO;MAC7B;MACA,IAAIhH,OAAO,CAAC2G,OAAO,IAAI,IAAI,IAAI3G,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;QAC9DmC,MAAM,CAACsE,OAAO,GAAG3I,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC8F,WAAW,CAAC5E,QAAQ,CAACnC,OAAO,CAAC2G,OAAO,EAAEvE,OAAO,CAAC;QACzF,IAAIA,OAAO,CAACmE,MAAM,EACdlE,MAAM,CAAC2E,IAAI,GAAG,SAAS;MAC/B;MACA,OAAO3E,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQpB,aAAa,CAACzC,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;MAC/C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;IACxE,CAAC;IAEDjC,aAAa,CAAC2F,YAAY,GAAI,YAAW;MAErC;AACZ;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,YAAY,CAACzI,UAAU,EAAE;QAC9B,IAAI,CAAC8I,KAAK,GAAG,EAAE;QACf,IAAI9I,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYsI,YAAY,CAACpI,SAAS,CAACyI,KAAK,GAAGnJ,KAAK,CAACwG,UAAU;;MAE/C;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYsC,YAAY,CAAC9G,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;QAC9C,OAAO,IAAIyI,YAAY,CAACzI,UAAU,CAAC;MACvC,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYyI,YAAY,CAAC7G,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;QACnD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAACiH,KAAK,IAAI,IAAI,IAAIjH,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAAE,EAAED,CAAC,EACzCN,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAClB,MAAM,CAACC,OAAO,CAACiH,KAAK,CAAC3I,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QACpH,OAAOR,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY2G,YAAY,CAACzF,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;QACrE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYmG,YAAY,CAACxF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;QAClD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;UAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC2F,YAAY,EAAE;QACzH,OAAOvF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;UACzB,QAAQmB,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACF,IAAI,EAAE1B,OAAO,CAACiH,KAAK,IAAIjH,OAAO,CAACiH,KAAK,CAAC1I,MAAM,CAAC,EACxCyB,OAAO,CAACiH,KAAK,GAAG,EAAE;cACtBjH,OAAO,CAACiH,KAAK,CAACxC,IAAI,CAACzG,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC,CAAC;cAC7E;YACJ;cACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAO1B,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY4G,YAAY,CAAChF,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;QAC5D,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYqG,YAAY,CAAC/E,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;QAC3C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAACiH,KAAK,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;UAC1D,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAACiH,KAAK,CAAC,EAC7B,OAAO,uBAAuB;UAClC,KAAK,IAAI3I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAAE,EAAED,CAAC,EAAE;YAC3C,IAAIwD,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACY,MAAM,CAAC7B,OAAO,CAACiH,KAAK,CAAC3I,CAAC,CAAC,CAAC;YAC9D,IAAIwD,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;UAC/B;QACJ;QACA,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY8E,YAAY,CAACzE,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;QACxD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;QACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAClCD,MAAM,CAAC4E,KAAK,GAAG,EAAE;QACrB,IAAIjH,OAAO,CAACiH,KAAK,IAAIjH,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAAE;UACvC8D,MAAM,CAAC4E,KAAK,GAAG,EAAE;UACjB,KAAK,IAAI9C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAAE,EAAE4F,CAAC,EACzC9B,MAAM,CAAC4E,KAAK,CAAC9C,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACkB,QAAQ,CAACnC,OAAO,CAACiH,KAAK,CAAC9C,CAAC,CAAC,EAAE/B,OAAO,CAAC;QACvF;QACA,OAAOC,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACYuE,YAAY,CAACpI,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;QAC9C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;MACxE,CAAC;MAED,OAAO0D,YAAY;IACvB,CAAC,EAAG;IAEJ3F,aAAa,CAAC4F,YAAY,GAAI,YAAW;MAErC;AACZ;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,YAAY,CAAC1I,UAAU,EAAE;QAC9B,IAAI,CAAC8I,KAAK,GAAG,EAAE;QACf,IAAI9I,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYuI,YAAY,CAACrI,SAAS,CAACyI,KAAK,GAAGnJ,KAAK,CAACwG,UAAU;;MAE/C;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYuC,YAAY,CAAC/G,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;QAC9C,OAAO,IAAI0I,YAAY,CAAC1I,UAAU,CAAC;MACvC,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY0I,YAAY,CAAC9G,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;QACnD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAACiH,KAAK,IAAI,IAAI,IAAIjH,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAAE,EAAED,CAAC,EACzCN,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAClB,MAAM,CAACC,OAAO,CAACiH,KAAK,CAAC3I,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QACpH,OAAOR,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY4G,YAAY,CAAC1F,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;QACrE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYoG,YAAY,CAACzF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;QAClD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;UAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC4F,YAAY,EAAE;QACzH,OAAOxF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;UACzB,QAAQmB,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACF,IAAI,EAAE1B,OAAO,CAACiH,KAAK,IAAIjH,OAAO,CAACiH,KAAK,CAAC1I,MAAM,CAAC,EACxCyB,OAAO,CAACiH,KAAK,GAAG,EAAE;cACtBjH,OAAO,CAACiH,KAAK,CAACxC,IAAI,CAACzG,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC,CAAC;cAC7E;YACJ;cACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAO1B,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY6G,YAAY,CAACjF,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;QAC5D,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYsG,YAAY,CAAChF,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;QAC3C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAACiH,KAAK,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;UAC1D,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAACiH,KAAK,CAAC,EAC7B,OAAO,uBAAuB;UAClC,KAAK,IAAI3I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAAE,EAAED,CAAC,EAAE;YAC3C,IAAIwD,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACY,MAAM,CAAC7B,OAAO,CAACiH,KAAK,CAAC3I,CAAC,CAAC,CAAC;YAC9D,IAAIwD,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;UAC/B;QACJ;QACA,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY+E,YAAY,CAAC1E,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;QACxD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;QACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAClCD,MAAM,CAAC4E,KAAK,GAAG,EAAE;QACrB,IAAIjH,OAAO,CAACiH,KAAK,IAAIjH,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAAE;UACvC8D,MAAM,CAAC4E,KAAK,GAAG,EAAE;UACjB,KAAK,IAAI9C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACiH,KAAK,CAAC1I,MAAM,EAAE,EAAE4F,CAAC,EACzC9B,MAAM,CAAC4E,KAAK,CAAC9C,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACkB,QAAQ,CAACnC,OAAO,CAACiH,KAAK,CAAC9C,CAAC,CAAC,EAAE/B,OAAO,CAAC;QACvF;QACA,OAAOC,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACYwE,YAAY,CAACrI,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;QAC9C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;MACxE,CAAC;MAED,OAAO2D,YAAY;IACvB,CAAC,EAAG;IAEJ5F,aAAa,CAAC6F,SAAS,GAAI,YAAW;MAElC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,SAAS,CAAC3I,UAAU,EAAE;QAC3B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYwI,SAAS,CAACtI,SAAS,CAAC0I,WAAW,GAAG,EAAE;;MAEpC;AACZ;AACA;AACA;AACA;AACA;MACYJ,SAAS,CAACtI,SAAS,CAAC2I,kBAAkB,GAAG,KAAK;;MAE9C;AACZ;AACA;AACA;AACA;AACA;MACYL,SAAS,CAACtI,SAAS,CAAC4I,KAAK,GAAG,IAAI;;MAEhC;AACZ;AACA;AACA;AACA;AACA;MACYN,SAAS,CAACtI,SAAS,CAAC6I,cAAc,GAAGvJ,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;MAEnF;AACZ;AACA;AACA;AACA;AACA;MACYiI,SAAS,CAACtI,SAAS,CAAC8I,QAAQ,GAAG,IAAI;;MAEnC;AACZ;AACA;AACA;AACA;AACA;MACYR,SAAS,CAACtI,SAAS,CAAC+I,YAAY,GAAG,IAAI;;MAEvC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYT,SAAS,CAAChH,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;QAC3C,OAAO,IAAI2I,SAAS,CAAC3I,UAAU,CAAC;MACpC,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY2I,SAAS,CAAC/G,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;QAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAACkH,WAAW,IAAI,IAAI,IAAI7I,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,aAAa,CAAC,EACjFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACkH,WAAW,CAAC;QACxE,IAAIlH,OAAO,CAACmH,kBAAkB,IAAI,IAAI,IAAI9I,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,oBAAoB,CAAC,EAC/FC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACS,IAAI,CAAChB,OAAO,CAACmH,kBAAkB,CAAC;QAC7E,IAAInH,OAAO,CAACoH,KAAK,IAAI,IAAI,IAAI/I,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,OAAO,CAAC,EACrEhC,KAAK,CAACE,KAAK,CAAC6B,MAAM,CAACC,OAAO,CAACoH,KAAK,EAAEnH,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QAC/F,IAAIT,OAAO,CAACqH,cAAc,IAAI,IAAI,IAAIhJ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,gBAAgB,CAAC,EACvFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACqH,cAAc,CAAC;QAC3E,IAAIrH,OAAO,CAACsH,QAAQ,IAAI,IAAI,IAAIjJ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,UAAU,CAAC,EAC3EhC,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACP,MAAM,CAACC,OAAO,CAACsH,QAAQ,EAAErH,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QACtH,IAAIT,OAAO,CAACuH,YAAY,IAAI,IAAI,IAAIlJ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,cAAc,CAAC,EACnFhC,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACP,MAAM,CAACC,OAAO,CAACuH,YAAY,EAAEtH,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QAC1H,OAAOR,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY6G,SAAS,CAAC3F,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;QAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYqG,SAAS,CAAC1F,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;QAC/C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;UAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC6F,SAAS,EAAE;QACtH,OAAOzF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;UACzB,QAAQmB,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACF1B,OAAO,CAACkH,WAAW,GAAG7F,MAAM,CAACV,MAAM,EAAE;cACrC;YACJ,KAAK,CAAC;cACFX,OAAO,CAACmH,kBAAkB,GAAG9F,MAAM,CAACL,IAAI,EAAE;cAC1C;YACJ,KAAK,CAAC;cACFhB,OAAO,CAACoH,KAAK,GAAGpJ,KAAK,CAACE,KAAK,CAACkD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;cAC3D;YACJ,KAAK,CAAC;cACFP,OAAO,CAACqH,cAAc,GAAGhG,MAAM,CAACR,MAAM,EAAE;cACxC;YACJ,KAAK,CAAC;cACFb,OAAO,CAACsH,QAAQ,GAAGtJ,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACc,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;cAClF;YACJ,KAAK,CAAC;cACFP,OAAO,CAACuH,YAAY,GAAGvJ,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACc,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;cACtF;YACJ;cACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAO1B,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY8G,SAAS,CAAClF,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;QACzD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYuG,SAAS,CAACjF,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;QACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAACkH,WAAW,IAAI,IAAI,IAAIlH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACkH,WAAW,CAAC,EACpC,OAAO,8BAA8B;QAC7C,IAAIlH,OAAO,CAACmH,kBAAkB,IAAI,IAAI,IAAInH,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClF,IAAI,OAAOF,OAAO,CAACmH,kBAAkB,KAAK,SAAS,EAC/C,OAAO,sCAAsC;QACrD,IAAInH,OAAO,CAACoH,KAAK,IAAI,IAAI,IAAIpH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;UAC1D,IAAI4B,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC2D,MAAM,CAAC7B,OAAO,CAACoH,KAAK,CAAC;UAC7C,IAAItF,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;QAC/B;QACA,IAAI9B,OAAO,CAACqH,cAAc,IAAI,IAAI,IAAIrH,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqH,cAAc,CAAC,IAAI,EAAErH,OAAO,CAACqH,cAAc,IAAIvJ,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqH,cAAc,CAACrF,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqH,cAAc,CAACpF,IAAI,CAAC,CAAC,EACpK,OAAO,uCAAuC;QACtD,IAAIjC,OAAO,CAACsH,QAAQ,IAAI,IAAI,IAAItH,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;UAChE,IAAI4B,KAAK,GAAG9D,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACuB,MAAM,CAAC7B,OAAO,CAACsH,QAAQ,CAAC;UACpE,IAAIxF,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;QAClC;QACA,IAAI9B,OAAO,CAACuH,YAAY,IAAI,IAAI,IAAIvH,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;UACxE,IAAI4B,KAAK,GAAG9D,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACuB,MAAM,CAAC7B,OAAO,CAACuH,YAAY,CAAC;UACxE,IAAIzF,KAAK,EACL,OAAO,eAAe,GAAGA,KAAK;QACtC;QACA,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYgF,SAAS,CAAC3E,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;QACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;QACf,IAAID,OAAO,CAACE,QAAQ,EAAE;UAClBD,MAAM,CAAC6E,WAAW,GAAG,EAAE;UACvB7E,MAAM,CAAC8E,kBAAkB,GAAG,KAAK;UACjC9E,MAAM,CAAC+E,KAAK,GAAG,IAAI;UACnB,IAAItJ,KAAK,CAACc,IAAI,EAAE;YACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;YACrCyD,MAAM,CAACgF,cAAc,GAAGjF,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;UAC1H,CAAC,MACGF,MAAM,CAACgF,cAAc,GAAGjF,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;UAC9DJ,MAAM,CAACiF,QAAQ,GAAG,IAAI;UACtBjF,MAAM,CAACkF,YAAY,GAAG,IAAI;QAC9B;QACA,IAAIvH,OAAO,CAACkH,WAAW,IAAI,IAAI,IAAIlH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEmC,MAAM,CAAC6E,WAAW,GAAGlH,OAAO,CAACkH,WAAW;QAC5C,IAAIlH,OAAO,CAACmH,kBAAkB,IAAI,IAAI,IAAInH,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClFmC,MAAM,CAAC8E,kBAAkB,GAAGnH,OAAO,CAACmH,kBAAkB;QAC1D,IAAInH,OAAO,CAACoH,KAAK,IAAI,IAAI,IAAIpH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDmC,MAAM,CAAC+E,KAAK,GAAGpJ,KAAK,CAACE,KAAK,CAACiE,QAAQ,CAACnC,OAAO,CAACoH,KAAK,EAAEhF,OAAO,CAAC;QAC/D,IAAIpC,OAAO,CAACqH,cAAc,IAAI,IAAI,IAAIrH,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,OAAOF,OAAO,CAACqH,cAAc,KAAK,QAAQ,EAC1ChF,MAAM,CAACgF,cAAc,GAAGjF,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACqH,cAAc,CAAC,GAAGrH,OAAO,CAACqH,cAAc,CAAC,KAE3GhF,MAAM,CAACgF,cAAc,GAAGjF,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACqH,cAAc,CAAC,GAAGjF,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACqH,cAAc,CAACrF,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACqH,cAAc,CAACpF,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACqH,cAAc;QAClR,IAAIrH,OAAO,CAACsH,QAAQ,IAAI,IAAI,IAAItH,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DmC,MAAM,CAACiF,QAAQ,GAAGtJ,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC6B,QAAQ,CAACnC,OAAO,CAACsH,QAAQ,EAAElF,OAAO,CAAC;QACzF,IAAIpC,OAAO,CAACuH,YAAY,IAAI,IAAI,IAAIvH,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtEmC,MAAM,CAACkF,YAAY,GAAGvJ,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC6B,QAAQ,CAACnC,OAAO,CAACuH,YAAY,EAAEnF,OAAO,CAAC;QACjG,OAAOC,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACYyE,SAAS,CAACtI,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;QAC3C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;MACxE,CAAC;MAED,OAAO4D,SAAS;IACpB,CAAC,EAAG;IAEJ7F,aAAa,CAAC8F,WAAW,GAAI,YAAW;MAEpC;AACZ;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,WAAW,CAAC5I,UAAU,EAAE;QAC7B,IAAI,CAACqJ,YAAY,GAAG,EAAE;QACtB,IAAIrJ,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYyI,WAAW,CAACvI,SAAS,CAACgJ,YAAY,GAAG1J,KAAK,CAACwG,UAAU;;MAErD;AACZ;AACA;AACA;AACA;AACA;MACYyC,WAAW,CAACvI,SAAS,CAACwI,IAAI,GAAG,IAAI;;MAEjC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYD,WAAW,CAACjH,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;QAC7C,OAAO,IAAI4I,WAAW,CAAC5I,UAAU,CAAC;MACtC,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY4I,WAAW,CAAChH,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;QAClD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAACwH,YAAY,IAAI,IAAI,IAAIxH,OAAO,CAACwH,YAAY,CAACjJ,MAAM,EAC3D,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACwH,YAAY,CAACjJ,MAAM,EAAE,EAAED,CAAC,EAChDN,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACwG,mBAAmB,CAAC1H,MAAM,CAACC,OAAO,CAACwH,YAAY,CAAClJ,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QAC/I,IAAIT,OAAO,CAACgH,IAAI,IAAI,IAAI,IAAI3I,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,MAAM,CAAC,EACnEhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAClB,MAAM,CAACC,OAAO,CAACgH,IAAI,EAAE/G,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QAC5G,OAAOR,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY8G,WAAW,CAAC5F,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;QACpE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYsG,WAAW,CAAC3F,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;QACjD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;UAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAAC8F,WAAW,EAAE;QACxH,OAAO1F,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;UACzB,QAAQmB,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACF,IAAI,EAAE1B,OAAO,CAACwH,YAAY,IAAIxH,OAAO,CAACwH,YAAY,CAACjJ,MAAM,CAAC,EACtDyB,OAAO,CAACwH,YAAY,GAAG,EAAE;cAC7BxH,OAAO,CAACwH,YAAY,CAAC/C,IAAI,CAACzG,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACwG,mBAAmB,CAACrG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC,CAAC;cACxG;YACJ,KAAK,CAAC;cACFP,OAAO,CAACgH,IAAI,GAAGhJ,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;cACxE;YACJ;cACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAO1B,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY+G,WAAW,CAACnF,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;QAC3D,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYwG,WAAW,CAAClF,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;QAC1C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAACwH,YAAY,IAAI,IAAI,IAAIxH,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;UACxE,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAACwH,YAAY,CAAC,EACpC,OAAO,8BAA8B;UACzC,KAAK,IAAIlJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACwH,YAAY,CAACjJ,MAAM,EAAE,EAAED,CAAC,EAAE;YAClD,IAAIwD,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACwG,mBAAmB,CAAC5F,MAAM,CAAC7B,OAAO,CAACwH,YAAY,CAAClJ,CAAC,CAAC,CAAC;YACzF,IAAIwD,KAAK,EACL,OAAO,eAAe,GAAGA,KAAK;UACtC;QACJ;QACA,IAAI9B,OAAO,CAACgH,IAAI,IAAI,IAAI,IAAIhH,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;UACxD,IAAI4B,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACY,MAAM,CAAC7B,OAAO,CAACgH,IAAI,CAAC;UAC1D,IAAIlF,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;QAC9B;QACA,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYiF,WAAW,CAAC5E,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;QACvD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;QACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAClCD,MAAM,CAACmF,YAAY,GAAG,EAAE;QAC5B,IAAIpF,OAAO,CAACE,QAAQ,EAChBD,MAAM,CAAC2E,IAAI,GAAG,IAAI;QACtB,IAAIhH,OAAO,CAACwH,YAAY,IAAIxH,OAAO,CAACwH,YAAY,CAACjJ,MAAM,EAAE;UACrD8D,MAAM,CAACmF,YAAY,GAAG,EAAE;UACxB,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACwH,YAAY,CAACjJ,MAAM,EAAE,EAAE4F,CAAC,EAChD9B,MAAM,CAACmF,YAAY,CAACrD,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACwG,mBAAmB,CAACtF,QAAQ,CAACnC,OAAO,CAACwH,YAAY,CAACrD,CAAC,CAAC,EAAE/B,OAAO,CAAC;QACzH;QACA,IAAIpC,OAAO,CAACgH,IAAI,IAAI,IAAI,IAAIhH,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDmC,MAAM,CAAC2E,IAAI,GAAGhJ,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACkB,QAAQ,CAACnC,OAAO,CAACgH,IAAI,EAAE5E,OAAO,CAAC;QAC3E,OAAOC,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACY0E,WAAW,CAACvI,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;QAC7C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;MACxE,CAAC;MAED,OAAO6D,WAAW;IACtB,CAAC,EAAG;IAEJ9F,aAAa,CAACwG,mBAAmB,GAAI,YAAW;MAE5C;AACZ;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,mBAAmB,CAACtJ,UAAU,EAAE;QACrC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYmJ,mBAAmB,CAACjJ,SAAS,CAACkJ,SAAS,GAAG,EAAE;;MAE5C;AACZ;AACA;AACA;AACA;AACA;MACYD,mBAAmB,CAACjJ,SAAS,CAACoH,KAAK,GAAG,CAAC;;MAEvC;MACA,IAAII,YAAY;;MAEhB;AACZ;AACA;AACA;AACA;AACA;MACY3H,MAAM,CAAC4H,cAAc,CAACwB,mBAAmB,CAACjJ,SAAS,EAAE,IAAI,EAAE;QACvD0H,GAAG,EAAEpI,KAAK,CAACqI,WAAW,CAACH,YAAY,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAC7DI,GAAG,EAAEtI,KAAK,CAACuI,WAAW,CAACL,YAAY;MACvC,CAAC,CAAC;;MAEF;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYyB,mBAAmB,CAAC3H,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;QACrD,OAAO,IAAIsJ,mBAAmB,CAACtJ,UAAU,CAAC;MAC9C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYsJ,mBAAmB,CAAC1H,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;QAC1D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAAC0H,SAAS,IAAI,IAAI,IAAIrJ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,WAAW,CAAC,EAC7EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC0H,SAAS,CAAC;QACtE,IAAI1H,OAAO,CAAC4F,KAAK,IAAI,IAAI,IAAIvH,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,OAAO,CAAC,EACrEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACA,MAAM,CAACP,OAAO,CAAC4F,KAAK,CAAC;QAClE,OAAO3F,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYwH,mBAAmB,CAACtG,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;QAC5E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYgH,mBAAmB,CAACrG,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;QACzD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;UAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACE,KAAK,CAAC+C,aAAa,CAACwG,mBAAmB,EAAE;QAChI,OAAOpG,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;UACzB,QAAQmB,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACF1B,OAAO,CAAC0H,SAAS,GAAGrG,MAAM,CAACV,MAAM,EAAE;cACnC;YACJ,KAAK,CAAC;cACFX,OAAO,CAAC4F,KAAK,GAAGvE,MAAM,CAACd,MAAM,EAAE;cAC/B;YACJ;cACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAO1B,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYyH,mBAAmB,CAAC7F,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;QACnE,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYkH,mBAAmB,CAAC5F,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;QAClD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAI7B,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI6B,OAAO,CAAC0H,SAAS,IAAI,IAAI,IAAI1H,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;UAClE/B,UAAU,CAACmI,EAAE,GAAG,CAAC;UACjB,IAAI,CAACxI,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC0H,SAAS,CAAC,EAClC,OAAO,4BAA4B;QAC3C;QACA,IAAI1H,OAAO,CAAC4F,KAAK,IAAI,IAAI,IAAI5F,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;UAC1D,IAAI/B,UAAU,CAACmI,EAAE,KAAK,CAAC,EACnB,OAAO,qBAAqB;UAChCnI,UAAU,CAACmI,EAAE,GAAG,CAAC;UACjB,IAAI,CAACxI,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC4F,KAAK,CAAC,EAC/B,OAAO,yBAAyB;QACxC;QACA,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY6B,mBAAmB,CAACtF,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;QAC/D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;QACf,IAAIrC,OAAO,CAAC0H,SAAS,IAAI,IAAI,IAAI1H,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;UAClEmC,MAAM,CAACqF,SAAS,GAAG1H,OAAO,CAAC0H,SAAS;UACpC,IAAItF,OAAO,CAACmE,MAAM,EACdlE,MAAM,CAACiE,EAAE,GAAG,WAAW;QAC/B;QACA,IAAItG,OAAO,CAAC4F,KAAK,IAAI,IAAI,IAAI5F,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;UAC1DmC,MAAM,CAACuD,KAAK,GAAG5F,OAAO,CAAC4F,KAAK;UAC5B,IAAIxD,OAAO,CAACmE,MAAM,EACdlE,MAAM,CAACiE,EAAE,GAAG,OAAO;QAC3B;QACA,OAAOjE,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACYoF,mBAAmB,CAACjJ,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;QACrD,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;MACxE,CAAC;MAED,OAAOuE,mBAAmB;IAC9B,CAAC,EAAG;IAEJ,OAAOxG,aAAa;EACxB,CAAC,EAAG;EAEJ,OAAO/C,KAAK;AAChB,CAAC,EAAG;AAEJF,KAAK,CAAC2J,YAAY,GAAI,YAAW;EAE7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,YAAY,CAACxJ,UAAU,EAAE;IAC9B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIqJ,YAAY,CAACnJ,SAAS,CAACoJ,QAAQ,GAAG,EAAE;;EAEpC;AACJ;AACA;AACA;AACA;AACA;EACID,YAAY,CAACnJ,SAAS,CAACqJ,QAAQ,GAAG,EAAE;;EAEpC;AACJ;AACA;AACA;AACA;AACA;EACIF,YAAY,CAACnJ,SAAS,CAACsJ,YAAY,GAAG,EAAE;;EAExC;AACJ;AACA;AACA;AACA;AACA;EACIH,YAAY,CAACnJ,SAAS,CAACuJ,cAAc,GAAG,EAAE;;EAE1C;AACJ;AACA;AACA;AACA;AACA;EACIJ,YAAY,CAACnJ,SAAS,CAACwJ,cAAc,GAAG,EAAE;;EAE1C;AACJ;AACA;AACA;AACA;AACA;EACIL,YAAY,CAACnJ,SAAS,CAACyJ,KAAK,GAAG,EAAE;;EAEjC;AACJ;AACA;AACA;AACA;AACA;EACIN,YAAY,CAACnJ,SAAS,CAAC0J,kBAAkB,GAAG,EAAE;;EAE9C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIP,YAAY,CAAC7H,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IAC9C,OAAO,IAAIwJ,YAAY,CAACxJ,UAAU,CAAC;EACvC,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIwJ,YAAY,CAAC5H,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IACnD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAAC6H,QAAQ,IAAI,IAAI,IAAIxJ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,UAAU,CAAC,EAC3EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC6H,QAAQ,CAAC;IACrE,IAAI7H,OAAO,CAAC8H,YAAY,IAAI,IAAI,IAAIzJ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,cAAc,CAAC,EACnFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC8H,YAAY,CAAC;IACzE,IAAI9H,OAAO,CAAC+H,cAAc,IAAI,IAAI,IAAI1J,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,gBAAgB,CAAC,EACvFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC+H,cAAc,CAAC;IAC3E,IAAI/H,OAAO,CAACgI,cAAc,IAAI,IAAI,IAAI3J,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,gBAAgB,CAAC,EACvFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACgI,cAAc,CAAC;IAC3E,IAAIhI,OAAO,CAACiI,KAAK,IAAI,IAAI,IAAI5J,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,OAAO,CAAC,EACrEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACiI,KAAK,CAAC;IAClE,IAAIjI,OAAO,CAACkI,kBAAkB,IAAI,IAAI,IAAI7J,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,oBAAoB,CAAC,EAC/FC,MAAM,CAACM,MAAM,EAAC,wBAAwB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACkI,kBAAkB,CAAC;IAChF,IAAIlI,OAAO,CAAC4H,QAAQ,IAAI,IAAI,IAAIvJ,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,UAAU,CAAC,EAC3EC,MAAM,CAACM,MAAM,EAAC,wBAAwB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAAC4H,QAAQ,CAAC;IACtE,OAAO3H,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI0H,YAAY,CAACxG,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IACrE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkH,YAAY,CAACvG,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IAClD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAAC2J,YAAY,EAAE;IACrG,OAAOtG,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,EAAE;UACH1B,OAAO,CAAC4H,QAAQ,GAAGvG,MAAM,CAACV,MAAM,EAAE;UAClC;QACJ,KAAK,CAAC;UACFX,OAAO,CAAC6H,QAAQ,GAAGxG,MAAM,CAACV,MAAM,EAAE;UAClC;QACJ,KAAK,CAAC;UACFX,OAAO,CAAC8H,YAAY,GAAGzG,MAAM,CAACV,MAAM,EAAE;UACtC;QACJ,KAAK,CAAC;UACFX,OAAO,CAAC+H,cAAc,GAAG1G,MAAM,CAACV,MAAM,EAAE;UACxC;QACJ,KAAK,CAAC;UACFX,OAAO,CAACgI,cAAc,GAAG3G,MAAM,CAACV,MAAM,EAAE;UACxC;QACJ,KAAK,CAAC;UACFX,OAAO,CAACiI,KAAK,GAAG5G,MAAM,CAACV,MAAM,EAAE;UAC/B;QACJ,KAAK,EAAE;UACHX,OAAO,CAACkI,kBAAkB,GAAG7G,MAAM,CAACV,MAAM,EAAE;UAC5C;QACJ;UACIU,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2H,YAAY,CAAC/F,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IAC5D,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIoH,YAAY,CAAC9F,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IAC3C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAAC4H,QAAQ,IAAI,IAAI,IAAI5H,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC4H,QAAQ,CAAC,EACjC,OAAO,2BAA2B;IAC1C,IAAI5H,OAAO,CAAC6H,QAAQ,IAAI,IAAI,IAAI7H,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC6H,QAAQ,CAAC,EACjC,OAAO,2BAA2B;IAC1C,IAAI7H,OAAO,CAAC8H,YAAY,IAAI,IAAI,IAAI9H,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC8H,YAAY,CAAC,EACrC,OAAO,+BAA+B;IAC9C,IAAI9H,OAAO,CAAC+H,cAAc,IAAI,IAAI,IAAI/H,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAAC+H,cAAc,CAAC,EACvC,OAAO,iCAAiC;IAChD,IAAI/H,OAAO,CAACgI,cAAc,IAAI,IAAI,IAAIhI,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACgI,cAAc,CAAC,EACvC,OAAO,iCAAiC;IAChD,IAAIhI,OAAO,CAACiI,KAAK,IAAI,IAAI,IAAIjI,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxD,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACiI,KAAK,CAAC,EAC9B,OAAO,wBAAwB;IACvC,IAAIjI,OAAO,CAACkI,kBAAkB,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClF,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACkI,kBAAkB,CAAC,EAC3C,OAAO,qCAAqC;IACpD,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIP,YAAY,CAACxF,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IACxD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAACE,QAAQ,EAAE;MAClBD,MAAM,CAACwF,QAAQ,GAAG,EAAE;MACpBxF,MAAM,CAACyF,YAAY,GAAG,EAAE;MACxBzF,MAAM,CAAC0F,cAAc,GAAG,EAAE;MAC1B1F,MAAM,CAAC2F,cAAc,GAAG,EAAE;MAC1B3F,MAAM,CAAC4F,KAAK,GAAG,EAAE;MACjB5F,MAAM,CAAC6F,kBAAkB,GAAG,EAAE;MAC9B7F,MAAM,CAACuF,QAAQ,GAAG,EAAE;IACxB;IACA,IAAI5H,OAAO,CAAC6H,QAAQ,IAAI,IAAI,IAAI7H,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DmC,MAAM,CAACwF,QAAQ,GAAG7H,OAAO,CAAC6H,QAAQ;IACtC,IAAI7H,OAAO,CAAC8H,YAAY,IAAI,IAAI,IAAI9H,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtEmC,MAAM,CAACyF,YAAY,GAAG9H,OAAO,CAAC8H,YAAY;IAC9C,IAAI9H,OAAO,CAAC+H,cAAc,IAAI,IAAI,IAAI/H,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EmC,MAAM,CAAC0F,cAAc,GAAG/H,OAAO,CAAC+H,cAAc;IAClD,IAAI/H,OAAO,CAACgI,cAAc,IAAI,IAAI,IAAIhI,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EmC,MAAM,CAAC2F,cAAc,GAAGhI,OAAO,CAACgI,cAAc;IAClD,IAAIhI,OAAO,CAACiI,KAAK,IAAI,IAAI,IAAIjI,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDmC,MAAM,CAAC4F,KAAK,GAAGjI,OAAO,CAACiI,KAAK;IAChC,IAAIjI,OAAO,CAACkI,kBAAkB,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClFmC,MAAM,CAAC6F,kBAAkB,GAAGlI,OAAO,CAACkI,kBAAkB;IAC1D,IAAIlI,OAAO,CAAC4H,QAAQ,IAAI,IAAI,IAAI5H,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DmC,MAAM,CAACuF,QAAQ,GAAG5H,OAAO,CAAC4H,QAAQ;IACtC,OAAOvF,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIsF,YAAY,CAACnJ,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IAC9C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAOyE,YAAY;AACvB,CAAC,EAAG;AAEJ3J,KAAK,CAACmK,cAAc,GAAI,YAAW;EAE/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,cAAc,CAAChK,UAAU,EAAE;IAChC,IAAI,CAACiK,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAIjK,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI6J,cAAc,CAAC3J,SAAS,CAAC4J,QAAQ,GAAGtK,KAAK,CAAC8F,WAAW;;EAErD;AACJ;AACA;AACA;AACA;AACA;EACIuE,cAAc,CAAC3J,SAAS,CAAC6J,WAAW,GAAGvK,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAErF;AACJ;AACA;AACA;AACA;AACA;EACIsJ,cAAc,CAAC3J,SAAS,CAAC8J,uBAAuB,GAAGxK,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEjG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIsJ,cAAc,CAACrI,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IAChD,OAAO,IAAIgK,cAAc,CAAChK,UAAU,CAAC;EACzC,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIgK,cAAc,CAACpI,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IACrD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAACoI,QAAQ,IAAI,IAAI,IAAI/J,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,UAAU,CAAC,EAC3E,KAAK,IAAI5B,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACoI,QAAQ,CAAC,EAAE9J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MACxE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAACD,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACvC,IAAI,CAACE,CAAC,CAAC,CAAC;MACjGN,KAAK,CAACmK,cAAc,CAACpI,MAAM,CAACC,OAAO,CAACoI,QAAQ,CAAChK,IAAI,CAACE,CAAC,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE,CAACA,MAAM,EAAE;IAC7H;IACJ,IAAIT,OAAO,CAACqI,WAAW,IAAI,IAAI,IAAIhK,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,aAAa,CAAC,EACjFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACqI,WAAW,CAAC;IACxE,IAAIrI,OAAO,CAACsI,uBAAuB,IAAI,IAAI,IAAIjK,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,yBAAyB,CAAC,EACzGC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACsI,uBAAuB,CAAC;IACpF,OAAOrI,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkI,cAAc,CAAChH,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IACvE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI0H,cAAc,CAAC/G,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IACpD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACmK,cAAc,EAAE;MAAErE,GAAG;IAC5G,OAAOzC,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACFL,MAAM,CAAC0C,IAAI,EAAE,CAACtC,GAAG,EAAE;UACnB,IAAIzB,OAAO,CAACoI,QAAQ,KAAKtK,KAAK,CAAC8F,WAAW,EACtC5D,OAAO,CAACoI,QAAQ,GAAG,CAAC,CAAC;UACzBtE,GAAG,GAAGzC,MAAM,CAACV,MAAM,EAAE;UACrBU,MAAM,CAACI,GAAG,EAAE;UACZzB,OAAO,CAACoI,QAAQ,CAACtE,GAAG,CAAC,GAAG9F,KAAK,CAACmK,cAAc,CAAC/G,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UAC5E;QACJ,KAAK,CAAC;UACFP,OAAO,CAACqI,WAAW,GAAGhH,MAAM,CAACR,MAAM,EAAE;UACrC;QACJ,KAAK,CAAC;UACFb,OAAO,CAACsI,uBAAuB,GAAGjH,MAAM,CAACR,MAAM,EAAE;UACjD;QACJ;UACIQ,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACImI,cAAc,CAACvG,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IAC9D,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI4H,cAAc,CAACtG,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAACoI,QAAQ,IAAI,IAAI,IAAIpI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;MAChE,IAAI,CAACpC,KAAK,CAACkG,QAAQ,CAAChE,OAAO,CAACoI,QAAQ,CAAC,EACjC,OAAO,2BAA2B;MACtC,IAAItE,GAAG,GAAGzF,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACoI,QAAQ,CAAC;MACvC,KAAK,IAAI9J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,GAAG,CAACvF,MAAM,EAAE,EAAED,CAAC,EAAE;QACjC,IAAIwD,KAAK,GAAG9D,KAAK,CAACmK,cAAc,CAACtG,MAAM,CAAC7B,OAAO,CAACoI,QAAQ,CAACtE,GAAG,CAACxF,CAAC,CAAC,CAAC,CAAC;QACjE,IAAIwD,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;MAClC;IACJ;IACA,IAAI9B,OAAO,CAACqI,WAAW,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqI,WAAW,CAAC,IAAI,EAAErI,OAAO,CAACqI,WAAW,IAAIvK,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqI,WAAW,CAACrG,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqI,WAAW,CAACpG,IAAI,CAAC,CAAC,EACxJ,OAAO,oCAAoC;IACnD,IAAIjC,OAAO,CAACsI,uBAAuB,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACsI,uBAAuB,CAAC,IAAI,EAAEtI,OAAO,CAACsI,uBAAuB,IAAIxK,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACsI,uBAAuB,CAACtG,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACsI,uBAAuB,CAACrG,IAAI,CAAC,CAAC,EACxM,OAAO,gDAAgD;IAC/D,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkG,cAAc,CAAChG,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IAC1D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAAC6B,OAAO,IAAI7B,OAAO,CAACE,QAAQ,EACnCD,MAAM,CAAC+F,QAAQ,GAAG,CAAC,CAAC;IACxB,IAAIhG,OAAO,CAACE,QAAQ,EAAE;MAClB,IAAIxE,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACgG,WAAW,GAAGjG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACvH,CAAC,MACGF,MAAM,CAACgG,WAAW,GAAGjG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MAC3D,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACnI,CAAC,MACGF,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;IAC3E;IACA,IAAIyB,KAAK;IACT,IAAIlE,OAAO,CAACoI,QAAQ,IAAI,CAAClE,KAAK,GAAG7F,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACoI,QAAQ,CAAC,EAAE7J,MAAM,EAAE;MACpE8D,MAAM,CAAC+F,QAAQ,GAAG,CAAC,CAAC;MACpB,KAAK,IAAIjE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC3F,MAAM,EAAE,EAAE4F,CAAC,EACjC9B,MAAM,CAAC+F,QAAQ,CAAClE,KAAK,CAACC,CAAC,CAAC,CAAC,GAAGnG,KAAK,CAACmK,cAAc,CAAChG,QAAQ,CAACnC,OAAO,CAACoI,QAAQ,CAAClE,KAAK,CAACC,CAAC,CAAC,CAAC,EAAE/B,OAAO,CAAC;IACtG;IACA,IAAIpC,OAAO,CAACqI,WAAW,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,OAAOF,OAAO,CAACqI,WAAW,KAAK,QAAQ,EACvChG,MAAM,CAACgG,WAAW,GAAGjG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACqI,WAAW,CAAC,GAAGrI,OAAO,CAACqI,WAAW,CAAC,KAElGhG,MAAM,CAACgG,WAAW,GAAGjG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACqI,WAAW,CAAC,GAAGjG,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACqI,WAAW,CAACrG,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACqI,WAAW,CAACpG,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACqI,WAAW;IACnQ,IAAIrI,OAAO,CAACsI,uBAAuB,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,OAAOF,OAAO,CAACsI,uBAAuB,KAAK,QAAQ,EACnDjG,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACsI,uBAAuB,CAAC,GAAGtI,OAAO,CAACsI,uBAAuB,CAAC,KAEtIjG,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACsI,uBAAuB,CAAC,GAAGlG,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACsI,uBAAuB,CAACtG,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACsI,uBAAuB,CAACrG,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACsI,uBAAuB;IAC/T,OAAOjG,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACI8F,cAAc,CAAC3J,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IAChD,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAOiF,cAAc;AACzB,CAAC,EAAG;AAEJnK,KAAK,CAACuK,iBAAiB,GAAI,YAAW;EAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,iBAAiB,CAACpK,UAAU,EAAE;IACnC,IAAI,CAACqK,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,oBAAoB,GAAG,EAAE;IAC9B,IAAIxK,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIiK,iBAAiB,CAAC/J,SAAS,CAACgK,YAAY,GAAG1K,KAAK,CAACwG,UAAU;;EAE3D;AACJ;AACA;AACA;AACA;AACA;EACIiE,iBAAiB,CAAC/J,SAAS,CAACoK,YAAY,GAAG9K,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEzF;AACJ;AACA;AACA;AACA;AACA;EACI0J,iBAAiB,CAAC/J,SAAS,CAACqK,SAAS,GAAG/K,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEtF;AACJ;AACA;AACA;AACA;AACA;EACI0J,iBAAiB,CAAC/J,SAAS,CAACsK,kBAAkB,GAAGhL,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAE/F;AACJ;AACA;AACA;AACA;AACA;EACI0J,iBAAiB,CAAC/J,SAAS,CAACuK,oBAAoB,GAAGjL,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEjG;AACJ;AACA;AACA;AACA;AACA;EACI0J,iBAAiB,CAAC/J,SAAS,CAACiK,iBAAiB,GAAG3K,KAAK,CAACwG,UAAU;;EAEhE;AACJ;AACA;AACA;AACA;AACA;EACIiE,iBAAiB,CAAC/J,SAAS,CAACwK,cAAc,GAAG,IAAI;;EAEjD;AACJ;AACA;AACA;AACA;AACA;EACIT,iBAAiB,CAAC/J,SAAS,CAAC8J,uBAAuB,GAAGxK,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEpG;AACJ;AACA;AACA;AACA;AACA;EACI0J,iBAAiB,CAAC/J,SAAS,CAACkK,mBAAmB,GAAG5K,KAAK,CAACwG,UAAU;;EAElE;AACJ;AACA;AACA;AACA;AACA;EACIiE,iBAAiB,CAAC/J,SAAS,CAACmK,oBAAoB,GAAG7K,KAAK,CAACwG,UAAU;;EAEnE;AACJ;AACA;AACA;AACA;AACA;EACIiE,iBAAiB,CAAC/J,SAAS,CAACyK,wBAAwB,GAAGnL,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAErG;AACJ;AACA;AACA;AACA;AACA;EACI0J,iBAAiB,CAAC/J,SAAS,CAAC0K,uBAAuB,GAAGpL,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEpG;AACJ;AACA;AACA;AACA;AACA;EACI0J,iBAAiB,CAAC/J,SAAS,CAAC2K,mCAAmC,GAAGrL,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEhH;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI0J,iBAAiB,CAACzI,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IACnD,OAAO,IAAIoK,iBAAiB,CAACpK,UAAU,CAAC;EAC5C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoK,iBAAiB,CAACxI,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IACxD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAAC4I,YAAY,IAAI,IAAI,IAAIvK,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,cAAc,CAAC,EACnFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAAC4I,YAAY,CAAC;IACzE,IAAI5I,OAAO,CAAC6I,SAAS,IAAI,IAAI,IAAIxK,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,WAAW,CAAC,EAC7EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAAC6I,SAAS,CAAC;IACtE,IAAI7I,OAAO,CAAC8I,kBAAkB,IAAI,IAAI,IAAIzK,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,oBAAoB,CAAC,EAC/FC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAAC8I,kBAAkB,CAAC;IAC/E,IAAI9I,OAAO,CAAC+I,oBAAoB,IAAI,IAAI,IAAI1K,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,sBAAsB,CAAC,EACnGC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAAC+I,oBAAoB,CAAC;IACjF,IAAI/I,OAAO,CAACgJ,cAAc,IAAI,IAAI,IAAI3K,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,gBAAgB,CAAC,EACvFhC,KAAK,CAACmK,cAAc,CAACpI,MAAM,CAACC,OAAO,CAACgJ,cAAc,EAAE/I,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACjH,IAAIT,OAAO,CAACsI,uBAAuB,IAAI,IAAI,IAAIjK,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,yBAAyB,CAAC,EACzGC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACsI,uBAAuB,CAAC;IACpF,IAAItI,OAAO,CAACiJ,wBAAwB,IAAI,IAAI,IAAI5K,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,0BAA0B,CAAC,EAC3GC,MAAM,CAACM,MAAM,EAAC,wBAAwB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACiJ,wBAAwB,CAAC;IACtF,IAAIjJ,OAAO,CAACkJ,uBAAuB,IAAI,IAAI,IAAI7K,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,yBAAyB,CAAC,EACzGC,MAAM,CAACM,MAAM,EAAC,wBAAwB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACkJ,uBAAuB,CAAC;IACrF,IAAIE,OAAO;IACX,IAAIpJ,OAAO,CAACwI,YAAY,IAAI,IAAI,IAAIxI,OAAO,CAACwI,YAAY,CAACa,OAAO,EAC5DD,OAAO,GAAGpJ,OAAO,CAACwI,YAAY,CAACa,OAAO,EAAE,CAAC,KAEzCD,OAAO,GAAGpJ,OAAO,CAACwI,YAAY;IAClC,IAAIY,OAAO,IAAI,IAAI,IAAIA,OAAO,CAAC7K,MAAM,EAAE;MACnC0B,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACC,IAAI,EAAE;MACjD,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8K,OAAO,CAAC7K,MAAM,EAAE,EAAED,CAAC,EACnC2B,MAAM,CAACqJ,MAAM,CAACF,OAAO,CAAC9K,CAAC,CAAC,CAAC;MAC7B2B,MAAM,CAACQ,MAAM,EAAE;IACnB;IACA,IAAI8I,OAAO;IACX,IAAIvJ,OAAO,CAACyI,iBAAiB,IAAI,IAAI,IAAIzI,OAAO,CAACyI,iBAAiB,CAACY,OAAO,EACtEE,OAAO,GAAGvJ,OAAO,CAACyI,iBAAiB,CAACY,OAAO,EAAE,CAAC,KAE9CE,OAAO,GAAGvJ,OAAO,CAACyI,iBAAiB;IACvC,IAAIc,OAAO,IAAI,IAAI,IAAIA,OAAO,CAAChL,MAAM,EAAE;MACnC0B,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACC,IAAI,EAAE;MACjD,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiL,OAAO,CAAChL,MAAM,EAAE,EAAED,CAAC,EACnC2B,MAAM,CAACqJ,MAAM,CAACC,OAAO,CAACjL,CAAC,CAAC,CAAC;MAC7B2B,MAAM,CAACQ,MAAM,EAAE;IACnB;IACA,IAAI+I,OAAO;IACX,IAAIxJ,OAAO,CAAC0I,mBAAmB,IAAI,IAAI,IAAI1I,OAAO,CAAC0I,mBAAmB,CAACW,OAAO,EAC1EG,OAAO,GAAGxJ,OAAO,CAAC0I,mBAAmB,CAACW,OAAO,EAAE,CAAC,KAEhDG,OAAO,GAAGxJ,OAAO,CAAC0I,mBAAmB;IACzC,IAAIc,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACjL,MAAM,EAAE;MACnC0B,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACC,IAAI,EAAE;MACjD,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkL,OAAO,CAACjL,MAAM,EAAE,EAAED,CAAC,EACnC2B,MAAM,CAACqJ,MAAM,CAACE,OAAO,CAAClL,CAAC,CAAC,CAAC;MAC7B2B,MAAM,CAACQ,MAAM,EAAE;IACnB;IACA,IAAIgJ,OAAO;IACX,IAAIzJ,OAAO,CAAC2I,oBAAoB,IAAI,IAAI,IAAI3I,OAAO,CAAC2I,oBAAoB,CAACU,OAAO,EAC5EI,OAAO,GAAGzJ,OAAO,CAAC2I,oBAAoB,CAACU,OAAO,EAAE,CAAC,KAEjDI,OAAO,GAAGzJ,OAAO,CAAC2I,oBAAoB;IAC1C,IAAIc,OAAO,IAAI,IAAI,IAAIA,OAAO,CAAClL,MAAM,EAAE;MACnC0B,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACC,IAAI,EAAE;MACjD,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmL,OAAO,CAAClL,MAAM,EAAE,EAAED,CAAC,EACnC2B,MAAM,CAACqJ,MAAM,CAACG,OAAO,CAACnL,CAAC,CAAC,CAAC;MAC7B2B,MAAM,CAACQ,MAAM,EAAE;IACnB;IACA,IAAIT,OAAO,CAACmJ,mCAAmC,IAAI,IAAI,IAAI9K,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,qCAAqC,CAAC,EACjIC,MAAM,CAACM,MAAM,EAAC,wBAAwB,GAAG,CAAC,CAACM,MAAM,CAACb,OAAO,CAACmJ,mCAAmC,CAAC;IAClG,OAAOlJ,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIsI,iBAAiB,CAACpH,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IAC1E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI8H,iBAAiB,CAACnH,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IACvD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACuK,iBAAiB,EAAE;IAC1G,OAAOlH,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,EAAE;UACH,IAAI,EAAE1B,OAAO,CAACwI,YAAY,IAAIxI,OAAO,CAACwI,YAAY,CAACjK,MAAM,CAAC,EACtDyB,OAAO,CAACwI,YAAY,GAAG,EAAE;UAC7B,IAAI,CAAC9G,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE;YACjB,IAAIgI,IAAI,GAAGrI,MAAM,CAACd,MAAM,EAAE,GAAGc,MAAM,CAACI,GAAG;YACvC,OAAOJ,MAAM,CAACI,GAAG,GAAGiI,IAAI,EACpB1J,OAAO,CAACwI,YAAY,CAAC/D,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UAClD,CAAC,MACGtJ,OAAO,CAACwI,YAAY,CAAC/D,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UAC9C;QACJ,KAAK,CAAC;UACFtJ,OAAO,CAAC4I,YAAY,GAAGvH,MAAM,CAACR,MAAM,EAAE;UACtC;QACJ,KAAK,CAAC;UACFb,OAAO,CAAC6I,SAAS,GAAGxH,MAAM,CAACR,MAAM,EAAE;UACnC;QACJ,KAAK,CAAC;UACFb,OAAO,CAAC8I,kBAAkB,GAAGzH,MAAM,CAACR,MAAM,EAAE;UAC5C;QACJ,KAAK,CAAC;UACFb,OAAO,CAAC+I,oBAAoB,GAAG1H,MAAM,CAACR,MAAM,EAAE;UAC9C;QACJ,KAAK,EAAE;UACH,IAAI,EAAEb,OAAO,CAACyI,iBAAiB,IAAIzI,OAAO,CAACyI,iBAAiB,CAAClK,MAAM,CAAC,EAChEyB,OAAO,CAACyI,iBAAiB,GAAG,EAAE;UAClC,IAAI,CAAC/G,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE;YACjB,IAAIgI,IAAI,GAAGrI,MAAM,CAACd,MAAM,EAAE,GAAGc,MAAM,CAACI,GAAG;YACvC,OAAOJ,MAAM,CAACI,GAAG,GAAGiI,IAAI,EACpB1J,OAAO,CAACyI,iBAAiB,CAAChE,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UACvD,CAAC,MACGtJ,OAAO,CAACyI,iBAAiB,CAAChE,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UACnD;QACJ,KAAK,CAAC;UACFtJ,OAAO,CAACgJ,cAAc,GAAGhL,KAAK,CAACmK,cAAc,CAAC/G,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UAC7E;QACJ,KAAK,CAAC;UACFP,OAAO,CAACsI,uBAAuB,GAAGjH,MAAM,CAACR,MAAM,EAAE;UACjD;QACJ,KAAK,EAAE;UACH,IAAI,EAAEb,OAAO,CAAC0I,mBAAmB,IAAI1I,OAAO,CAAC0I,mBAAmB,CAACnK,MAAM,CAAC,EACpEyB,OAAO,CAAC0I,mBAAmB,GAAG,EAAE;UACpC,IAAI,CAAChH,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE;YACjB,IAAIgI,IAAI,GAAGrI,MAAM,CAACd,MAAM,EAAE,GAAGc,MAAM,CAACI,GAAG;YACvC,OAAOJ,MAAM,CAACI,GAAG,GAAGiI,IAAI,EACpB1J,OAAO,CAAC0I,mBAAmB,CAACjE,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UACzD,CAAC,MACGtJ,OAAO,CAAC0I,mBAAmB,CAACjE,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UACrD;QACJ,KAAK,EAAE;UACH,IAAI,EAAEtJ,OAAO,CAAC2I,oBAAoB,IAAI3I,OAAO,CAAC2I,oBAAoB,CAACpK,MAAM,CAAC,EACtEyB,OAAO,CAAC2I,oBAAoB,GAAG,EAAE;UACrC,IAAI,CAACjH,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE;YACjB,IAAIgI,IAAI,GAAGrI,MAAM,CAACd,MAAM,EAAE,GAAGc,MAAM,CAACI,GAAG;YACvC,OAAOJ,MAAM,CAACI,GAAG,GAAGiI,IAAI,EACpB1J,OAAO,CAAC2I,oBAAoB,CAAClE,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UAC1D,CAAC,MACGtJ,OAAO,CAAC2I,oBAAoB,CAAClE,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UACtD;QACJ,KAAK,EAAE;UACHtJ,OAAO,CAACiJ,wBAAwB,GAAG5H,MAAM,CAACR,MAAM,EAAE;UAClD;QACJ,KAAK,EAAE;UACHb,OAAO,CAACkJ,uBAAuB,GAAG7H,MAAM,CAACR,MAAM,EAAE;UACjD;QACJ,KAAK,EAAE;UACHb,OAAO,CAACmJ,mCAAmC,GAAG9H,MAAM,CAACR,MAAM,EAAE;UAC7D;QACJ;UACIQ,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIuI,iBAAiB,CAAC3G,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IACjE,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIgI,iBAAiB,CAAC1G,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IAChD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAACwI,YAAY,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;MACxE,IAAIkJ,OAAO;MACX,IAAIpJ,OAAO,CAACwI,YAAY,IAAI,IAAI,IAAIxI,OAAO,CAACwI,YAAY,CAACa,OAAO,EAC5DD,OAAO,GAAGpJ,OAAO,CAACwI,YAAY,CAACa,OAAO,EAAE,CAAC,KAEzCD,OAAO,GAAGpJ,OAAO,CAACwI,YAAY;MAClC,IAAI,CAAC9D,KAAK,CAACC,OAAO,CAACyE,OAAO,CAAC,EACvB,OAAO,8BAA8B;MACzC,KAAK,IAAI9K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8K,OAAO,CAAC7K,MAAM,EAAE,EAAED,CAAC,EACnC,IAAI,CAACR,KAAK,CAACiE,SAAS,CAACqH,OAAO,CAAC9K,CAAC,CAAC,CAAC,IAAI,EAAE8K,OAAO,CAAC9K,CAAC,CAAC,IAAIR,KAAK,CAACiE,SAAS,CAACqH,OAAO,CAAC9K,CAAC,CAAC,CAAC0D,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAACqH,OAAO,CAAC9K,CAAC,CAAC,CAAC2D,IAAI,CAAC,CAAC,EACpH,OAAO,uCAAuC;IAC1D;IACA,IAAIjC,OAAO,CAAC4I,YAAY,IAAI,IAAI,IAAI5I,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtE,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC4I,YAAY,CAAC,IAAI,EAAE5I,OAAO,CAAC4I,YAAY,IAAI9K,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC4I,YAAY,CAAC5G,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC4I,YAAY,CAAC3G,IAAI,CAAC,CAAC,EAC5J,OAAO,qCAAqC;IACpD,IAAIjC,OAAO,CAAC6I,SAAS,IAAI,IAAI,IAAI7I,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChE,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC6I,SAAS,CAAC,IAAI,EAAE7I,OAAO,CAAC6I,SAAS,IAAI/K,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC6I,SAAS,CAAC7G,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC6I,SAAS,CAAC5G,IAAI,CAAC,CAAC,EAChJ,OAAO,kCAAkC;IACjD,IAAIjC,OAAO,CAAC8I,kBAAkB,IAAI,IAAI,IAAI9I,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClF,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC8I,kBAAkB,CAAC,IAAI,EAAE9I,OAAO,CAAC8I,kBAAkB,IAAIhL,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC8I,kBAAkB,CAAC9G,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC8I,kBAAkB,CAAC7G,IAAI,CAAC,CAAC,EACpL,OAAO,2CAA2C;IAC1D,IAAIjC,OAAO,CAAC+I,oBAAoB,IAAI,IAAI,IAAI/I,OAAO,CAACE,cAAc,CAAC,sBAAsB,CAAC,EACtF,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC+I,oBAAoB,CAAC,IAAI,EAAE/I,OAAO,CAAC+I,oBAAoB,IAAIjL,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC+I,oBAAoB,CAAC/G,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC+I,oBAAoB,CAAC9G,IAAI,CAAC,CAAC,EAC5L,OAAO,6CAA6C;IAC5D,IAAIjC,OAAO,CAACyI,iBAAiB,IAAI,IAAI,IAAIzI,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAAE;MAClF,IAAIqJ,OAAO;MACX,IAAIvJ,OAAO,CAACyI,iBAAiB,IAAI,IAAI,IAAIzI,OAAO,CAACyI,iBAAiB,CAACY,OAAO,EACtEE,OAAO,GAAGvJ,OAAO,CAACyI,iBAAiB,CAACY,OAAO,EAAE,CAAC,KAE9CE,OAAO,GAAGvJ,OAAO,CAACyI,iBAAiB;MACvC,IAAI,CAAC/D,KAAK,CAACC,OAAO,CAAC4E,OAAO,CAAC,EACvB,OAAO,mCAAmC;MAC9C,KAAK,IAAIjL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiL,OAAO,CAAChL,MAAM,EAAE,EAAED,CAAC,EACnC,IAAI,CAACR,KAAK,CAACiE,SAAS,CAACwH,OAAO,CAACjL,CAAC,CAAC,CAAC,IAAI,EAAEiL,OAAO,CAACjL,CAAC,CAAC,IAAIR,KAAK,CAACiE,SAAS,CAACwH,OAAO,CAACjL,CAAC,CAAC,CAAC0D,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAACwH,OAAO,CAACjL,CAAC,CAAC,CAAC2D,IAAI,CAAC,CAAC,EACpH,OAAO,4CAA4C;IAC/D;IACA,IAAIjC,OAAO,CAACgJ,cAAc,IAAI,IAAI,IAAIhJ,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;MAC5E,IAAI4B,KAAK,GAAG9D,KAAK,CAACmK,cAAc,CAACtG,MAAM,CAAC7B,OAAO,CAACgJ,cAAc,CAAC;MAC/D,IAAIlH,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;IACxC;IACA,IAAI9B,OAAO,CAACsI,uBAAuB,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACsI,uBAAuB,CAAC,IAAI,EAAEtI,OAAO,CAACsI,uBAAuB,IAAIxK,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACsI,uBAAuB,CAACtG,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACsI,uBAAuB,CAACrG,IAAI,CAAC,CAAC,EACxM,OAAO,gDAAgD;IAC/D,IAAIjC,OAAO,CAAC0I,mBAAmB,IAAI,IAAI,IAAI1I,OAAO,CAACE,cAAc,CAAC,qBAAqB,CAAC,EAAE;MACtF,IAAIsJ,OAAO;MACX,IAAIxJ,OAAO,CAAC0I,mBAAmB,IAAI,IAAI,IAAI1I,OAAO,CAAC0I,mBAAmB,CAACW,OAAO,EAC1EG,OAAO,GAAGxJ,OAAO,CAAC0I,mBAAmB,CAACW,OAAO,EAAE,CAAC,KAEhDG,OAAO,GAAGxJ,OAAO,CAAC0I,mBAAmB;MACzC,IAAI,CAAChE,KAAK,CAACC,OAAO,CAAC6E,OAAO,CAAC,EACvB,OAAO,qCAAqC;MAChD,KAAK,IAAIlL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkL,OAAO,CAACjL,MAAM,EAAE,EAAED,CAAC,EACnC,IAAI,CAACR,KAAK,CAACiE,SAAS,CAACyH,OAAO,CAAClL,CAAC,CAAC,CAAC,IAAI,EAAEkL,OAAO,CAAClL,CAAC,CAAC,IAAIR,KAAK,CAACiE,SAAS,CAACyH,OAAO,CAAClL,CAAC,CAAC,CAAC0D,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAACyH,OAAO,CAAClL,CAAC,CAAC,CAAC2D,IAAI,CAAC,CAAC,EACpH,OAAO,8CAA8C;IACjE;IACA,IAAIjC,OAAO,CAAC2I,oBAAoB,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,sBAAsB,CAAC,EAAE;MACxF,IAAIuJ,OAAO;MACX,IAAIzJ,OAAO,CAAC2I,oBAAoB,IAAI,IAAI,IAAI3I,OAAO,CAAC2I,oBAAoB,CAACU,OAAO,EAC5EI,OAAO,GAAGzJ,OAAO,CAAC2I,oBAAoB,CAACU,OAAO,EAAE,CAAC,KAEjDI,OAAO,GAAGzJ,OAAO,CAAC2I,oBAAoB;MAC1C,IAAI,CAACjE,KAAK,CAACC,OAAO,CAAC8E,OAAO,CAAC,EACvB,OAAO,sCAAsC;MACjD,KAAK,IAAInL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmL,OAAO,CAAClL,MAAM,EAAE,EAAED,CAAC,EACnC,IAAI,CAACR,KAAK,CAACiE,SAAS,CAAC0H,OAAO,CAACnL,CAAC,CAAC,CAAC,IAAI,EAAEmL,OAAO,CAACnL,CAAC,CAAC,IAAIR,KAAK,CAACiE,SAAS,CAAC0H,OAAO,CAACnL,CAAC,CAAC,CAAC0D,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC0H,OAAO,CAACnL,CAAC,CAAC,CAAC2D,IAAI,CAAC,CAAC,EACpH,OAAO,+CAA+C;IAClE;IACA,IAAIjC,OAAO,CAACiJ,wBAAwB,IAAI,IAAI,IAAIjJ,OAAO,CAACE,cAAc,CAAC,0BAA0B,CAAC,EAC9F,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACiJ,wBAAwB,CAAC,IAAI,EAAEjJ,OAAO,CAACiJ,wBAAwB,IAAInL,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACiJ,wBAAwB,CAACjH,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACiJ,wBAAwB,CAAChH,IAAI,CAAC,CAAC,EAC5M,OAAO,iDAAiD;IAChE,IAAIjC,OAAO,CAACkJ,uBAAuB,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACkJ,uBAAuB,CAAC,IAAI,EAAElJ,OAAO,CAACkJ,uBAAuB,IAAIpL,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACkJ,uBAAuB,CAAClH,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACkJ,uBAAuB,CAACjH,IAAI,CAAC,CAAC,EACxM,OAAO,gDAAgD;IAC/D,IAAIjC,OAAO,CAACmJ,mCAAmC,IAAI,IAAI,IAAInJ,OAAO,CAACE,cAAc,CAAC,qCAAqC,CAAC,EACpH,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACmJ,mCAAmC,CAAC,IAAI,EAAEnJ,OAAO,CAACmJ,mCAAmC,IAAIrL,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACmJ,mCAAmC,CAACnH,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACmJ,mCAAmC,CAAClH,IAAI,CAAC,CAAC,EACxP,OAAO,4DAA4D;IAC3E,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIsG,iBAAiB,CAACpG,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IAC7D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAAE;MACpCD,MAAM,CAACmG,YAAY,GAAG,EAAE;MACxBnG,MAAM,CAACoG,iBAAiB,GAAG,EAAE;MAC7BpG,MAAM,CAACqG,mBAAmB,GAAG,EAAE;MAC/BrG,MAAM,CAACsG,oBAAoB,GAAG,EAAE;IACpC;IACA,IAAIvG,OAAO,CAACE,QAAQ,EAAE;MAClB,IAAIxE,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACuG,YAAY,GAAGxG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACxH,CAAC,MACGF,MAAM,CAACuG,YAAY,GAAGxG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MAC5D,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACwG,SAAS,GAAGzG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACrH,CAAC,MACGF,MAAM,CAACwG,SAAS,GAAGzG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MACzD,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACyG,kBAAkB,GAAG1G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MAC9H,CAAC,MACGF,MAAM,CAACyG,kBAAkB,GAAG1G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MAClE,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAAC0G,oBAAoB,GAAG3G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MAChI,CAAC,MACGF,MAAM,CAAC0G,oBAAoB,GAAG3G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MACpEJ,MAAM,CAAC2G,cAAc,GAAG,IAAI;MAC5B,IAAIlL,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACnI,CAAC,MACGF,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MACvE,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAAC4G,wBAAwB,GAAG7G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACpI,CAAC,MACGF,MAAM,CAAC4G,wBAAwB,GAAG7G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MACxE,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAAC6G,uBAAuB,GAAG9G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACnI,CAAC,MACGF,MAAM,CAAC6G,uBAAuB,GAAG9G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MACvE,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAAC8G,mCAAmC,GAAG/G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MAC/I,CAAC,MACGF,MAAM,CAAC8G,mCAAmC,GAAG/G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;IACvF;IACA,IAAIzC,OAAO,CAAC4I,YAAY,IAAI,IAAI,IAAI5I,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtE,IAAI,OAAOF,OAAO,CAAC4I,YAAY,KAAK,QAAQ,EACxCvG,MAAM,CAACuG,YAAY,GAAGxG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAAC4I,YAAY,CAAC,GAAG5I,OAAO,CAAC4I,YAAY,CAAC,KAErGvG,MAAM,CAACuG,YAAY,GAAGxG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAAC4I,YAAY,CAAC,GAAGxG,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAAC4I,YAAY,CAAC5G,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAAC4I,YAAY,CAAC3G,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAAC4I,YAAY;IACxQ,IAAI5I,OAAO,CAAC6I,SAAS,IAAI,IAAI,IAAI7I,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChE,IAAI,OAAOF,OAAO,CAAC6I,SAAS,KAAK,QAAQ,EACrCxG,MAAM,CAACwG,SAAS,GAAGzG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAAC6I,SAAS,CAAC,GAAG7I,OAAO,CAAC6I,SAAS,CAAC,KAE5FxG,MAAM,CAACwG,SAAS,GAAGzG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAAC6I,SAAS,CAAC,GAAGzG,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAAC6I,SAAS,CAAC7G,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAAC6I,SAAS,CAAC5G,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAAC6I,SAAS;IACzP,IAAI7I,OAAO,CAAC8I,kBAAkB,IAAI,IAAI,IAAI9I,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClF,IAAI,OAAOF,OAAO,CAAC8I,kBAAkB,KAAK,QAAQ,EAC9CzG,MAAM,CAACyG,kBAAkB,GAAG1G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAAC8I,kBAAkB,CAAC,GAAG9I,OAAO,CAAC8I,kBAAkB,CAAC,KAEvHzG,MAAM,CAACyG,kBAAkB,GAAG1G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAAC8I,kBAAkB,CAAC,GAAG1G,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAAC8I,kBAAkB,CAAC9G,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAAC8I,kBAAkB,CAAC7G,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAAC8I,kBAAkB;IACtS,IAAI9I,OAAO,CAAC+I,oBAAoB,IAAI,IAAI,IAAI/I,OAAO,CAACE,cAAc,CAAC,sBAAsB,CAAC,EACtF,IAAI,OAAOF,OAAO,CAAC+I,oBAAoB,KAAK,QAAQ,EAChD1G,MAAM,CAAC0G,oBAAoB,GAAG3G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAAC+I,oBAAoB,CAAC,GAAG/I,OAAO,CAAC+I,oBAAoB,CAAC,KAE7H1G,MAAM,CAAC0G,oBAAoB,GAAG3G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAAC+I,oBAAoB,CAAC,GAAG3G,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAAC+I,oBAAoB,CAAC/G,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAAC+I,oBAAoB,CAAC9G,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAAC+I,oBAAoB;IAChT,IAAI/I,OAAO,CAACgJ,cAAc,IAAI,IAAI,IAAIhJ,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EmC,MAAM,CAAC2G,cAAc,GAAGhL,KAAK,CAACmK,cAAc,CAAChG,QAAQ,CAACnC,OAAO,CAACgJ,cAAc,EAAE5G,OAAO,CAAC;IAC1F,IAAIpC,OAAO,CAACsI,uBAAuB,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,OAAOF,OAAO,CAACsI,uBAAuB,KAAK,QAAQ,EACnDjG,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACsI,uBAAuB,CAAC,GAAGtI,OAAO,CAACsI,uBAAuB,CAAC,KAEtIjG,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACsI,uBAAuB,CAAC,GAAGlG,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACsI,uBAAuB,CAACtG,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACsI,uBAAuB,CAACrG,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACsI,uBAAuB;IAC/T,IAAItI,OAAO,CAACiJ,wBAAwB,IAAI,IAAI,IAAIjJ,OAAO,CAACE,cAAc,CAAC,0BAA0B,CAAC,EAC9F,IAAI,OAAOF,OAAO,CAACiJ,wBAAwB,KAAK,QAAQ,EACpD5G,MAAM,CAAC4G,wBAAwB,GAAG7G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACiJ,wBAAwB,CAAC,GAAGjJ,OAAO,CAACiJ,wBAAwB,CAAC,KAEzI5G,MAAM,CAAC4G,wBAAwB,GAAG7G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACiJ,wBAAwB,CAAC,GAAG7G,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACiJ,wBAAwB,CAACjH,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACiJ,wBAAwB,CAAChH,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACiJ,wBAAwB;IACpU,IAAIjJ,OAAO,CAACkJ,uBAAuB,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,OAAOF,OAAO,CAACkJ,uBAAuB,KAAK,QAAQ,EACnD7G,MAAM,CAAC6G,uBAAuB,GAAG9G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACkJ,uBAAuB,CAAC,GAAGlJ,OAAO,CAACkJ,uBAAuB,CAAC,KAEtI7G,MAAM,CAAC6G,uBAAuB,GAAG9G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACkJ,uBAAuB,CAAC,GAAG9G,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACkJ,uBAAuB,CAAClH,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACkJ,uBAAuB,CAACjH,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACkJ,uBAAuB;IAC/T,IAAIlJ,OAAO,CAACwI,YAAY,IAAIxI,OAAO,CAACwI,YAAY,CAACjK,MAAM,EAAE;MACrD8D,MAAM,CAACmG,YAAY,GAAG,EAAE;MACxB,KAAK,IAAIrE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACwI,YAAY,CAACjK,MAAM,EAAE,EAAE4F,CAAC,EAChD,IAAI,OAAOnE,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,KAAK,QAAQ,EAC3C9B,MAAM,CAACmG,YAAY,CAACrE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAAC,GAAGnE,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAAC,KAE9G9B,MAAM,CAACmG,YAAY,CAACrE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAACnC,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAAClC,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,GAAG5C,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC;IACvR;IACA,IAAInE,OAAO,CAACyI,iBAAiB,IAAIzI,OAAO,CAACyI,iBAAiB,CAAClK,MAAM,EAAE;MAC/D8D,MAAM,CAACoG,iBAAiB,GAAG,EAAE;MAC7B,KAAK,IAAItE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACyI,iBAAiB,CAAClK,MAAM,EAAE,EAAE4F,CAAC,EACrD,IAAI,OAAOnE,OAAO,CAACyI,iBAAiB,CAACtE,CAAC,CAAC,KAAK,QAAQ,EAChD9B,MAAM,CAACoG,iBAAiB,CAACtE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACyI,iBAAiB,CAACtE,CAAC,CAAC,CAAC,GAAGnE,OAAO,CAACyI,iBAAiB,CAACtE,CAAC,CAAC,CAAC,KAE7H9B,MAAM,CAACoG,iBAAiB,CAACtE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACyI,iBAAiB,CAACtE,CAAC,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACyI,iBAAiB,CAACtE,CAAC,CAAC,CAACnC,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACyI,iBAAiB,CAACtE,CAAC,CAAC,CAAClC,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,GAAG5C,OAAO,CAACyI,iBAAiB,CAACtE,CAAC,CAAC;IAChT;IACA,IAAInE,OAAO,CAAC0I,mBAAmB,IAAI1I,OAAO,CAAC0I,mBAAmB,CAACnK,MAAM,EAAE;MACnE8D,MAAM,CAACqG,mBAAmB,GAAG,EAAE;MAC/B,KAAK,IAAIvE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAAC0I,mBAAmB,CAACnK,MAAM,EAAE,EAAE4F,CAAC,EACvD,IAAI,OAAOnE,OAAO,CAAC0I,mBAAmB,CAACvE,CAAC,CAAC,KAAK,QAAQ,EAClD9B,MAAM,CAACqG,mBAAmB,CAACvE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAAC0I,mBAAmB,CAACvE,CAAC,CAAC,CAAC,GAAGnE,OAAO,CAAC0I,mBAAmB,CAACvE,CAAC,CAAC,CAAC,KAEnI9B,MAAM,CAACqG,mBAAmB,CAACvE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAAC0I,mBAAmB,CAACvE,CAAC,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAAC0I,mBAAmB,CAACvE,CAAC,CAAC,CAACnC,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAAC0I,mBAAmB,CAACvE,CAAC,CAAC,CAAClC,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,GAAG5C,OAAO,CAAC0I,mBAAmB,CAACvE,CAAC,CAAC;IAC1T;IACA,IAAInE,OAAO,CAAC2I,oBAAoB,IAAI3I,OAAO,CAAC2I,oBAAoB,CAACpK,MAAM,EAAE;MACrE8D,MAAM,CAACsG,oBAAoB,GAAG,EAAE;MAChC,KAAK,IAAIxE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAAC2I,oBAAoB,CAACpK,MAAM,EAAE,EAAE4F,CAAC,EACxD,IAAI,OAAOnE,OAAO,CAAC2I,oBAAoB,CAACxE,CAAC,CAAC,KAAK,QAAQ,EACnD9B,MAAM,CAACsG,oBAAoB,CAACxE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAAC2I,oBAAoB,CAACxE,CAAC,CAAC,CAAC,GAAGnE,OAAO,CAAC2I,oBAAoB,CAACxE,CAAC,CAAC,CAAC,KAEtI9B,MAAM,CAACsG,oBAAoB,CAACxE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAAC2I,oBAAoB,CAACxE,CAAC,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAAC2I,oBAAoB,CAACxE,CAAC,CAAC,CAACnC,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAAC2I,oBAAoB,CAACxE,CAAC,CAAC,CAAClC,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,GAAG5C,OAAO,CAAC2I,oBAAoB,CAACxE,CAAC,CAAC;IAC/T;IACA,IAAInE,OAAO,CAACmJ,mCAAmC,IAAI,IAAI,IAAInJ,OAAO,CAACE,cAAc,CAAC,qCAAqC,CAAC,EACpH,IAAI,OAAOF,OAAO,CAACmJ,mCAAmC,KAAK,QAAQ,EAC/D9G,MAAM,CAAC8G,mCAAmC,GAAG/G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACmJ,mCAAmC,CAAC,GAAGnJ,OAAO,CAACmJ,mCAAmC,CAAC,KAE1K9G,MAAM,CAAC8G,mCAAmC,GAAG/G,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACmJ,mCAAmC,CAAC,GAAG/G,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACmJ,mCAAmC,CAACnH,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACmJ,mCAAmC,CAAClH,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACmJ,mCAAmC;IAC3X,OAAO9G,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIkG,iBAAiB,CAAC/J,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IACnD,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAOqF,iBAAiB;AAC5B,CAAC,EAAG;AAEJvK,KAAK,CAAC2L,YAAY,GAAI,YAAW;EAE7B;AACJ;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,YAAY,CAACxL,UAAU,EAAE;IAC9B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIqL,YAAY,CAACnL,SAAS,CAACW,UAAU,GAAG,EAAE;;EAEtC;AACJ;AACA;AACA;AACA;AACA;EACIwK,YAAY,CAACnL,SAAS,CAACY,aAAa,GAAG,EAAE;;EAEzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIuK,YAAY,CAAC7J,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IAC9C,OAAO,IAAIwL,YAAY,CAACxL,UAAU,CAAC;EACvC,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIwL,YAAY,CAAC5J,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IACnD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAACb,UAAU,IAAI,IAAI,IAAId,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,YAAY,CAAC,EAC/EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACb,UAAU,CAAC;IACvE,IAAIa,OAAO,CAACZ,aAAa,IAAI,IAAI,IAAIf,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,eAAe,CAAC,EACrFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACZ,aAAa,CAAC;IAC1E,OAAOa,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI0J,YAAY,CAACxI,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IACrE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkJ,YAAY,CAACvI,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IAClD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAAC2L,YAAY,EAAE;IACrG,OAAOtI,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACF1B,OAAO,CAACb,UAAU,GAAGkC,MAAM,CAACV,MAAM,EAAE;UACpC;QACJ,KAAK,CAAC;UACFX,OAAO,CAACZ,aAAa,GAAGiC,MAAM,CAACV,MAAM,EAAE;UACvC;QACJ;UACIU,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2J,YAAY,CAAC/H,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IAC5D,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIoJ,YAAY,CAAC9H,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IAC3C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAACb,UAAU,IAAI,IAAI,IAAIa,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACb,UAAU,CAAC,EACnC,OAAO,6BAA6B;IAC5C,IAAIa,OAAO,CAACZ,aAAa,IAAI,IAAI,IAAIY,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACZ,aAAa,CAAC,EACtC,OAAO,gCAAgC;IAC/C,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIuK,YAAY,CAACxH,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IACxD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAACE,QAAQ,EAAE;MAClBD,MAAM,CAAClD,UAAU,GAAG,EAAE;MACtBkD,MAAM,CAACjD,aAAa,GAAG,EAAE;IAC7B;IACA,IAAIY,OAAO,CAACb,UAAU,IAAI,IAAI,IAAIa,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEmC,MAAM,CAAClD,UAAU,GAAGa,OAAO,CAACb,UAAU;IAC1C,IAAIa,OAAO,CAACZ,aAAa,IAAI,IAAI,IAAIY,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEmC,MAAM,CAACjD,aAAa,GAAGY,OAAO,CAACZ,aAAa;IAChD,OAAOiD,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIsH,YAAY,CAACnL,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IAC9C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAOyG,YAAY;AACvB,CAAC,EAAG;AAEJ3L,KAAK,CAAC4L,+BAA+B,GAAI,YAAW;EAEhD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,+BAA+B,CAACzL,UAAU,EAAE;IACjD,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIsL,+BAA+B,CAACpL,SAAS,CAACqL,iBAAiB,GAAG,IAAI;;EAElE;AACJ;AACA;AACA;AACA;AACA;EACID,+BAA+B,CAACpL,SAAS,CAACsL,OAAO,GAAG,IAAI;;EAExD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,+BAA+B,CAAC9J,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IACjE,OAAO,IAAIyL,+BAA+B,CAACzL,UAAU,CAAC;EAC1D,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIyL,+BAA+B,CAAC7J,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IACtE,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAAC6J,iBAAiB,IAAI,IAAI,IAAIxL,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,mBAAmB,CAAC,EAC7FhC,KAAK,CAACuK,iBAAiB,CAACxI,MAAM,CAACC,OAAO,CAAC6J,iBAAiB,EAAE5J,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACvH,IAAIT,OAAO,CAAC8J,OAAO,IAAI,IAAI,IAAIzL,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEhC,KAAK,CAAC2L,YAAY,CAAC5J,MAAM,CAACC,OAAO,CAAC8J,OAAO,EAAE7J,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACxG,OAAOR,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2J,+BAA+B,CAACzI,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IACxF,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACImJ,+BAA+B,CAACxI,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IACrE,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAAC4L,+BAA+B,EAAE;IACxH,OAAOvI,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACF1B,OAAO,CAAC6J,iBAAiB,GAAG7L,KAAK,CAACuK,iBAAiB,CAACnH,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACnF;QACJ,KAAK,CAAC;UACFP,OAAO,CAAC8J,OAAO,GAAG9L,KAAK,CAAC2L,YAAY,CAACvI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACpE;QACJ;UACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4J,+BAA+B,CAAChI,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IAC/E,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIqJ,+BAA+B,CAAC/H,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IAC9D,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAAC6J,iBAAiB,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAAE;MAClF,IAAI4B,KAAK,GAAG9D,KAAK,CAACuK,iBAAiB,CAAC1G,MAAM,CAAC7B,OAAO,CAAC6J,iBAAiB,CAAC;MACrE,IAAI/H,KAAK,EACL,OAAO,oBAAoB,GAAGA,KAAK;IAC3C;IACA,IAAI9B,OAAO,CAAC8J,OAAO,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;MAC9D,IAAI4B,KAAK,GAAG9D,KAAK,CAAC2L,YAAY,CAAC9H,MAAM,CAAC7B,OAAO,CAAC8J,OAAO,CAAC;MACtD,IAAIhI,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;IACjC;IACA,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI8H,+BAA+B,CAACzH,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IAC3E,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAACE,QAAQ,EAAE;MAClBD,MAAM,CAACwH,iBAAiB,GAAG,IAAI;MAC/BxH,MAAM,CAACyH,OAAO,GAAG,IAAI;IACzB;IACA,IAAI9J,OAAO,CAAC6J,iBAAiB,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFmC,MAAM,CAACwH,iBAAiB,GAAG7L,KAAK,CAACuK,iBAAiB,CAACpG,QAAQ,CAACnC,OAAO,CAAC6J,iBAAiB,EAAEzH,OAAO,CAAC;IACnG,IAAIpC,OAAO,CAAC8J,OAAO,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DmC,MAAM,CAACyH,OAAO,GAAG9L,KAAK,CAAC2L,YAAY,CAACxH,QAAQ,CAACnC,OAAO,CAAC8J,OAAO,EAAE1H,OAAO,CAAC;IAC1E,OAAOC,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIuH,+BAA+B,CAACpL,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IACjE,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAO0G,+BAA+B;AAC1C,CAAC,EAAG;AAEJ5L,KAAK,CAAC+L,uBAAuB,GAAI,YAAW;EAExC;AACJ;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,uBAAuB,CAAC5L,UAAU,EAAE;IACzC,IAAI,CAAC6L,WAAW,GAAG,CAAC,CAAC;IACrB,IAAI7L,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIyL,uBAAuB,CAACvL,SAAS,CAACsL,OAAO,GAAG,IAAI;;EAEhD;AACJ;AACA;AACA;AACA;AACA;EACIC,uBAAuB,CAACvL,SAAS,CAACwL,WAAW,GAAGlM,KAAK,CAAC8F,WAAW;;EAEjE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACImG,uBAAuB,CAACjK,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IACzD,OAAO,IAAI4L,uBAAuB,CAAC5L,UAAU,CAAC;EAClD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4L,uBAAuB,CAAChK,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC9D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAAC8J,OAAO,IAAI,IAAI,IAAIzL,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEhC,KAAK,CAAC2L,YAAY,CAAC5J,MAAM,CAACC,OAAO,CAAC8J,OAAO,EAAE7J,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACxG,IAAIT,OAAO,CAACgK,WAAW,IAAI,IAAI,IAAI3L,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,aAAa,CAAC,EACjF,KAAK,IAAI5B,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACgK,WAAW,CAAC,EAAE1L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MAC3E2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAACD,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACvC,IAAI,CAACE,CAAC,CAAC,CAAC;MACjGN,KAAK,CAACiM,QAAQ,CAAClK,MAAM,CAACC,OAAO,CAACgK,WAAW,CAAC5L,IAAI,CAACE,CAAC,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE,CAACA,MAAM,EAAE;IAC1H;IACJ,OAAOR,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI8J,uBAAuB,CAAC5I,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IAChF,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIsJ,uBAAuB,CAAC3I,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IAC7D,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAAC+L,uBAAuB,EAAE;MAAEjG,GAAG;IACrH,OAAOzC,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACF1B,OAAO,CAAC8J,OAAO,GAAG9L,KAAK,CAAC2L,YAAY,CAACvI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACpE;QACJ,KAAK,CAAC;UACFc,MAAM,CAAC0C,IAAI,EAAE,CAACtC,GAAG,EAAE;UACnB,IAAIzB,OAAO,CAACgK,WAAW,KAAKlM,KAAK,CAAC8F,WAAW,EACzC5D,OAAO,CAACgK,WAAW,GAAG,CAAC,CAAC;UAC5BlG,GAAG,GAAGzC,MAAM,CAACV,MAAM,EAAE;UACrBU,MAAM,CAACI,GAAG,EAAE;UACZzB,OAAO,CAACgK,WAAW,CAAClG,GAAG,CAAC,GAAG9F,KAAK,CAACiM,QAAQ,CAAC7I,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACzE;QACJ;UACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+J,uBAAuB,CAACnI,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IACvE,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIwJ,uBAAuB,CAAClI,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IACtD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAAC8J,OAAO,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;MAC9D,IAAI4B,KAAK,GAAG9D,KAAK,CAAC2L,YAAY,CAAC9H,MAAM,CAAC7B,OAAO,CAAC8J,OAAO,CAAC;MACtD,IAAIhI,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;IACjC;IACA,IAAI9B,OAAO,CAACgK,WAAW,IAAI,IAAI,IAAIhK,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EAAE;MACtE,IAAI,CAACpC,KAAK,CAACkG,QAAQ,CAAChE,OAAO,CAACgK,WAAW,CAAC,EACpC,OAAO,8BAA8B;MACzC,IAAIlG,GAAG,GAAGzF,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACgK,WAAW,CAAC;MAC1C,KAAK,IAAI1L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,GAAG,CAACvF,MAAM,EAAE,EAAED,CAAC,EAAE;QACjC,IAAIwD,KAAK,GAAG9D,KAAK,CAACiM,QAAQ,CAACpI,MAAM,CAAC7B,OAAO,CAACgK,WAAW,CAAClG,GAAG,CAACxF,CAAC,CAAC,CAAC,CAAC;QAC9D,IAAIwD,KAAK,EACL,OAAO,cAAc,GAAGA,KAAK;MACrC;IACJ;IACA,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiI,uBAAuB,CAAC5H,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IACnE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAAC6B,OAAO,IAAI7B,OAAO,CAACE,QAAQ,EACnCD,MAAM,CAAC2H,WAAW,GAAG,CAAC,CAAC;IAC3B,IAAI5H,OAAO,CAACE,QAAQ,EAChBD,MAAM,CAACyH,OAAO,GAAG,IAAI;IACzB,IAAI9J,OAAO,CAAC8J,OAAO,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DmC,MAAM,CAACyH,OAAO,GAAG9L,KAAK,CAAC2L,YAAY,CAACxH,QAAQ,CAACnC,OAAO,CAAC8J,OAAO,EAAE1H,OAAO,CAAC;IAC1E,IAAI8B,KAAK;IACT,IAAIlE,OAAO,CAACgK,WAAW,IAAI,CAAC9F,KAAK,GAAG7F,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACgK,WAAW,CAAC,EAAEzL,MAAM,EAAE;MAC1E8D,MAAM,CAAC2H,WAAW,GAAG,CAAC,CAAC;MACvB,KAAK,IAAI7F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC3F,MAAM,EAAE,EAAE4F,CAAC,EACjC9B,MAAM,CAAC2H,WAAW,CAAC9F,KAAK,CAACC,CAAC,CAAC,CAAC,GAAGnG,KAAK,CAACiM,QAAQ,CAAC9H,QAAQ,CAACnC,OAAO,CAACgK,WAAW,CAAC9F,KAAK,CAACC,CAAC,CAAC,CAAC,EAAE/B,OAAO,CAAC;IACtG;IACA,OAAOC,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACI0H,uBAAuB,CAACvL,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IACzD,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAO6G,uBAAuB;AAClC,CAAC,EAAG;AAEJ/L,KAAK,CAACkM,SAAS,GAAI,YAAW;EAE1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,SAAS,CAAC/L,UAAU,EAAE;IAC3B,IAAI,CAACqK,YAAY,GAAG,EAAE;IACtB,IAAIrK,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI4L,SAAS,CAAC1L,SAAS,CAAC2L,UAAU,GAAG,EAAE;;EAEnC;AACJ;AACA;AACA;AACA;AACA;EACID,SAAS,CAAC1L,SAAS,CAAC6J,WAAW,GAAGvK,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEhF;AACJ;AACA;AACA;AACA;AACA;EACIqL,SAAS,CAAC1L,SAAS,CAAC4L,sBAAsB,GAAGtM,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAE3F;AACJ;AACA;AACA;AACA;AACA;EACIqL,SAAS,CAAC1L,SAAS,CAAC6L,uBAAuB,GAAGvM,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAE5F;AACJ;AACA;AACA;AACA;AACA;EACIqL,SAAS,CAAC1L,SAAS,CAAC8J,uBAAuB,GAAGxK,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAE5F;AACJ;AACA;AACA;AACA;AACA;EACIqL,SAAS,CAAC1L,SAAS,CAACgK,YAAY,GAAG1K,KAAK,CAACwG,UAAU;;EAEnD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI4F,SAAS,CAACpK,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IAC3C,OAAO,IAAI+L,SAAS,CAAC/L,UAAU,CAAC;EACpC,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+L,SAAS,CAACnK,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAACmK,UAAU,IAAI,IAAI,IAAI9L,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,YAAY,CAAC,EAC/EC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACmK,UAAU,CAAC;IACvE,IAAInK,OAAO,CAACqI,WAAW,IAAI,IAAI,IAAIhK,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,aAAa,CAAC,EACjFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACqI,WAAW,CAAC;IACxE,IAAIrI,OAAO,CAACoK,sBAAsB,IAAI,IAAI,IAAI/L,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,wBAAwB,CAAC,EACvGC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACoK,sBAAsB,CAAC;IACnF,IAAIpK,OAAO,CAACsI,uBAAuB,IAAI,IAAI,IAAIjK,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,yBAAyB,CAAC,EACzGC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACsI,uBAAuB,CAAC;IACpF,IAAIgC,MAAM;IACV,IAAItK,OAAO,CAACwI,YAAY,IAAI,IAAI,IAAIxI,OAAO,CAACwI,YAAY,CAACa,OAAO,EAC5DiB,MAAM,GAAGtK,OAAO,CAACwI,YAAY,CAACa,OAAO,EAAE,CAAC,KAExCiB,MAAM,GAAGtK,OAAO,CAACwI,YAAY;IACjC,IAAI8B,MAAM,IAAI,IAAI,IAAIA,MAAM,CAAC/L,MAAM,EAAE;MACjC0B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE;MAC/C,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgM,MAAM,CAAC/L,MAAM,EAAE,EAAED,CAAC,EAClC2B,MAAM,CAACqJ,MAAM,CAACgB,MAAM,CAAChM,CAAC,CAAC,CAAC;MAC5B2B,MAAM,CAACQ,MAAM,EAAE;IACnB;IACA,IAAIT,OAAO,CAACqK,uBAAuB,IAAI,IAAI,IAAIhM,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,yBAAyB,CAAC,EACzGC,MAAM,CAACM,MAAM,EAAC,wBAAwB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAACqK,uBAAuB,CAAC;IACrF,OAAOpK,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiK,SAAS,CAAC/I,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIyJ,SAAS,CAAC9I,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IAC/C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACkM,SAAS,EAAE;IAClG,OAAO7I,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACF1B,OAAO,CAACmK,UAAU,GAAG9I,MAAM,CAACV,MAAM,EAAE;UACpC;QACJ,KAAK,CAAC;UACFX,OAAO,CAACqI,WAAW,GAAGhH,MAAM,CAACR,MAAM,EAAE;UACrC;QACJ,KAAK,CAAC;UACFb,OAAO,CAACoK,sBAAsB,GAAG/I,MAAM,CAACR,MAAM,EAAE;UAChD;QACJ,KAAK,EAAE;UACHb,OAAO,CAACqK,uBAAuB,GAAGhJ,MAAM,CAACR,MAAM,EAAE;UACjD;QACJ,KAAK,CAAC;UACFb,OAAO,CAACsI,uBAAuB,GAAGjH,MAAM,CAACR,MAAM,EAAE;UACjD;QACJ,KAAK,CAAC;UACF,IAAI,EAAEb,OAAO,CAACwI,YAAY,IAAIxI,OAAO,CAACwI,YAAY,CAACjK,MAAM,CAAC,EACtDyB,OAAO,CAACwI,YAAY,GAAG,EAAE;UAC7B,IAAI,CAAC9G,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE;YACjB,IAAIgI,IAAI,GAAGrI,MAAM,CAACd,MAAM,EAAE,GAAGc,MAAM,CAACI,GAAG;YACvC,OAAOJ,MAAM,CAACI,GAAG,GAAGiI,IAAI,EACpB1J,OAAO,CAACwI,YAAY,CAAC/D,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UAClD,CAAC,MACGtJ,OAAO,CAACwI,YAAY,CAAC/D,IAAI,CAACpD,MAAM,CAACiI,MAAM,EAAE,CAAC;UAC9C;QACJ;UACIjI,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkK,SAAS,CAACtI,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IACzD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI2J,SAAS,CAACrI,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAACmK,UAAU,IAAI,IAAI,IAAInK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACpC,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACmK,UAAU,CAAC,EACnC,OAAO,6BAA6B;IAC5C,IAAInK,OAAO,CAACqI,WAAW,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqI,WAAW,CAAC,IAAI,EAAErI,OAAO,CAACqI,WAAW,IAAIvK,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqI,WAAW,CAACrG,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqI,WAAW,CAACpG,IAAI,CAAC,CAAC,EACxJ,OAAO,oCAAoC;IACnD,IAAIjC,OAAO,CAACoK,sBAAsB,IAAI,IAAI,IAAIpK,OAAO,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAC1F,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACoK,sBAAsB,CAAC,IAAI,EAAEpK,OAAO,CAACoK,sBAAsB,IAAItM,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACoK,sBAAsB,CAACpI,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACoK,sBAAsB,CAACnI,IAAI,CAAC,CAAC,EACpM,OAAO,+CAA+C;IAC9D,IAAIjC,OAAO,CAACqK,uBAAuB,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqK,uBAAuB,CAAC,IAAI,EAAErK,OAAO,CAACqK,uBAAuB,IAAIvM,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqK,uBAAuB,CAACrI,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACqK,uBAAuB,CAACpI,IAAI,CAAC,CAAC,EACxM,OAAO,gDAAgD;IAC/D,IAAIjC,OAAO,CAACsI,uBAAuB,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACsI,uBAAuB,CAAC,IAAI,EAAEtI,OAAO,CAACsI,uBAAuB,IAAIxK,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACsI,uBAAuB,CAACtG,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACsI,uBAAuB,CAACrG,IAAI,CAAC,CAAC,EACxM,OAAO,gDAAgD;IAC/D,IAAIjC,OAAO,CAACwI,YAAY,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;MACxE,IAAIoK,MAAM;MACV,IAAItK,OAAO,CAACwI,YAAY,IAAI,IAAI,IAAIxI,OAAO,CAACwI,YAAY,CAACa,OAAO,EAC5DiB,MAAM,GAAGtK,OAAO,CAACwI,YAAY,CAACa,OAAO,EAAE,CAAC,KAExCiB,MAAM,GAAGtK,OAAO,CAACwI,YAAY;MACjC,IAAI,CAAC9D,KAAK,CAACC,OAAO,CAAC2F,MAAM,CAAC,EACtB,OAAO,8BAA8B;MACzC,KAAK,IAAIhM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgM,MAAM,CAAC/L,MAAM,EAAE,EAAED,CAAC,EAClC,IAAI,CAACR,KAAK,CAACiE,SAAS,CAACuI,MAAM,CAAChM,CAAC,CAAC,CAAC,IAAI,EAAEgM,MAAM,CAAChM,CAAC,CAAC,IAAIR,KAAK,CAACiE,SAAS,CAACuI,MAAM,CAAChM,CAAC,CAAC,CAAC0D,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAACuI,MAAM,CAAChM,CAAC,CAAC,CAAC2D,IAAI,CAAC,CAAC,EAChH,OAAO,uCAAuC;IAC1D;IACA,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiI,SAAS,CAAC/H,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAClCD,MAAM,CAACmG,YAAY,GAAG,EAAE;IAC5B,IAAIpG,OAAO,CAACE,QAAQ,EAAE;MAClBD,MAAM,CAAC8H,UAAU,GAAG,EAAE;MACtB,IAAIrM,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACgG,WAAW,GAAGjG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACvH,CAAC,MACGF,MAAM,CAACgG,WAAW,GAAGjG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MAC3D,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAAC+H,sBAAsB,GAAGhI,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MAClI,CAAC,MACGF,MAAM,CAAC+H,sBAAsB,GAAGhI,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MACtE,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACnI,CAAC,MACGF,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;MACvE,IAAI3E,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACgI,uBAAuB,GAAGjI,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MACnI,CAAC,MACGF,MAAM,CAACgI,uBAAuB,GAAGjI,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;IAC3E;IACA,IAAIzC,OAAO,CAACmK,UAAU,IAAI,IAAI,IAAInK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEmC,MAAM,CAAC8H,UAAU,GAAGnK,OAAO,CAACmK,UAAU;IAC1C,IAAInK,OAAO,CAACqI,WAAW,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,OAAOF,OAAO,CAACqI,WAAW,KAAK,QAAQ,EACvChG,MAAM,CAACgG,WAAW,GAAGjG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACqI,WAAW,CAAC,GAAGrI,OAAO,CAACqI,WAAW,CAAC,KAElGhG,MAAM,CAACgG,WAAW,GAAGjG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACqI,WAAW,CAAC,GAAGjG,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACqI,WAAW,CAACrG,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACqI,WAAW,CAACpG,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACqI,WAAW;IACnQ,IAAIrI,OAAO,CAACoK,sBAAsB,IAAI,IAAI,IAAIpK,OAAO,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAC1F,IAAI,OAAOF,OAAO,CAACoK,sBAAsB,KAAK,QAAQ,EAClD/H,MAAM,CAAC+H,sBAAsB,GAAGhI,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACoK,sBAAsB,CAAC,GAAGpK,OAAO,CAACoK,sBAAsB,CAAC,KAEnI/H,MAAM,CAAC+H,sBAAsB,GAAGhI,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACoK,sBAAsB,CAAC,GAAGhI,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACoK,sBAAsB,CAACpI,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACoK,sBAAsB,CAACnI,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACoK,sBAAsB;IAC1T,IAAIpK,OAAO,CAACsI,uBAAuB,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,OAAOF,OAAO,CAACsI,uBAAuB,KAAK,QAAQ,EACnDjG,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACsI,uBAAuB,CAAC,GAAGtI,OAAO,CAACsI,uBAAuB,CAAC,KAEtIjG,MAAM,CAACiG,uBAAuB,GAAGlG,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACsI,uBAAuB,CAAC,GAAGlG,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACsI,uBAAuB,CAACtG,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACsI,uBAAuB,CAACrG,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACsI,uBAAuB;IAC/T,IAAItI,OAAO,CAACwI,YAAY,IAAIxI,OAAO,CAACwI,YAAY,CAACjK,MAAM,EAAE;MACrD8D,MAAM,CAACmG,YAAY,GAAG,EAAE;MACxB,KAAK,IAAIrE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACwI,YAAY,CAACjK,MAAM,EAAE,EAAE4F,CAAC,EAChD,IAAI,OAAOnE,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,KAAK,QAAQ,EAC3C9B,MAAM,CAACmG,YAAY,CAACrE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAAC,GAAGnE,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAAC,KAE9G9B,MAAM,CAACmG,YAAY,CAACrE,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAAC,GAAG/B,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAACnC,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC,CAAClC,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,GAAG5C,OAAO,CAACwI,YAAY,CAACrE,CAAC,CAAC;IACvR;IACA,IAAInE,OAAO,CAACqK,uBAAuB,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,yBAAyB,CAAC,EAC5F,IAAI,OAAOF,OAAO,CAACqK,uBAAuB,KAAK,QAAQ,EACnDhI,MAAM,CAACgI,uBAAuB,GAAGjI,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACqK,uBAAuB,CAAC,GAAGrK,OAAO,CAACqK,uBAAuB,CAAC,KAEtIhI,MAAM,CAACgI,uBAAuB,GAAGjI,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACqK,uBAAuB,CAAC,GAAGjI,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACqK,uBAAuB,CAACrI,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACqK,uBAAuB,CAACpI,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAACqK,uBAAuB;IAC/T,OAAOhI,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACI6H,SAAS,CAAC1L,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IAC3C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAOgH,SAAS;AACpB,CAAC,EAAG;AAEJlM,KAAK,CAACiM,QAAQ,GAAI,YAAW;EAEzB;AACJ;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,QAAQ,CAAC9L,UAAU,EAAE;IAC1B,IAAI,CAACoM,YAAY,GAAG,CAAC,CAAC;IACtB,IAAIpM,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI2L,QAAQ,CAACzL,SAAS,CAAC+L,YAAY,GAAGzM,KAAK,CAAC8F,WAAW;;EAEnD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIqG,QAAQ,CAACnK,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IAC1C,OAAO,IAAI8L,QAAQ,CAAC9L,UAAU,CAAC;EACnC,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI8L,QAAQ,CAAClK,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAACuK,YAAY,IAAI,IAAI,IAAIlM,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,cAAc,CAAC,EACnF,KAAK,IAAI5B,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACuK,YAAY,CAAC,EAAEjM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MAC5E2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAACD,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACvC,IAAI,CAACE,CAAC,CAAC,CAAC;MACjGN,KAAK,CAACkM,SAAS,CAACnK,MAAM,CAACC,OAAO,CAACuK,YAAY,CAACnM,IAAI,CAACE,CAAC,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE,CAACA,MAAM,EAAE;IAC5H;IACJ,OAAOR,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIgK,QAAQ,CAAC9I,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIwJ,QAAQ,CAAC7I,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IAC9C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACiM,QAAQ,EAAE;MAAEnG,GAAG;IACtG,OAAOzC,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACFL,MAAM,CAAC0C,IAAI,EAAE,CAACtC,GAAG,EAAE;UACnB,IAAIzB,OAAO,CAACuK,YAAY,KAAKzM,KAAK,CAAC8F,WAAW,EAC1C5D,OAAO,CAACuK,YAAY,GAAG,CAAC,CAAC;UAC7BzG,GAAG,GAAGzC,MAAM,CAACV,MAAM,EAAE;UACrBU,MAAM,CAACI,GAAG,EAAE;UACZzB,OAAO,CAACuK,YAAY,CAACzG,GAAG,CAAC,GAAG9F,KAAK,CAACkM,SAAS,CAAC9I,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UAC3E;QACJ;UACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiK,QAAQ,CAACrI,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IACxD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI0J,QAAQ,CAACpI,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAACuK,YAAY,IAAI,IAAI,IAAIvK,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;MACxE,IAAI,CAACpC,KAAK,CAACkG,QAAQ,CAAChE,OAAO,CAACuK,YAAY,CAAC,EACrC,OAAO,+BAA+B;MAC1C,IAAIzG,GAAG,GAAGzF,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACuK,YAAY,CAAC;MAC3C,KAAK,IAAIjM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,GAAG,CAACvF,MAAM,EAAE,EAAED,CAAC,EAAE;QACjC,IAAIwD,KAAK,GAAG9D,KAAK,CAACkM,SAAS,CAACrI,MAAM,CAAC7B,OAAO,CAACuK,YAAY,CAACzG,GAAG,CAACxF,CAAC,CAAC,CAAC,CAAC;QAChE,IAAIwD,KAAK,EACL,OAAO,eAAe,GAAGA,KAAK;MACtC;IACJ;IACA,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACImI,QAAQ,CAAC9H,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAAC6B,OAAO,IAAI7B,OAAO,CAACE,QAAQ,EACnCD,MAAM,CAACkI,YAAY,GAAG,CAAC,CAAC;IAC5B,IAAIrG,KAAK;IACT,IAAIlE,OAAO,CAACuK,YAAY,IAAI,CAACrG,KAAK,GAAG7F,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACuK,YAAY,CAAC,EAAEhM,MAAM,EAAE;MAC5E8D,MAAM,CAACkI,YAAY,GAAG,CAAC,CAAC;MACxB,KAAK,IAAIpG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC3F,MAAM,EAAE,EAAE4F,CAAC,EACjC9B,MAAM,CAACkI,YAAY,CAACrG,KAAK,CAACC,CAAC,CAAC,CAAC,GAAGnG,KAAK,CAACkM,SAAS,CAAC/H,QAAQ,CAACnC,OAAO,CAACuK,YAAY,CAACrG,KAAK,CAACC,CAAC,CAAC,CAAC,EAAE/B,OAAO,CAAC;IACzG;IACA,OAAOC,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACI4H,QAAQ,CAACzL,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IAC1C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAO+G,QAAQ;AACnB,CAAC,EAAG;AAEJjM,KAAK,CAACwM,uBAAuB,GAAI,YAAW;EAExC;AACJ;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,uBAAuB,CAACrM,UAAU,EAAE;IACzC,IAAI,CAACsM,UAAU,GAAG,EAAE;IACpB,IAAItM,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIkM,uBAAuB,CAAChM,SAAS,CAACiM,UAAU,GAAG3M,KAAK,CAACwG,UAAU;;EAE/D;AACJ;AACA;AACA;AACA;AACA;EACIkG,uBAAuB,CAAChM,SAAS,CAACkM,WAAW,GAAG,KAAK;;EAErD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,uBAAuB,CAAC1K,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IACzD,OAAO,IAAIqM,uBAAuB,CAACrM,UAAU,CAAC;EAClD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqM,uBAAuB,CAACzK,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC9D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAACyK,UAAU,IAAI,IAAI,IAAIzK,OAAO,CAACyK,UAAU,CAAClM,MAAM,EACvD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACyK,UAAU,CAAClM,MAAM,EAAE,EAAED,CAAC,EAC9C2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACX,OAAO,CAACyK,UAAU,CAACnM,CAAC,CAAC,CAAC;IAC9E,IAAI0B,OAAO,CAAC0K,WAAW,IAAI,IAAI,IAAIrM,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,aAAa,CAAC,EACjFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACS,IAAI,CAAChB,OAAO,CAAC0K,WAAW,CAAC;IACtE,OAAOzK,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIuK,uBAAuB,CAACrJ,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IAChF,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+J,uBAAuB,CAACpJ,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IAC7D,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACwM,uBAAuB,EAAE;IAChH,OAAOnJ,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACF,IAAI,EAAE1B,OAAO,CAACyK,UAAU,IAAIzK,OAAO,CAACyK,UAAU,CAAClM,MAAM,CAAC,EAClDyB,OAAO,CAACyK,UAAU,GAAG,EAAE;UAC3BzK,OAAO,CAACyK,UAAU,CAAChG,IAAI,CAACpD,MAAM,CAACV,MAAM,EAAE,CAAC;UACxC;QACJ,KAAK,CAAC;UACFX,OAAO,CAAC0K,WAAW,GAAGrJ,MAAM,CAACL,IAAI,EAAE;UACnC;QACJ;UACIK,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIwK,uBAAuB,CAAC5I,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IACvE,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIiK,uBAAuB,CAAC3I,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IACtD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAACyK,UAAU,IAAI,IAAI,IAAIzK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;MACpE,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAACyK,UAAU,CAAC,EAClC,OAAO,4BAA4B;MACvC,KAAK,IAAInM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACyK,UAAU,CAAClM,MAAM,EAAE,EAAED,CAAC,EAC9C,IAAI,CAACR,KAAK,CAACoE,QAAQ,CAAClC,OAAO,CAACyK,UAAU,CAACnM,CAAC,CAAC,CAAC,EACtC,OAAO,+BAA+B;IAClD;IACA,IAAI0B,OAAO,CAAC0K,WAAW,IAAI,IAAI,IAAI1K,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,OAAOF,OAAO,CAAC0K,WAAW,KAAK,SAAS,EACxC,OAAO,+BAA+B;IAC9C,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,uBAAuB,CAACrI,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IACnE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAClCD,MAAM,CAACoI,UAAU,GAAG,EAAE;IAC1B,IAAIrI,OAAO,CAACE,QAAQ,EAChBD,MAAM,CAACqI,WAAW,GAAG,KAAK;IAC9B,IAAI1K,OAAO,CAACyK,UAAU,IAAIzK,OAAO,CAACyK,UAAU,CAAClM,MAAM,EAAE;MACjD8D,MAAM,CAACoI,UAAU,GAAG,EAAE;MACtB,KAAK,IAAItG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACyK,UAAU,CAAClM,MAAM,EAAE,EAAE4F,CAAC,EAC9C9B,MAAM,CAACoI,UAAU,CAACtG,CAAC,CAAC,GAAGnE,OAAO,CAACyK,UAAU,CAACtG,CAAC,CAAC;IACpD;IACA,IAAInE,OAAO,CAAC0K,WAAW,IAAI,IAAI,IAAI1K,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEmC,MAAM,CAACqI,WAAW,GAAG1K,OAAO,CAAC0K,WAAW;IAC5C,OAAOrI,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACImI,uBAAuB,CAAChM,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IACzD,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAOsH,uBAAuB;AAClC,CAAC,EAAG;AAEJxM,KAAK,CAAC2M,MAAM,GAAI,YAAW;EAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,MAAM,CAACxM,UAAU,EAAE;IACxB,IAAI,CAACyM,cAAc,GAAG,CAAC,CAAC;IACxB,IAAIzM,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIqM,MAAM,CAACnM,SAAS,CAACqM,MAAM,GAAG,IAAI;;EAE9B;AACJ;AACA;AACA;AACA;AACA;EACIF,MAAM,CAACnM,SAAS,CAACoM,cAAc,GAAG9M,KAAK,CAAC8F,WAAW;;EAEnD;AACJ;AACA;AACA;AACA;AACA;EACI+G,MAAM,CAACnM,SAAS,CAACE,OAAO,GAAG,IAAI;;EAE/B;AACJ;AACA;AACA;AACA;AACA;EACIiM,MAAM,CAACnM,SAAS,CAACsM,cAAc,GAAGhN,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEhF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI8L,MAAM,CAAC7K,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IACxC,OAAO,IAAIwM,MAAM,CAACxM,UAAU,CAAC;EACjC,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIwM,MAAM,CAAC5K,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC7C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAAC6K,MAAM,IAAI,IAAI,IAAIxM,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,QAAQ,CAAC,EACvEhC,KAAK,CAAC2J,YAAY,CAAC5H,MAAM,CAACC,OAAO,CAAC6K,MAAM,EAAE5K,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACvG,IAAIT,OAAO,CAACtB,OAAO,IAAI,IAAI,IAAIL,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEhC,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACP,MAAM,CAACC,OAAO,CAACtB,OAAO,EAAEuB,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACrH,IAAIT,OAAO,CAAC4K,cAAc,IAAI,IAAI,IAAIvM,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,gBAAgB,CAAC,EACvF,KAAK,IAAI5B,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC4K,cAAc,CAAC,EAAEtM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MAC9E2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAACD,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACvC,IAAI,CAACE,CAAC,CAAC,CAAC;MACjGN,KAAK,CAAC+M,cAAc,CAAChL,MAAM,CAACC,OAAO,CAAC4K,cAAc,CAACxM,IAAI,CAACE,CAAC,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE,CAACA,MAAM,EAAE;IACnI;IACJ,IAAIT,OAAO,CAAC8K,cAAc,IAAI,IAAI,IAAIzM,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,gBAAgB,CAAC,EACvFC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACM,MAAM,CAACb,OAAO,CAAC8K,cAAc,CAAC;IAC3E,OAAO7K,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI0K,MAAM,CAACxJ,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IAC/D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkK,MAAM,CAACvJ,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IAC5C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAAC2M,MAAM,EAAE;MAAE7G,GAAG;IACpG,OAAOzC,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACF1B,OAAO,CAAC6K,MAAM,GAAG7M,KAAK,CAAC2J,YAAY,CAACvG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACnE;QACJ,KAAK,CAAC;UACFc,MAAM,CAAC0C,IAAI,EAAE,CAACtC,GAAG,EAAE;UACnB,IAAIzB,OAAO,CAAC4K,cAAc,KAAK9M,KAAK,CAAC8F,WAAW,EAC5C5D,OAAO,CAAC4K,cAAc,GAAG,CAAC,CAAC;UAC/B9G,GAAG,GAAGzC,MAAM,CAACV,MAAM,EAAE;UACrBU,MAAM,CAACI,GAAG,EAAE;UACZzB,OAAO,CAAC4K,cAAc,CAAC9G,GAAG,CAAC,GAAG9F,KAAK,CAAC+M,cAAc,CAAC3J,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UAClF;QACJ,KAAK,CAAC;UACFP,OAAO,CAACtB,OAAO,GAAGV,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACc,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACjF;QACJ,KAAK,CAAC;UACFP,OAAO,CAAC8K,cAAc,GAAGzJ,MAAM,CAACR,MAAM,EAAE;UACxC;QACJ;UACIQ,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2K,MAAM,CAAC/I,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IACtD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIoK,MAAM,CAAC9I,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IACrC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAAC6K,MAAM,IAAI,IAAI,IAAI7K,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAAE;MAC5D,IAAI4B,KAAK,GAAG9D,KAAK,CAAC2J,YAAY,CAAC9F,MAAM,CAAC7B,OAAO,CAAC6K,MAAM,CAAC;MACrD,IAAI/I,KAAK,EACL,OAAO,SAAS,GAAGA,KAAK;IAChC;IACA,IAAI9B,OAAO,CAAC4K,cAAc,IAAI,IAAI,IAAI5K,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;MAC5E,IAAI,CAACpC,KAAK,CAACkG,QAAQ,CAAChE,OAAO,CAAC4K,cAAc,CAAC,EACvC,OAAO,iCAAiC;MAC5C,IAAI9G,GAAG,GAAGzF,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC4K,cAAc,CAAC;MAC7C,KAAK,IAAItM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,GAAG,CAACvF,MAAM,EAAE,EAAED,CAAC,EAAE;QACjC,IAAIwD,KAAK,GAAG9D,KAAK,CAAC+M,cAAc,CAAClJ,MAAM,CAAC7B,OAAO,CAAC4K,cAAc,CAAC9G,GAAG,CAACxF,CAAC,CAAC,CAAC,CAAC;QACvE,IAAIwD,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;MACxC;IACJ;IACA,IAAI9B,OAAO,CAACtB,OAAO,IAAI,IAAI,IAAIsB,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;MAC9D,IAAI4B,KAAK,GAAG9D,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACuB,MAAM,CAAC7B,OAAO,CAACtB,OAAO,CAAC;MACnE,IAAIoD,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;IACjC;IACA,IAAI9B,OAAO,CAAC8K,cAAc,IAAI,IAAI,IAAI9K,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC8K,cAAc,CAAC,IAAI,EAAE9K,OAAO,CAAC8K,cAAc,IAAIhN,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC8K,cAAc,CAAC9I,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAAC8K,cAAc,CAAC7I,IAAI,CAAC,CAAC,EACpK,OAAO,uCAAuC;IACtD,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI0I,MAAM,CAACxI,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IAClD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAAC6B,OAAO,IAAI7B,OAAO,CAACE,QAAQ,EACnCD,MAAM,CAACuI,cAAc,GAAG,CAAC,CAAC;IAC9B,IAAIxI,OAAO,CAACE,QAAQ,EAAE;MAClBD,MAAM,CAACwI,MAAM,GAAG,IAAI;MACpBxI,MAAM,CAAC3D,OAAO,GAAG,IAAI;MACrB,IAAIZ,KAAK,CAACc,IAAI,EAAE;QACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QACrCyD,MAAM,CAACyI,cAAc,GAAG1I,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;MAC1H,CAAC,MACGF,MAAM,CAACyI,cAAc,GAAG1I,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;IAClE;IACA,IAAIzC,OAAO,CAAC6K,MAAM,IAAI,IAAI,IAAI7K,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DmC,MAAM,CAACwI,MAAM,GAAG7M,KAAK,CAAC2J,YAAY,CAACxF,QAAQ,CAACnC,OAAO,CAAC6K,MAAM,EAAEzI,OAAO,CAAC;IACxE,IAAIpC,OAAO,CAACtB,OAAO,IAAI,IAAI,IAAIsB,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DmC,MAAM,CAAC3D,OAAO,GAAGV,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC6B,QAAQ,CAACnC,OAAO,CAACtB,OAAO,EAAE0D,OAAO,CAAC;IACvF,IAAI8B,KAAK;IACT,IAAIlE,OAAO,CAAC4K,cAAc,IAAI,CAAC1G,KAAK,GAAG7F,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAAC4K,cAAc,CAAC,EAAErM,MAAM,EAAE;MAChF8D,MAAM,CAACuI,cAAc,GAAG,CAAC,CAAC;MAC1B,KAAK,IAAIzG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC3F,MAAM,EAAE,EAAE4F,CAAC,EACjC9B,MAAM,CAACuI,cAAc,CAAC1G,KAAK,CAACC,CAAC,CAAC,CAAC,GAAGnG,KAAK,CAAC+M,cAAc,CAAC5I,QAAQ,CAACnC,OAAO,CAAC4K,cAAc,CAAC1G,KAAK,CAACC,CAAC,CAAC,CAAC,EAAE/B,OAAO,CAAC;IAClH;IACA,IAAIpC,OAAO,CAAC8K,cAAc,IAAI,IAAI,IAAI9K,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,OAAOF,OAAO,CAAC8K,cAAc,KAAK,QAAQ,EAC1CzI,MAAM,CAACyI,cAAc,GAAG1I,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAAC8K,cAAc,CAAC,GAAG9K,OAAO,CAAC8K,cAAc,CAAC,KAE3GzI,MAAM,CAACyI,cAAc,GAAG1I,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAAC8K,cAAc,CAAC,GAAG1I,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAAC8K,cAAc,CAAC9I,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAAC8K,cAAc,CAAC7I,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,IAAI,CAAC,GAAG5C,OAAO,CAAC8K,cAAc;IAClR,OAAOzI,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIsI,MAAM,CAACnM,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IACxC,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAOyH,MAAM;AACjB,CAAC,EAAG;AAEJ3M,KAAK,CAACgN,mBAAmB,GAAI,YAAW;EAEpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,mBAAmB,CAAC7M,UAAU,EAAE;IACrC,IAAI,CAAC6L,WAAW,GAAG,CAAC,CAAC;IACrB,IAAI7L,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI0M,mBAAmB,CAACxM,SAAS,CAACsL,OAAO,GAAG,IAAI;;EAE5C;AACJ;AACA;AACA;AACA;AACA;EACIkB,mBAAmB,CAACxM,SAAS,CAACqL,iBAAiB,GAAG,IAAI;;EAEtD;AACJ;AACA;AACA;AACA;AACA;EACImB,mBAAmB,CAACxM,SAAS,CAACwL,WAAW,GAAGlM,KAAK,CAAC8F,WAAW;;EAE7D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIoH,mBAAmB,CAAClL,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IACrD,OAAO,IAAI6M,mBAAmB,CAAC7M,UAAU,CAAC;EAC9C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6M,mBAAmB,CAACjL,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC1D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAAC8J,OAAO,IAAI,IAAI,IAAIzL,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEhC,KAAK,CAAC2L,YAAY,CAAC5J,MAAM,CAACC,OAAO,CAAC8J,OAAO,EAAE7J,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACxG,IAAIT,OAAO,CAAC6J,iBAAiB,IAAI,IAAI,IAAIxL,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,mBAAmB,CAAC,EAC7FhC,KAAK,CAACuK,iBAAiB,CAACxI,MAAM,CAACC,OAAO,CAAC6J,iBAAiB,EAAE5J,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACvH,IAAIT,OAAO,CAACgK,WAAW,IAAI,IAAI,IAAI3L,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,aAAa,CAAC,EACjF,KAAK,IAAI5B,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACgK,WAAW,CAAC,EAAE1L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MAC3E2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAACD,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACvC,IAAI,CAACE,CAAC,CAAC,CAAC;MACjGN,KAAK,CAACiM,QAAQ,CAAClK,MAAM,CAACC,OAAO,CAACgK,WAAW,CAAC5L,IAAI,CAACE,CAAC,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE,CAACA,MAAM,EAAE;IAC1H;IACJ,OAAOR,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+K,mBAAmB,CAAC7J,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IAC5E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIuK,mBAAmB,CAAC5J,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IACzD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACgN,mBAAmB,EAAE;MAAElH,GAAG;IACjH,OAAOzC,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACF1B,OAAO,CAAC8J,OAAO,GAAG9L,KAAK,CAAC2L,YAAY,CAACvI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACpE;QACJ,KAAK,CAAC;UACFP,OAAO,CAAC6J,iBAAiB,GAAG7L,KAAK,CAACuK,iBAAiB,CAACnH,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACnF;QACJ,KAAK,CAAC;UACFc,MAAM,CAAC0C,IAAI,EAAE,CAACtC,GAAG,EAAE;UACnB,IAAIzB,OAAO,CAACgK,WAAW,KAAKlM,KAAK,CAAC8F,WAAW,EACzC5D,OAAO,CAACgK,WAAW,GAAG,CAAC,CAAC;UAC5BlG,GAAG,GAAGzC,MAAM,CAACV,MAAM,EAAE;UACrBU,MAAM,CAACI,GAAG,EAAE;UACZzB,OAAO,CAACgK,WAAW,CAAClG,GAAG,CAAC,GAAG9F,KAAK,CAACiM,QAAQ,CAAC7I,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACzE;QACJ;UACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIgL,mBAAmB,CAACpJ,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IACnE,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIyK,mBAAmB,CAACnJ,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IAClD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAAC8J,OAAO,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;MAC9D,IAAI4B,KAAK,GAAG9D,KAAK,CAAC2L,YAAY,CAAC9H,MAAM,CAAC7B,OAAO,CAAC8J,OAAO,CAAC;MACtD,IAAIhI,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;IACjC;IACA,IAAI9B,OAAO,CAAC6J,iBAAiB,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAAE;MAClF,IAAI4B,KAAK,GAAG9D,KAAK,CAACuK,iBAAiB,CAAC1G,MAAM,CAAC7B,OAAO,CAAC6J,iBAAiB,CAAC;MACrE,IAAI/H,KAAK,EACL,OAAO,oBAAoB,GAAGA,KAAK;IAC3C;IACA,IAAI9B,OAAO,CAACgK,WAAW,IAAI,IAAI,IAAIhK,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EAAE;MACtE,IAAI,CAACpC,KAAK,CAACkG,QAAQ,CAAChE,OAAO,CAACgK,WAAW,CAAC,EACpC,OAAO,8BAA8B;MACzC,IAAIlG,GAAG,GAAGzF,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACgK,WAAW,CAAC;MAC1C,KAAK,IAAI1L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,GAAG,CAACvF,MAAM,EAAE,EAAED,CAAC,EAAE;QACjC,IAAIwD,KAAK,GAAG9D,KAAK,CAACiM,QAAQ,CAACpI,MAAM,CAAC7B,OAAO,CAACgK,WAAW,CAAClG,GAAG,CAACxF,CAAC,CAAC,CAAC,CAAC;QAC9D,IAAIwD,KAAK,EACL,OAAO,cAAc,GAAGA,KAAK;MACrC;IACJ;IACA,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkJ,mBAAmB,CAAC7I,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IAC/D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAAC6B,OAAO,IAAI7B,OAAO,CAACE,QAAQ,EACnCD,MAAM,CAAC2H,WAAW,GAAG,CAAC,CAAC;IAC3B,IAAI5H,OAAO,CAACE,QAAQ,EAAE;MAClBD,MAAM,CAACyH,OAAO,GAAG,IAAI;MACrBzH,MAAM,CAACwH,iBAAiB,GAAG,IAAI;IACnC;IACA,IAAI7J,OAAO,CAAC8J,OAAO,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DmC,MAAM,CAACyH,OAAO,GAAG9L,KAAK,CAAC2L,YAAY,CAACxH,QAAQ,CAACnC,OAAO,CAAC8J,OAAO,EAAE1H,OAAO,CAAC;IAC1E,IAAIpC,OAAO,CAAC6J,iBAAiB,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFmC,MAAM,CAACwH,iBAAiB,GAAG7L,KAAK,CAACuK,iBAAiB,CAACpG,QAAQ,CAACnC,OAAO,CAAC6J,iBAAiB,EAAEzH,OAAO,CAAC;IACnG,IAAI8B,KAAK;IACT,IAAIlE,OAAO,CAACgK,WAAW,IAAI,CAAC9F,KAAK,GAAG7F,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACgK,WAAW,CAAC,EAAEzL,MAAM,EAAE;MAC1E8D,MAAM,CAAC2H,WAAW,GAAG,CAAC,CAAC;MACvB,KAAK,IAAI7F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC3F,MAAM,EAAE,EAAE4F,CAAC,EACjC9B,MAAM,CAAC2H,WAAW,CAAC9F,KAAK,CAACC,CAAC,CAAC,CAAC,GAAGnG,KAAK,CAACiM,QAAQ,CAAC9H,QAAQ,CAACnC,OAAO,CAACgK,WAAW,CAAC9F,KAAK,CAACC,CAAC,CAAC,CAAC,EAAE/B,OAAO,CAAC;IACtG;IACA,OAAOC,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACI2I,mBAAmB,CAACxM,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IACrD,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAO8H,mBAAmB;AAC9B,CAAC,EAAG;AAEJhN,KAAK,CAAC+M,cAAc,GAAI,YAAW;EAE/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,cAAc,CAAC5M,UAAU,EAAE;IAChC,IAAI,CAACiJ,KAAK,GAAG,EAAE;IACf,IAAI,CAAC6D,gBAAgB,GAAG,EAAE;IAC1B,IAAI,CAACC,sBAAsB,GAAG,CAAC,CAAC;IAChC,IAAI,CAACC,iCAAiC,GAAG,EAAE;IAC3C,IAAIhN,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIyM,cAAc,CAACvM,SAAS,CAAC4I,KAAK,GAAGtJ,KAAK,CAACwG,UAAU;;EAEjD;AACJ;AACA;AACA;AACA;AACA;EACIyG,cAAc,CAACvM,SAAS,CAACyM,gBAAgB,GAAGnN,KAAK,CAACwG,UAAU;;EAE5D;AACJ;AACA;AACA;AACA;AACA;EACIyG,cAAc,CAACvM,SAAS,CAAC0M,sBAAsB,GAAGpN,KAAK,CAAC8F,WAAW;;EAEnE;AACJ;AACA;AACA;AACA;AACA;EACImH,cAAc,CAACvM,SAAS,CAAC2M,iCAAiC,GAAGrN,KAAK,CAACwG,UAAU;;EAE7E;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIyG,cAAc,CAACjL,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;IAChD,OAAO,IAAI4M,cAAc,CAAC5M,UAAU,CAAC;EACzC,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4M,cAAc,CAAChL,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;IACrD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;IAC7B,IAAIE,OAAO,CAACoH,KAAK,IAAI,IAAI,IAAIpH,OAAO,CAACoH,KAAK,CAAC7I,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACoH,KAAK,CAAC7I,MAAM,EAAE,EAAED,CAAC,EACzC,IAAI0B,OAAO,CAACoH,KAAK,CAAC9I,CAAC,CAAC,YAAY8M,UAAU,EAAE;MACxCnL,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC;MACxCN,MAAM,CAACoL,KAAK,CAACrL,OAAO,CAACoH,KAAK,CAAC9I,CAAC,CAAC,CAAC;IAClC,CAAC,MACGN,KAAK,CAACE,KAAK,CAAC6B,MAAM,CAACC,OAAO,CAACoH,KAAK,CAAC9I,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IAC1G,IAAI6K,MAAM;IACV,IAAItL,OAAO,CAACiL,gBAAgB,IAAI,IAAI,IAAIjL,OAAO,CAACiL,gBAAgB,CAAC5B,OAAO,EACpEiC,MAAM,GAAGtL,OAAO,CAACiL,gBAAgB,CAAC5B,OAAO,EAAE,CAAC,KAE5CiC,MAAM,GAAGtL,OAAO,CAACiL,gBAAgB;IACrC,IAAIK,MAAM,IAAI,IAAI,IAAIA,MAAM,CAAC/M,MAAM,EAC/B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgN,MAAM,CAAC/M,MAAM,EAAE,EAAED,CAAC,EAClCN,KAAK,CAACgN,mBAAmB,CAACjL,MAAM,CAACuL,MAAM,CAAChN,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IAC7G,IAAIT,OAAO,CAACmL,iCAAiC,IAAI,IAAI,IAAInL,OAAO,CAACmL,iCAAiC,CAAC5M,MAAM,EACrG,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACmL,iCAAiC,CAAC5M,MAAM,EAAE,EAAED,CAAC,EACrE,IAAI0B,OAAO,CAACmL,iCAAiC,CAAC7M,CAAC,CAAC,YAAY8M,UAAU,EAAE;MACpEnL,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC;MACxCN,MAAM,CAACoL,KAAK,CAACrL,OAAO,CAACmL,iCAAiC,CAAC7M,CAAC,CAAC,CAAC;IAC9D,CAAC,MACGN,KAAK,CAACE,KAAK,CAAC6B,MAAM,CAACC,OAAO,CAACmL,iCAAiC,CAAC7M,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;IACtI,IAAIT,OAAO,CAACkL,sBAAsB,IAAI,IAAI,IAAI7M,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,wBAAwB,CAAC,EACvG,KAAK,IAAI5B,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACkL,sBAAsB,CAAC,EAAE5M,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MACtF2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAACD,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACI,MAAM,CAACvC,IAAI,CAACE,CAAC,CAAC,CAAC;MACjGN,KAAK,CAACwM,uBAAuB,CAACzK,MAAM,CAACC,OAAO,CAACkL,sBAAsB,CAAC9M,IAAI,CAACE,CAAC,CAAC,CAAC,EAAE2B,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE,CAACA,MAAM,EAAE;IACpJ;IACJ,OAAOR,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI8K,cAAc,CAAC5J,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;IACvE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;EAChD,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIsK,cAAc,CAAC3J,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;IACpD,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;IACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;MAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAAC+M,cAAc,EAAE;MAAEjH,GAAG;IAC5G,OAAOzC,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;MACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;MACzB,QAAQmB,GAAG,KAAK,CAAC;QACjB,KAAK,CAAC;UACF,IAAI,EAAE1B,OAAO,CAACoH,KAAK,IAAIpH,OAAO,CAACoH,KAAK,CAAC7I,MAAM,CAAC,EACxCyB,OAAO,CAACoH,KAAK,GAAG,EAAE;UACtBpH,OAAO,CAACoH,KAAK,CAAC3C,IAAI,CAACzG,KAAK,CAACE,KAAK,CAACkD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC,CAAC;UAC/D;QACJ,KAAK,CAAC;UACF,IAAI,EAAEP,OAAO,CAACiL,gBAAgB,IAAIjL,OAAO,CAACiL,gBAAgB,CAAC1M,MAAM,CAAC,EAC9DyB,OAAO,CAACiL,gBAAgB,GAAG,EAAE;UACjCjL,OAAO,CAACiL,gBAAgB,CAACxG,IAAI,CAACzG,KAAK,CAACgN,mBAAmB,CAAC5J,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC,CAAC;UACxF;QACJ,KAAK,CAAC;UACFc,MAAM,CAAC0C,IAAI,EAAE,CAACtC,GAAG,EAAE;UACnB,IAAIzB,OAAO,CAACkL,sBAAsB,KAAKpN,KAAK,CAAC8F,WAAW,EACpD5D,OAAO,CAACkL,sBAAsB,GAAG,CAAC,CAAC;UACvCpH,GAAG,GAAGzC,MAAM,CAACV,MAAM,EAAE;UACrBU,MAAM,CAACI,GAAG,EAAE;UACZzB,OAAO,CAACkL,sBAAsB,CAACpH,GAAG,CAAC,GAAG9F,KAAK,CAACwM,uBAAuB,CAACpJ,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;UACnG;QACJ,KAAK,CAAC;UACF,IAAI,EAAEP,OAAO,CAACmL,iCAAiC,IAAInL,OAAO,CAACmL,iCAAiC,CAAC5M,MAAM,CAAC,EAChGyB,OAAO,CAACmL,iCAAiC,GAAG,EAAE;UAClDnL,OAAO,CAACmL,iCAAiC,CAAC1G,IAAI,CAACzG,KAAK,CAACE,KAAK,CAACkD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC,CAAC;UAC3F;QACJ;UACIc,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;UACxB;MAAM;IAEd;IACA,OAAO1B,OAAO;EAClB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+K,cAAc,CAACnJ,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;IAC9D,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;IAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;EAC/C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIwK,cAAc,CAAClJ,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;IAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;IAC5B,IAAIA,OAAO,CAACoH,KAAK,IAAI,IAAI,IAAIpH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;MAC1D,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAACoH,KAAK,CAAC,EAC7B,OAAO,uBAAuB;MAClC,KAAK,IAAI9I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACoH,KAAK,CAAC7I,MAAM,EAAE,EAAED,CAAC,EACzC,IAAI,EAAE0B,OAAO,CAACoH,KAAK,CAAC9I,CAAC,CAAC,YAAY8M,UAAU,CAAC,EAAE;QAC3C,IAAItJ,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC2D,MAAM,CAAC7B,OAAO,CAACoH,KAAK,CAAC9I,CAAC,CAAC,CAAC;QAChD,IAAIwD,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;MAC/B;IACR;IACA,IAAI9B,OAAO,CAACiL,gBAAgB,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAAE;MAChF,IAAIoL,MAAM;MACV,IAAItL,OAAO,CAACiL,gBAAgB,IAAI,IAAI,IAAIjL,OAAO,CAACiL,gBAAgB,CAAC5B,OAAO,EACpEiC,MAAM,GAAGtL,OAAO,CAACiL,gBAAgB,CAAC5B,OAAO,EAAE,CAAC,KAE5CiC,MAAM,GAAGtL,OAAO,CAACiL,gBAAgB;MACrC,IAAI,CAACvG,KAAK,CAACC,OAAO,CAAC2G,MAAM,CAAC,EACtB,OAAO,kCAAkC;MAC7C,KAAK,IAAIhN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgN,MAAM,CAAC/M,MAAM,EAAE,EAAED,CAAC,EAAE;QACpC,IAAIwD,KAAK,GAAG9D,KAAK,CAACgN,mBAAmB,CAACnJ,MAAM,CAACyJ,MAAM,CAAChN,CAAC,CAAC,CAAC;QACvD,IAAIwD,KAAK,EACL,OAAO,mBAAmB,GAAGA,KAAK;MAC1C;IACJ;IACA,IAAI9B,OAAO,CAACkL,sBAAsB,IAAI,IAAI,IAAIlL,OAAO,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAAE;MAC5F,IAAI,CAACpC,KAAK,CAACkG,QAAQ,CAAChE,OAAO,CAACkL,sBAAsB,CAAC,EAC/C,OAAO,yCAAyC;MACpD,IAAIpH,GAAG,GAAGzF,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACkL,sBAAsB,CAAC;MACrD,KAAK,IAAI5M,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,GAAG,CAACvF,MAAM,EAAE,EAAED,CAAC,EAAE;QACjC,IAAIwD,KAAK,GAAG9D,KAAK,CAACwM,uBAAuB,CAAC3I,MAAM,CAAC7B,OAAO,CAACkL,sBAAsB,CAACpH,GAAG,CAACxF,CAAC,CAAC,CAAC,CAAC;QACxF,IAAIwD,KAAK,EACL,OAAO,yBAAyB,GAAGA,KAAK;MAChD;IACJ;IACA,IAAI9B,OAAO,CAACmL,iCAAiC,IAAI,IAAI,IAAInL,OAAO,CAACE,cAAc,CAAC,mCAAmC,CAAC,EAAE;MAClH,IAAI,CAACwE,KAAK,CAACC,OAAO,CAAC3E,OAAO,CAACmL,iCAAiC,CAAC,EACzD,OAAO,mDAAmD;MAC9D,KAAK,IAAI7M,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,OAAO,CAACmL,iCAAiC,CAAC5M,MAAM,EAAE,EAAED,CAAC,EACrE,IAAI,EAAE0B,OAAO,CAACmL,iCAAiC,CAAC7M,CAAC,CAAC,YAAY8M,UAAU,CAAC,EAAE;QACvE,IAAItJ,KAAK,GAAG9D,KAAK,CAACE,KAAK,CAAC2D,MAAM,CAAC7B,OAAO,CAACmL,iCAAiC,CAAC7M,CAAC,CAAC,CAAC;QAC5E,IAAIwD,KAAK,EACL,OAAO,oCAAoC,GAAGA,KAAK;MAC3D;IACR;IACA,OAAO,IAAI;EACf,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiJ,cAAc,CAAC5I,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;IAC1D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,IAAID,OAAO,CAACwC,MAAM,IAAIxC,OAAO,CAACE,QAAQ,EAAE;MACpCD,MAAM,CAAC+E,KAAK,GAAG,EAAE;MACjB/E,MAAM,CAAC4I,gBAAgB,GAAG,EAAE;MAC5B5I,MAAM,CAAC8I,iCAAiC,GAAG,EAAE;IACjD;IACA,IAAI/I,OAAO,CAAC6B,OAAO,IAAI7B,OAAO,CAACE,QAAQ,EACnCD,MAAM,CAAC6I,sBAAsB,GAAG,CAAC,CAAC;IACtC,IAAIlL,OAAO,CAACoH,KAAK,IAAIpH,OAAO,CAACoH,KAAK,CAAC7I,MAAM,EAAE;MACvC8D,MAAM,CAAC+E,KAAK,GAAG,EAAE;MACjB,KAAK,IAAIjD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACoH,KAAK,CAAC7I,MAAM,EAAE,EAAE4F,CAAC,EACzC9B,MAAM,CAAC+E,KAAK,CAACjD,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAACiE,QAAQ,CAACnC,OAAO,CAACoH,KAAK,CAACjD,CAAC,CAAC,EAAE/B,OAAO,CAAC;IACzE;IACA,IAAIpC,OAAO,CAACiL,gBAAgB,IAAIjL,OAAO,CAACiL,gBAAgB,CAAC1M,MAAM,EAAE;MAC7D8D,MAAM,CAAC4I,gBAAgB,GAAG,EAAE;MAC5B,KAAK,IAAI9G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACiL,gBAAgB,CAAC1M,MAAM,EAAE,EAAE4F,CAAC,EACpD9B,MAAM,CAAC4I,gBAAgB,CAAC9G,CAAC,CAAC,GAAGnG,KAAK,CAACgN,mBAAmB,CAAC7I,QAAQ,CAACnC,OAAO,CAACiL,gBAAgB,CAAC9G,CAAC,CAAC,EAAE/B,OAAO,CAAC;IAC7G;IACA,IAAIpC,OAAO,CAACmL,iCAAiC,IAAInL,OAAO,CAACmL,iCAAiC,CAAC5M,MAAM,EAAE;MAC/F8D,MAAM,CAAC8I,iCAAiC,GAAG,EAAE;MAC7C,KAAK,IAAIhH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,OAAO,CAACmL,iCAAiC,CAAC5M,MAAM,EAAE,EAAE4F,CAAC,EACrE9B,MAAM,CAAC8I,iCAAiC,CAAChH,CAAC,CAAC,GAAGnG,KAAK,CAACE,KAAK,CAACiE,QAAQ,CAACnC,OAAO,CAACmL,iCAAiC,CAAChH,CAAC,CAAC,EAAE/B,OAAO,CAAC;IACjI;IACA,IAAI8B,KAAK;IACT,IAAIlE,OAAO,CAACkL,sBAAsB,IAAI,CAAChH,KAAK,GAAG7F,MAAM,CAACD,IAAI,CAAC4B,OAAO,CAACkL,sBAAsB,CAAC,EAAE3M,MAAM,EAAE;MAChG8D,MAAM,CAAC6I,sBAAsB,GAAG,CAAC,CAAC;MAClC,KAAK,IAAI/G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC3F,MAAM,EAAE,EAAE4F,CAAC,EACjC9B,MAAM,CAAC6I,sBAAsB,CAAChH,KAAK,CAACC,CAAC,CAAC,CAAC,GAAGnG,KAAK,CAACwM,uBAAuB,CAACrI,QAAQ,CAACnC,OAAO,CAACkL,sBAAsB,CAAChH,KAAK,CAACC,CAAC,CAAC,CAAC,EAAE/B,OAAO,CAAC;IAC3I;IACA,OAAOC,MAAM;EACjB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACI0I,cAAc,CAACvM,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;IAChD,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;EACxE,CAAC;EAED,OAAO6H,cAAc;AACzB,CAAC,EAAG;AAEJ/M,KAAK,CAACoC,MAAM,GAAI,YAAW;EAEvB;AACJ;AACA;AACA;AACA;EACI,IAAIA,MAAM,GAAG,CAAC,CAAC;EAEfA,MAAM,CAACC,QAAQ,GAAI,YAAW;IAE1B;AACR;AACA;AACA;AACA;IACQ,IAAIA,QAAQ,GAAG,CAAC,CAAC;IAEjBA,QAAQ,CAACC,SAAS,GAAI,YAAW;MAE7B;AACZ;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,SAAS,CAACnC,UAAU,EAAE;QAC3B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYgC,SAAS,CAAC9B,SAAS,CAAC+M,OAAO,GAAGzN,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,KAAK,CAAC,GAAG,CAAC;;MAE7E;AACZ;AACA;AACA;AACA;AACA;MACYyB,SAAS,CAAC9B,SAAS,CAACgN,KAAK,GAAG,CAAC;;MAE7B;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYlL,SAAS,CAACR,MAAM,GAAG,SAASA,MAAM,CAAC3B,UAAU,EAAE;QAC3C,OAAO,IAAImC,SAAS,CAACnC,UAAU,CAAC;MACpC,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYmC,SAAS,CAACP,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;QAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrC,OAAO,CAACkC,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAACuL,OAAO,IAAI,IAAI,IAAIlN,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,SAAS,CAAC,EACzEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,CAAC,CAAC,CAAC+C,KAAK,CAACtD,OAAO,CAACuL,OAAO,CAAC;QAClE,IAAIvL,OAAO,CAACwL,KAAK,IAAI,IAAI,IAAInN,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACH,OAAO,EAAE,OAAO,CAAC,EACrEC,MAAM,CAACM,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAAC8C,KAAK,CAACrD,OAAO,CAACwL,KAAK,CAAC;QACjE,OAAOvL,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYK,SAAS,CAACa,eAAe,GAAG,SAASA,eAAe,CAACnB,OAAO,EAAEC,MAAM,EAAE;QAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACQ,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYH,SAAS,CAACc,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAE9C,MAAM,EAAE;QAC/C,IAAI,EAAE8C,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG3D,OAAO,CAACoC,MAAM,CAACuB,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAG/C,MAAM,KAAKgD,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGlD,MAAM;UAAEyB,OAAO,GAAG,IAAIhC,KAAK,CAACoC,MAAM,CAACC,QAAQ,CAACC,SAAS,EAAE;QAClH,OAAOe,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACd,MAAM,EAAE;UACzB,QAAQmB,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACF1B,OAAO,CAACuL,OAAO,GAAGlK,MAAM,CAACiC,KAAK,EAAE;cAChC;YACJ,KAAK,CAAC;cACFtD,OAAO,CAACwL,KAAK,GAAGnK,MAAM,CAACgC,KAAK,EAAE;cAC9B;YACJ;cACIhC,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAO1B,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYM,SAAS,CAACsB,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;QACzD,IAAI,EAAEA,MAAM,YAAY3D,OAAO,CAAC,EAC5B2D,MAAM,GAAG,IAAI3D,OAAO,CAAC2D,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACd,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYD,SAAS,CAACuB,MAAM,GAAG,SAASA,MAAM,CAAC7B,OAAO,EAAE;QACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAACuL,OAAO,IAAI,IAAI,IAAIvL,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACuL,OAAO,CAAC,IAAI,EAAEvL,OAAO,CAACuL,OAAO,IAAIzN,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACuL,OAAO,CAACvJ,GAAG,CAAC,IAAIlE,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACuL,OAAO,CAACtJ,IAAI,CAAC,CAAC,EACxI,OAAO,gCAAgC;QAC/C,IAAIjC,OAAO,CAACwL,KAAK,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxD,IAAI,CAACpC,KAAK,CAACiE,SAAS,CAAC/B,OAAO,CAACwL,KAAK,CAAC,EAC/B,OAAO,yBAAyB;QACxC,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYlL,SAAS,CAAC6B,QAAQ,GAAG,SAASA,QAAQ,CAACnC,OAAO,EAAEoC,OAAO,EAAE;QACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;QACf,IAAID,OAAO,CAACE,QAAQ,EAAE;UAClB,IAAIxE,KAAK,CAACc,IAAI,EAAE;YACZ,IAAI2D,IAAI,GAAG,IAAIzE,KAAK,CAACc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;YACtCyD,MAAM,CAACkJ,OAAO,GAAGnJ,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGN,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAGL,IAAI;UACnH,CAAC,MACGF,MAAM,CAACkJ,OAAO,GAAGnJ,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;UACvDJ,MAAM,CAACmJ,KAAK,GAAG,CAAC;QACpB;QACA,IAAIxL,OAAO,CAACuL,OAAO,IAAI,IAAI,IAAIvL,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,OAAOF,OAAO,CAACuL,OAAO,KAAK,QAAQ,EACnClJ,MAAM,CAACkJ,OAAO,GAAGnJ,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACzC,OAAO,CAACuL,OAAO,CAAC,GAAGvL,OAAO,CAACuL,OAAO,CAAC,KAEtFlJ,MAAM,CAACkJ,OAAO,GAAGnJ,OAAO,CAACI,KAAK,KAAKC,MAAM,GAAG3E,KAAK,CAACc,IAAI,CAACJ,SAAS,CAACkE,QAAQ,CAACvC,IAAI,CAACH,OAAO,CAACuL,OAAO,CAAC,GAAGnJ,OAAO,CAACI,KAAK,KAAKG,MAAM,GAAG,IAAI7E,KAAK,CAAC+E,QAAQ,CAAC7C,OAAO,CAACuL,OAAO,CAACvJ,GAAG,KAAK,CAAC,EAAEhC,OAAO,CAACuL,OAAO,CAACtJ,IAAI,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,GAAG5C,OAAO,CAACuL,OAAO;QAC3O,IAAIvL,OAAO,CAACwL,KAAK,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDmC,MAAM,CAACmJ,KAAK,GAAGxL,OAAO,CAACwL,KAAK;QAChC,OAAOnJ,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACY/B,SAAS,CAAC9B,SAAS,CAACwE,MAAM,GAAG,SAASA,MAAM,GAAG;QAC3C,OAAO,IAAI,CAACC,WAAW,CAACd,QAAQ,CAAC,IAAI,EAAE3E,SAAS,CAACO,IAAI,CAACmF,aAAa,CAAC;MACxE,CAAC;MAED,OAAO5C,SAAS;IACpB,CAAC,EAAG;IAEJ,OAAOD,QAAQ;EACnB,CAAC,EAAG;EAEJ,OAAOD,MAAM;AACjB,CAAC,EAAG;AAEJqL,MAAM,CAACC,OAAO,GAAG1N,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}