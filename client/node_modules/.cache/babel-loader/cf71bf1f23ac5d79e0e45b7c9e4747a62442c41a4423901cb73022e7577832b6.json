{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeSchemaDefs = exports.DEFAULT_OPERATION_TYPE_NAME_MAP = void 0;\nconst graphql_1 = require(\"graphql\");\nconst directives_js_1 = require(\"./directives.js\");\nexports.DEFAULT_OPERATION_TYPE_NAME_MAP = {\n  query: 'Query',\n  mutation: 'Mutation',\n  subscription: 'Subscription'\n};\nfunction mergeOperationTypes() {\n  let opNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let existingOpNodeList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const finalOpNodeList = [];\n  for (const opNodeType in exports.DEFAULT_OPERATION_TYPE_NAME_MAP) {\n    const opNode = opNodeList.find(n => n.operation === opNodeType) || existingOpNodeList.find(n => n.operation === opNodeType);\n    if (opNode) {\n      finalOpNodeList.push(opNode);\n    }\n  }\n  return finalOpNodeList;\n}\nfunction mergeSchemaDefs(node, existingNode, config) {\n  if (existingNode) {\n    return {\n      kind: node.kind === graphql_1.Kind.SCHEMA_DEFINITION || existingNode.kind === graphql_1.Kind.SCHEMA_DEFINITION ? graphql_1.Kind.SCHEMA_DEFINITION : graphql_1.Kind.SCHEMA_EXTENSION,\n      description: node['description'] || existingNode['description'],\n      directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config),\n      operationTypes: mergeOperationTypes(node.operationTypes, existingNode.operationTypes)\n    };\n  }\n  return (config === null || config === void 0 ? void 0 : config.convertExtensions) ? {\n    ...node,\n    kind: graphql_1.Kind.SCHEMA_DEFINITION\n  } : node;\n}\nexports.mergeSchemaDefs = mergeSchemaDefs;","map":{"version":3,"names":["Object","defineProperty","exports","value","mergeSchemaDefs","DEFAULT_OPERATION_TYPE_NAME_MAP","graphql_1","require","directives_js_1","query","mutation","subscription","mergeOperationTypes","opNodeList","existingOpNodeList","finalOpNodeList","opNodeType","opNode","find","n","operation","push","node","existingNode","config","kind","Kind","SCHEMA_DEFINITION","SCHEMA_EXTENSION","description","directives","mergeDirectives","operationTypes","convertExtensions"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/mock/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/schema-def.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeSchemaDefs = exports.DEFAULT_OPERATION_TYPE_NAME_MAP = void 0;\nconst graphql_1 = require(\"graphql\");\nconst directives_js_1 = require(\"./directives.js\");\nexports.DEFAULT_OPERATION_TYPE_NAME_MAP = {\n    query: 'Query',\n    mutation: 'Mutation',\n    subscription: 'Subscription',\n};\nfunction mergeOperationTypes(opNodeList = [], existingOpNodeList = []) {\n    const finalOpNodeList = [];\n    for (const opNodeType in exports.DEFAULT_OPERATION_TYPE_NAME_MAP) {\n        const opNode = opNodeList.find(n => n.operation === opNodeType) || existingOpNodeList.find(n => n.operation === opNodeType);\n        if (opNode) {\n            finalOpNodeList.push(opNode);\n        }\n    }\n    return finalOpNodeList;\n}\nfunction mergeSchemaDefs(node, existingNode, config) {\n    if (existingNode) {\n        return {\n            kind: node.kind === graphql_1.Kind.SCHEMA_DEFINITION || existingNode.kind === graphql_1.Kind.SCHEMA_DEFINITION\n                ? graphql_1.Kind.SCHEMA_DEFINITION\n                : graphql_1.Kind.SCHEMA_EXTENSION,\n            description: node['description'] || existingNode['description'],\n            directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config),\n            operationTypes: mergeOperationTypes(node.operationTypes, existingNode.operationTypes),\n        };\n    }\n    return ((config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql_1.Kind.SCHEMA_DEFINITION,\n        }\n        : node);\n}\nexports.mergeSchemaDefs = mergeSchemaDefs;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGF,OAAO,CAACG,+BAA+B,GAAG,KAAK,CAAC;AAC1E,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAClDL,OAAO,CAACG,+BAA+B,GAAG;EACtCI,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE,UAAU;EACpBC,YAAY,EAAE;AAClB,CAAC;AACD,SAASC,mBAAmB,GAA2C;EAAA,IAA1CC,UAAU,uEAAG,EAAE;EAAA,IAAEC,kBAAkB,uEAAG,EAAE;EACjE,MAAMC,eAAe,GAAG,EAAE;EAC1B,KAAK,MAAMC,UAAU,IAAId,OAAO,CAACG,+BAA+B,EAAE;IAC9D,MAAMY,MAAM,GAAGJ,UAAU,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAKJ,UAAU,CAAC,IAAIF,kBAAkB,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAKJ,UAAU,CAAC;IAC3H,IAAIC,MAAM,EAAE;MACRF,eAAe,CAACM,IAAI,CAACJ,MAAM,CAAC;IAChC;EACJ;EACA,OAAOF,eAAe;AAC1B;AACA,SAASX,eAAe,CAACkB,IAAI,EAAEC,YAAY,EAAEC,MAAM,EAAE;EACjD,IAAID,YAAY,EAAE;IACd,OAAO;MACHE,IAAI,EAAEH,IAAI,CAACG,IAAI,KAAKnB,SAAS,CAACoB,IAAI,CAACC,iBAAiB,IAAIJ,YAAY,CAACE,IAAI,KAAKnB,SAAS,CAACoB,IAAI,CAACC,iBAAiB,GACxGrB,SAAS,CAACoB,IAAI,CAACC,iBAAiB,GAChCrB,SAAS,CAACoB,IAAI,CAACE,gBAAgB;MACrCC,WAAW,EAAEP,IAAI,CAAC,aAAa,CAAC,IAAIC,YAAY,CAAC,aAAa,CAAC;MAC/DO,UAAU,EAAE,CAAC,CAAC,EAAEtB,eAAe,CAACuB,eAAe,EAAET,IAAI,CAACQ,UAAU,EAAEP,YAAY,CAACO,UAAU,EAAEN,MAAM,CAAC;MAClGQ,cAAc,EAAEpB,mBAAmB,CAACU,IAAI,CAACU,cAAc,EAAET,YAAY,CAACS,cAAc;IACxF,CAAC;EACL;EACA,OAAQ,CAACR,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACS,iBAAiB,IAC3E;IACE,GAAGX,IAAI;IACPG,IAAI,EAAEnB,SAAS,CAACoB,IAAI,CAACC;EACzB,CAAC,GACCL,IAAI;AACd;AACApB,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}