{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renameType = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction renameType(type, newTypeName) {\n  if ((0, graphql_1.isObjectType)(type)) {\n    return new graphql_1.GraphQLObjectType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode: type.astNode == null ? type.astNode : {\n        ...type.astNode,\n        name: {\n          ...type.astNode.name,\n          value: newTypeName\n        }\n      },\n      extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map(node => ({\n        ...node,\n        name: {\n          ...node.name,\n          value: newTypeName\n        }\n      }))\n    });\n  } else if ((0, graphql_1.isInterfaceType)(type)) {\n    return new graphql_1.GraphQLInterfaceType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode: type.astNode == null ? type.astNode : {\n        ...type.astNode,\n        name: {\n          ...type.astNode.name,\n          value: newTypeName\n        }\n      },\n      extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map(node => ({\n        ...node,\n        name: {\n          ...node.name,\n          value: newTypeName\n        }\n      }))\n    });\n  } else if ((0, graphql_1.isUnionType)(type)) {\n    return new graphql_1.GraphQLUnionType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode: type.astNode == null ? type.astNode : {\n        ...type.astNode,\n        name: {\n          ...type.astNode.name,\n          value: newTypeName\n        }\n      },\n      extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map(node => ({\n        ...node,\n        name: {\n          ...node.name,\n          value: newTypeName\n        }\n      }))\n    });\n  } else if ((0, graphql_1.isInputObjectType)(type)) {\n    return new graphql_1.GraphQLInputObjectType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode: type.astNode == null ? type.astNode : {\n        ...type.astNode,\n        name: {\n          ...type.astNode.name,\n          value: newTypeName\n        }\n      },\n      extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map(node => ({\n        ...node,\n        name: {\n          ...node.name,\n          value: newTypeName\n        }\n      }))\n    });\n  } else if ((0, graphql_1.isEnumType)(type)) {\n    return new graphql_1.GraphQLEnumType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode: type.astNode == null ? type.astNode : {\n        ...type.astNode,\n        name: {\n          ...type.astNode.name,\n          value: newTypeName\n        }\n      },\n      extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map(node => ({\n        ...node,\n        name: {\n          ...node.name,\n          value: newTypeName\n        }\n      }))\n    });\n  } else if ((0, graphql_1.isScalarType)(type)) {\n    return new graphql_1.GraphQLScalarType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode: type.astNode == null ? type.astNode : {\n        ...type.astNode,\n        name: {\n          ...type.astNode.name,\n          value: newTypeName\n        }\n      },\n      extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map(node => ({\n        ...node,\n        name: {\n          ...node.name,\n          value: newTypeName\n        }\n      }))\n    });\n  }\n  throw new Error(`Unknown type ${type}.`);\n}\nexports.renameType = renameType;","map":{"version":3,"names":["Object","defineProperty","exports","value","renameType","graphql_1","require","type","newTypeName","isObjectType","GraphQLObjectType","toConfig","name","astNode","extensionASTNodes","map","node","isInterfaceType","GraphQLInterfaceType","isUnionType","GraphQLUnionType","isInputObjectType","GraphQLInputObjectType","isEnumType","GraphQLEnumType","isScalarType","GraphQLScalarType","Error"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/@graphql-tools/merge/node_modules/@graphql-tools/utils/cjs/renameType.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.renameType = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction renameType(type, newTypeName) {\n    if ((0, graphql_1.isObjectType)(type)) {\n        return new graphql_1.GraphQLObjectType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if ((0, graphql_1.isInterfaceType)(type)) {\n        return new graphql_1.GraphQLInterfaceType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if ((0, graphql_1.isUnionType)(type)) {\n        return new graphql_1.GraphQLUnionType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if ((0, graphql_1.isInputObjectType)(type)) {\n        return new graphql_1.GraphQLInputObjectType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if ((0, graphql_1.isEnumType)(type)) {\n        return new graphql_1.GraphQLEnumType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if ((0, graphql_1.isScalarType)(type)) {\n        return new graphql_1.GraphQLScalarType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    throw new Error(`Unknown type ${type}.`);\n}\nexports.renameType = renameType;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}