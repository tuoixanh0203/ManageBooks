{"ast":null,"code":"\"use strict\";\n\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || typeof self !== \"undefined\" && self || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */{}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */function isInteger(value) {\n  return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n  return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n  var value = obj[prop];\n  if (value != null && obj.hasOwnProperty(prop))\n    // eslint-disable-line eqeqeq, no-prototype-builtins\n    return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n  return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = function () {\n  try {\n    var Buffer = util.inquire(\"buffer\").Buffer;\n    // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n    return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */null;\n  } catch (e) {\n    /* istanbul ignore next */\n    return null;\n  }\n}();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n  /* istanbul ignore next */\n  return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/*\n * Long.js's Long class if available and $ENABLE_LONG is set. This lets us leave it on\n * for this package's tests but have it be off in actual usage-reporting-protobuf use.\n * (We leave it on for some mode where there is no `process` that is used by tests.)\n */\nutil.Long = typeof process === 'undefined' || process.env.ENABLE_LONG ? /* istanbul ignore next */util.global.dcodeIO && /* istanbul ignore next */util.global.dcodeIO.Long || /* istanbul ignore next */util.global.Long || util.inquire(\"long\") : undefined;\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/*\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n  return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n};\n\n/*\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n  var bits = util.LongBits.fromHash(hash);\n  if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n  return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) {\n  // used by converters\n  for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n  return dst;\n}\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n  return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n  function CustomError(message, properties) {\n    if (!(this instanceof CustomError)) return new CustomError(message, properties);\n\n    // Error.call(this, message);\n    // ^ just returns a new error instance because the ctor can be called as a function\n\n    Object.defineProperty(this, \"message\", {\n      get: function () {\n        return message;\n      }\n    });\n\n    /* istanbul ignore next */\n    if (Error.captureStackTrace)\n      // node\n      Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, \"stack\", {\n      value: new Error().stack || \"\"\n    });\n    if (properties) merge(this, properties);\n  }\n  (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n  Object.defineProperty(CustomError.prototype, \"name\", {\n    get: function () {\n      return name;\n    }\n  });\n  CustomError.prototype.toString = function toString() {\n    return this.name + \": \" + this.message;\n  };\n  return CustomError;\n}\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n  var fieldMap = {};\n  for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;\n\n  /**\n   * @returns {string|undefined} Set field name, if any\n   * @this Object\n   * @ignore\n   */\n  return function () {\n    // eslint-disable-line consistent-return\n    for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n  };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n  /**\n   * @param {string} name Field name\n   * @returns {undefined}\n   * @this Object\n   * @ignore\n   */\n  return function (name) {\n    for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];\n  };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n  longs: String,\n  enums: String,\n  bytes: String,\n  json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function () {\n  var Buffer = util.Buffer;\n  /* istanbul ignore if */\n  if (!Buffer) {\n    util._Buffer_from = util._Buffer_allocUnsafe = null;\n    return;\n  }\n  // because node 4.x buffers are incompatible & immutable\n  // see: https://github.com/dcodeIO/protobuf.js/pull/665\n  util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */\n  function Buffer_from(value, encoding) {\n    return new Buffer(value, encoding);\n  };\n  util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */\n  function Buffer_allocUnsafe(size) {\n    return new Buffer(size);\n  };\n};","map":{"version":3,"names":["util","exports","asPromise","require","base64","EventEmitter","float","inquire","utf8","pool","LongBits","global","window","self","emptyArray","Object","freeze","emptyObject","isNode","Boolean","process","versions","node","isInteger","Number","value","isFinite","Math","floor","isString","String","isObject","isset","isSet","obj","prop","hasOwnProperty","Array","isArray","length","keys","Buffer","prototype","utf8Write","e","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","Uint8Array","Long","env","ENABLE_LONG","dcodeIO","undefined","key2Re","key32Re","key64Re","longToHash","from","toHash","zeroHash","longFromHash","hash","unsigned","bits","fromHash","fromBits","lo","hi","toNumber","merge","dst","src","ifNotSet","i","lcFirst","str","charAt","toLowerCase","substring","newError","name","CustomError","message","properties","defineProperty","get","Error","captureStackTrace","stack","create","constructor","toString","ProtocolError","oneOfGetter","getOneOf","fieldNames","fieldMap","oneOfSetter","setOneOf","toJSONOptions","longs","enums","bytes","json","_configure","Buffer_from","encoding","allocUnsafe","Buffer_allocUnsafe","size"],"sources":["C:/Users/Admin/Documents/Web/GRAPHQL/node_modules/apollo-reporting-protobuf/node_modules/@apollo/protobufjs/src/util/minimal.js"],"sourcesContent":["\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/*\n * Long.js's Long class if available and $ENABLE_LONG is set. This lets us leave it on\n * for this package's tests but have it be off in actual usage-reporting-protobuf use.\n * (We leave it on for some mode where there is no `process` that is used by tests.)\n */\nutil.Long = (typeof process === 'undefined' || process.env.ENABLE_LONG) ? (/* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\")) : undefined;\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/*\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/*\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}