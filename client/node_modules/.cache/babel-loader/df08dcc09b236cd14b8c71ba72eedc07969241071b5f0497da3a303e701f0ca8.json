{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK, isSelectionNode } from 'graphql';\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n      client = _a.client,\n      resolvers = _a.resolvers,\n      fragmentMatcher = _a.fragmentMatcher;\n    this.selectionsToResolveCache = new WeakMap();\n    this.cache = cache;\n    if (client) {\n      this.client = client;\n    }\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n      remoteResult = _a.remoteResult,\n      context = _a.context,\n      variables = _a.variables,\n      _b = _a.onlyRunForcedResolvers,\n      onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n        return [2, remoteResult];\n      });\n    });\n  };\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  };\n  LocalState.prototype.serverQuery = function (document) {\n    return removeClientSetsFromDocument(document);\n  };\n  LocalState.prototype.prepareContext = function (context) {\n    var cache = this.cache;\n    return __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function (obj) {\n        return cache.identify(obj);\n      }\n    });\n  };\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (context === void 0) {\n      context = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          selectionsToResolve: selectionsToResolve,\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        isClientFieldDescendant = false;\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n      var _this = this;\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                return [2];\n              }\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                __DEV__ ? invariant(fragment, \"No fragment named \".concat(selection.name.value)) : invariant(fragment, 11);\n              }\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n              return [2];\n            });\n          });\n        };\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n      var _this = this;\n      return __generator(this, function (_a) {\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n            if (resolve) {\n              resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }]));\n            }\n          }\n        }\n        return [2, resultPromise.then(function (result) {\n          var _a, _b;\n          if (result === void 0) {\n            result = defaultResult;\n          }\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n          if (!field.selectionSet) {\n            return result;\n          }\n          if (result == null) {\n            return result;\n          }\n          var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) {\n            return d.name.value === 'client';\n          })) !== null && _b !== void 0 ? _b : false;\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n          }\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n    var _this = this;\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n      }\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n      }\n    }));\n  };\n  LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n    var isSingleASTNode = function (node) {\n      return !Array.isArray(node);\n    };\n    var selectionsToResolveCache = this.selectionsToResolveCache;\n    function collectByDefinition(definitionNode) {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        var matches_1 = new Set();\n        selectionsToResolveCache.set(definitionNode, matches_1);\n        visit(definitionNode, {\n          Directive: function (node, _, __, ___, ancestors) {\n            if (node.name.value === 'client') {\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n            }\n          },\n          FragmentSpread: function (spread, _, __, ___, ancestors) {\n            var fragment = fragmentMap[spread.name.value];\n            __DEV__ ? invariant(fragment, \"No fragment named \".concat(spread.name.value)) : invariant(fragment, 12);\n            var fragmentSelections = collectByDefinition(fragment);\n            if (fragmentSelections.size > 0) {\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n              matches_1.add(spread);\n              fragmentSelections.forEach(function (selection) {\n                matches_1.add(selection);\n              });\n            }\n          }\n        });\n      }\n      return selectionsToResolveCache.get(definitionNode);\n    }\n    return collectByDefinition(mainDefinition);\n  };\n  return LocalState;\n}();\nexport { LocalState };","map":{"version":3,"mappings":"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","names":["invariant","visit","BREAK","isSelectionNode","argumentsObjectFromField","buildQueryFromSelectionSet","createFragmentMap","getFragmentDefinitions","getMainDefinition","hasDirectives","isField","isInlineFragment","mergeDeep","mergeDeepArray","removeClientSetsFromDocument","resultKeyNameFromField","shouldInclude","cacheSlot","_a","cache","client","resolvers","fragmentMatcher","WeakMap","addResolvers","setFragmentMatcher","LocalState","Array","isArray","forEach","_this","resolverGroup","document","remoteResult","context","variables","_b","onlyRunForcedResolvers","resolveDocument","data","then","localResult","result","getCacheKey","obj","identify","buildRootValueFromCache","prepareContext","exportedVariables","forceResolvers","Directive","enter","node","name","value","arguments","some","arg","kind","diff","query","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","selectionsToResolve","collectSelectionsToResolve","definitionOperation","operation","defaultOperationType","charAt","toUpperCase","slice","execContext","isClientFieldDescendant","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","has","resolveField","fieldResult","push","fragment","__DEV__","typeCondition","fragmentResult","Promise","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolve","shouldForceResolvers","resolverType","__typename","resolverMap","withValue","directives","directive","isClientField","resolveSubSelectedArray","item","isSingleASTNode","selectionsToResolveCache","collectByDefinition","definitionNode","matches_1","Set","set","_","__","___","ancestors","add","FragmentSpread","spread","fragmentSelections","size","get"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\client\\node_modules\\@apollo\\src\\core\\LocalState.ts"],"sourcesContent":["import { invariant } from '../utilities/globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  visit,\n  BREAK,\n  isSelectionNode,\n  DirectiveNode,\n  FragmentSpreadNode,\n  ExecutableDefinitionNode,\n} from 'graphql';\n\nimport { ApolloCache } from '../cache';\nimport {\n  FragmentMap,\n  StoreObject,\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from '../utilities';\nimport { ApolloClient } from './ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { FetchResult } from '../link/core';\nimport { cacheSlot } from '../cache';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n  selectionsToResolve: Set<SelectionNode>;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n  private selectionsToResolveCache = new WeakMap<ExecutableDefinitionNode, Set<SelectionNode>>()\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document) as OperationDefinitionNode;\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n    const selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n\n    const definitionOperation = mainDefinition.operation;\n\n    const defaultOperationType = definitionOperation\n      ? definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      selectionsToResolve,\n      onlyRunForcedResolvers,\n    };\n    const isClientFieldDescendant = false;\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      isClientFieldDescendant,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    isClientFieldDescendant: boolean,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n        // Skip selections without @client directives\n        // (still processing if one of the ancestors or one of the child fields has @client directive)\n        return ;\n      }\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            isClientFieldDescendant,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      const isClientField = field.directives?.some(d => d.name.value === 'client') ?? false\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          isClientFieldDescendant || isClientField,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n        }\n      }),\n    );\n  }\n\n  // Collect selection nodes on paths from document root down to all @client directives.\n  // This function takes into account transitive fragment spreads.\n  // Complexity equals to a single `visit` over the full document.\n  private collectSelectionsToResolve(\n    mainDefinition: OperationDefinitionNode,\n    fragmentMap: FragmentMap\n  ): Set<SelectionNode> {\n    const isSingleASTNode = (node: ASTNode | readonly ASTNode[]): node is ASTNode => !Array.isArray(node);\n    const selectionsToResolveCache = this.selectionsToResolveCache;\n\n    function collectByDefinition(definitionNode: ExecutableDefinitionNode): Set<SelectionNode> {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        const matches = new Set<SelectionNode>();\n        selectionsToResolveCache.set(definitionNode, matches);\n\n        visit(definitionNode, {\n          Directive(node: DirectiveNode, _, __, ___, ancestors) {\n            if (node.name.value === 'client') {\n              ancestors.forEach(node => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              })\n            }\n          },\n          FragmentSpread(spread: FragmentSpreadNode, _, __, ___, ancestors) {\n            const fragment = fragmentMap[spread.name.value];\n            invariant(fragment, `No fragment named ${spread.name.value}`);\n\n            const fragmentSelections = collectByDefinition(fragment);\n            if (fragmentSelections.size > 0) {\n              // Fragment for this spread contains @client directive (either directly or transitively)\n              // Collect selection nodes on paths from the root down to fields with the @client directive\n              ancestors.forEach(node => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              })\n              matches.add(spread);\n              fragmentSelections.forEach(selection => {\n                matches.add(selection);\n              })\n            }\n          }\n        })\n      }\n      return selectionsToResolveCache.get(definitionNode)!;\n    }\n    return collectByDefinition(mainDefinition);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}