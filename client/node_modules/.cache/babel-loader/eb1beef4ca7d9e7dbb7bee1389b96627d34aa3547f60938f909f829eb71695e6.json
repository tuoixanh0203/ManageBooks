{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaReporter = exports.schemaReportGql = void 0;\nconst gql_1 = require(\"../../gql\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst graphql_1 = require(\"graphql\");\nexports.schemaReportGql = (0, graphql_1.print)((0, gql_1.gql)`\n  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {\n    reportSchema(report: $report, coreSchema: $coreSchema) {\n      __typename\n      ... on ReportSchemaError {\n        message\n        code\n      }\n      ... on ReportSchemaResponse {\n        inSeconds\n        withCoreSchema\n      }\n    }\n  }\n`);\nclass SchemaReporter {\n  constructor(options) {\n    var _a;\n    this.headers = new apollo_server_env_1.Headers();\n    this.headers.set('Content-Type', 'application/json');\n    this.headers.set('x-api-key', options.apiKey);\n    this.headers.set('apollographql-client-name', 'ApolloServerPluginSchemaReporting');\n    this.headers.set('apollographql-client-version', require('../../../package.json').version);\n    this.endpointUrl = options.endpointUrl || 'https://schema-reporting.api.apollographql.com/api/graphql';\n    this.schemaReport = options.schemaReport;\n    this.coreSchema = options.coreSchema;\n    this.isStopped = false;\n    this.logger = options.logger;\n    this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n    this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n    this.fetcher = (_a = options.fetcher) !== null && _a !== void 0 ? _a : apollo_server_env_1.fetch;\n  }\n  stopped() {\n    return this.isStopped;\n  }\n  start() {\n    this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);\n  }\n  stop() {\n    this.isStopped = true;\n    if (this.pollTimer) {\n      clearTimeout(this.pollTimer);\n      this.pollTimer = undefined;\n    }\n  }\n  async sendOneReportAndScheduleNext(sendNextWithCoreSchema) {\n    this.pollTimer = undefined;\n    if (this.stopped()) return;\n    try {\n      const result = await this.reportSchema(sendNextWithCoreSchema);\n      if (!result) {\n        return;\n      }\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withCoreSchema), result.inSeconds * 1000);\n      }\n      return;\n    } catch (error) {\n      this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);\n      }\n    }\n  }\n  async reportSchema(withCoreSchema) {\n    const {\n      data,\n      errors\n    } = await this.apolloQuery({\n      report: this.schemaReport,\n      coreSchema: withCoreSchema ? this.coreSchema : null\n    });\n    if (errors) {\n      throw new Error(errors.map(x => x.message).join('\\n'));\n    }\n    function msgForUnexpectedResponse(data) {\n      return ['Unexpected response shape from Apollo when', 'reporting schema. If this continues, please reach', 'out to support@apollographql.com.', 'Received response:', JSON.stringify(data)].join(' ');\n    }\n    if (!data || !data.reportSchema) {\n      throw new Error(msgForUnexpectedResponse(data));\n    }\n    if (data.reportSchema.__typename === 'ReportSchemaResponse') {\n      return data.reportSchema;\n    } else if (data.reportSchema.__typename === 'ReportSchemaError') {\n      this.logger.error(['Received input validation error from Apollo:', data.reportSchema.message, 'Stopping reporting. Please fix the input errors.'].join(' '));\n      this.stop();\n      return null;\n    }\n    throw new Error(msgForUnexpectedResponse(data));\n  }\n  async apolloQuery(variables) {\n    const request = {\n      query: exports.schemaReportGql,\n      variables\n    };\n    const httpRequest = new apollo_server_env_1.Request(this.endpointUrl, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(request)\n    });\n    const httpResponse = await this.fetcher(httpRequest);\n    if (!httpResponse.ok) {\n      throw new Error([`An unexpected HTTP status code (${httpResponse.status}) was`, 'encountered during schema reporting.'].join(' '));\n    }\n    try {\n      return await httpResponse.json();\n    } catch (error) {\n      throw new Error([\"Couldn't report schema to Apollo.\", 'Parsing response as JSON failed.', 'If this continues please reach out to support@apollographql.com', error].join(' '));\n    }\n  }\n}\nexports.SchemaReporter = SchemaReporter;","map":{"version":3,"mappings":"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","names":["exports","SchemaReporter","constructor","options","headers","apollo_server_env_1","set","apiKey","require","version","endpointUrl","schemaReport","coreSchema","isStopped","logger","initialReportingDelayInMs","fallbackReportingDelayInMs","fetcher","stopped","start","pollTimer","setTimeout","sendOneReportAndScheduleNext","stop","clearTimeout","undefined","sendNextWithCoreSchema","result","reportSchema","withCoreSchema","inSeconds","error","data","errors","apolloQuery","report","Error","map","x","message","join","msgForUnexpectedResponse","JSON","stringify","__typename","variables","request","query","httpRequest","method","body","httpResponse","ok","status","json"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\plugin\\schemaReporting\\schemaReporter.ts"],"sourcesContent":["import { gql } from '../../gql';\nimport { fetch, Headers, Request } from 'apollo-server-env';\nimport type { GraphQLRequest } from 'apollo-server-types';\nimport type { Logger } from '@apollo/utils.logger';\nimport { print } from 'graphql';\nimport type {\n  SchemaReport,\n  SchemaReportMutationVariables,\n  SchemaReportMutation,\n  ReportSchemaResponse,\n} from './generated/operations';\n\nexport const schemaReportGql = print(gql`\n  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {\n    reportSchema(report: $report, coreSchema: $coreSchema) {\n      __typename\n      ... on ReportSchemaError {\n        message\n        code\n      }\n      ... on ReportSchemaResponse {\n        inSeconds\n        withCoreSchema\n      }\n    }\n  }\n`);\n\n// This class is meant to be a thin shim around the gql mutations.\nexport class SchemaReporter {\n  // These mirror the gql variables\n  private readonly schemaReport: SchemaReport;\n  private readonly coreSchema: string;\n  private readonly endpointUrl: string;\n  private readonly logger: Logger;\n  private readonly initialReportingDelayInMs: number;\n  private readonly fallbackReportingDelayInMs: number;\n  private readonly fetcher: typeof fetch;\n\n  private isStopped: boolean;\n  private pollTimer?: NodeJS.Timer;\n  private readonly headers: Headers;\n\n  constructor(options: {\n    schemaReport: SchemaReport;\n    coreSchema: string;\n    apiKey: string;\n    endpointUrl: string | undefined;\n    logger: Logger;\n    initialReportingDelayInMs: number;\n    fallbackReportingDelayInMs: number;\n    fetcher?: typeof fetch;\n  }) {\n    this.headers = new Headers();\n    this.headers.set('Content-Type', 'application/json');\n    this.headers.set('x-api-key', options.apiKey);\n    this.headers.set(\n      'apollographql-client-name',\n      'ApolloServerPluginSchemaReporting',\n    );\n    this.headers.set(\n      'apollographql-client-version',\n      require('../../../package.json').version,\n    );\n\n    this.endpointUrl =\n      options.endpointUrl ||\n      'https://schema-reporting.api.apollographql.com/api/graphql';\n\n    this.schemaReport = options.schemaReport;\n    this.coreSchema = options.coreSchema;\n    this.isStopped = false;\n    this.logger = options.logger;\n    this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n    this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n    this.fetcher = options.fetcher ?? fetch;\n  }\n\n  public stopped(): Boolean {\n    return this.isStopped;\n  }\n\n  public start() {\n    this.pollTimer = setTimeout(\n      () => this.sendOneReportAndScheduleNext(false),\n      this.initialReportingDelayInMs,\n    );\n  }\n\n  public stop() {\n    this.isStopped = true;\n    if (this.pollTimer) {\n      clearTimeout(this.pollTimer);\n      this.pollTimer = undefined;\n    }\n  }\n\n  private async sendOneReportAndScheduleNext(sendNextWithCoreSchema: boolean) {\n    this.pollTimer = undefined;\n\n    // Bail out permanently\n    if (this.stopped()) return;\n    try {\n      const result = await this.reportSchema(sendNextWithCoreSchema);\n      if (!result) {\n        return;\n      }\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(\n          () => this.sendOneReportAndScheduleNext(result.withCoreSchema),\n          result.inSeconds * 1000,\n        );\n      }\n      return;\n    } catch (error) {\n      // In the case of an error we want to continue looping\n      // We can add hardcoded backoff in the future,\n      // or on repeated failures stop responding reporting.\n      this.logger.error(\n        `Error reporting server info to Apollo during schema reporting: ${error}`,\n      );\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(\n          () => this.sendOneReportAndScheduleNext(false),\n          this.fallbackReportingDelayInMs,\n        );\n      }\n    }\n  }\n\n  public async reportSchema(\n    withCoreSchema: boolean,\n  ): Promise<ReportSchemaResponse | null> {\n    const { data, errors } = await this.apolloQuery({\n      report: this.schemaReport,\n      coreSchema: withCoreSchema ? this.coreSchema : null,\n    });\n\n    if (errors) {\n      throw new Error(errors.map((x: any) => x.message).join('\\n'));\n    }\n\n    function msgForUnexpectedResponse(data: any): string {\n      return [\n        'Unexpected response shape from Apollo when',\n        'reporting schema. If this continues, please reach',\n        'out to support@apollographql.com.',\n        'Received response:',\n        JSON.stringify(data),\n      ].join(' ');\n    }\n\n    if (!data || !data.reportSchema) {\n      throw new Error(msgForUnexpectedResponse(data));\n    }\n\n    if (data.reportSchema.__typename === 'ReportSchemaResponse') {\n      return data.reportSchema;\n    } else if (data.reportSchema.__typename === 'ReportSchemaError') {\n      this.logger.error(\n        [\n          'Received input validation error from Apollo:',\n          data.reportSchema.message,\n          'Stopping reporting. Please fix the input errors.',\n        ].join(' '),\n      );\n      this.stop();\n      return null;\n    }\n    throw new Error(msgForUnexpectedResponse(data));\n  }\n\n  private async apolloQuery(\n    variables: SchemaReportMutationVariables,\n  ): Promise<{ data?: SchemaReportMutation; errors?: any[] }> {\n    const request: GraphQLRequest = {\n      query: schemaReportGql,\n      variables,\n    };\n    const httpRequest = new Request(this.endpointUrl, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(request),\n    });\n\n    const httpResponse = await this.fetcher(httpRequest);\n\n    if (!httpResponse.ok) {\n      throw new Error(\n        [\n          `An unexpected HTTP status code (${httpResponse.status}) was`,\n          'encountered during schema reporting.',\n        ].join(' '),\n      );\n    }\n\n    try {\n      // JSON parsing failure due to malformed data is the likely failure case\n      // here.  Any non-JSON response (e.g. HTML) is usually the suspect.\n      return await httpResponse.json();\n    } catch (error) {\n      throw new Error(\n        [\n          \"Couldn't report schema to Apollo.\",\n          'Parsing response as JSON failed.',\n          'If this continues please reach out to support@apollographql.com',\n          error,\n        ].join(' '),\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}