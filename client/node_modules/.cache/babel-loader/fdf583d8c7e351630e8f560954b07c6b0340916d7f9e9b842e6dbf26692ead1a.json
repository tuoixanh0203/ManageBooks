{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.determineApolloConfig = void 0;\nconst createSHA_1 = __importDefault(require(\"./utils/createSHA\"));\nfunction determineApolloConfig(input) {\n  var _a, _b;\n  const apolloConfig = {};\n  const {\n    APOLLO_KEY,\n    APOLLO_GRAPH_REF,\n    APOLLO_GRAPH_ID,\n    APOLLO_GRAPH_VARIANT\n  } = process.env;\n  if (input === null || input === void 0 ? void 0 : input.key) {\n    apolloConfig.key = input.key;\n  } else if (APOLLO_KEY) {\n    apolloConfig.key = APOLLO_KEY;\n  }\n  if (apolloConfig.key) {\n    apolloConfig.keyHash = (0, createSHA_1.default)('sha512').update(apolloConfig.key).digest('hex');\n  }\n  if (input === null || input === void 0 ? void 0 : input.graphRef) {\n    apolloConfig.graphRef = input.graphRef;\n  } else if (APOLLO_GRAPH_REF) {\n    apolloConfig.graphRef = APOLLO_GRAPH_REF;\n  }\n  const graphId = (_a = input === null || input === void 0 ? void 0 : input.graphId) !== null && _a !== void 0 ? _a : APOLLO_GRAPH_ID;\n  const graphVariant = (_b = input === null || input === void 0 ? void 0 : input.graphVariant) !== null && _b !== void 0 ? _b : APOLLO_GRAPH_VARIANT;\n  if (apolloConfig.graphRef) {\n    if (graphId) {\n      throw new Error('Cannot specify both graph ref and graph ID. Please use ' + '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n    }\n    if (graphVariant) {\n      throw new Error('Cannot specify both graph ref and graph variant. Please use ' + '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph variant.');\n    }\n  } else if (graphId) {\n    apolloConfig.graphRef = graphVariant ? `${graphId}@${graphVariant}` : graphId;\n  }\n  return apolloConfig;\n}\nexports.determineApolloConfig = determineApolloConfig;","map":{"version":3,"mappings":";;;;;;;;;;;AACA;AAIA,SAAgBA,qBAAqB,CACnCC,KAAoC;;EAEpC,MAAMC,YAAY,GAAiB,EAAE;EAErC,MAAM;IACJC,UAAU;IACVC,gBAAgB;IAChBC,eAAe;IACfC;EAAoB,CACrB,GAAGC,OAAO,CAACC,GAAG;EAGf,IAAIP,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEQ,GAAG,EAAE;IACdP,YAAY,CAACO,GAAG,GAAGR,KAAK,CAACQ,GAAG;GAC7B,MAAM,IAAIN,UAAU,EAAE;IACrBD,YAAY,CAACO,GAAG,GAAGN,UAAU;;EAI/B,IAAID,YAAY,CAACO,GAAG,EAAE;IACpBP,YAAY,CAACQ,OAAO,GAAG,uBAAS,EAAC,QAAQ,CAAC,CACvCC,MAAM,CAACT,YAAY,CAACO,GAAG,CAAC,CACxBG,MAAM,CAAC,KAAK,CAAC;;EAIlB,IAAIX,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEY,QAAQ,EAAE;IACnBX,YAAY,CAACW,QAAQ,GAAGZ,KAAK,CAACY,QAAQ;GACvC,MAAM,IAAIT,gBAAgB,EAAE;IAC3BF,YAAY,CAACW,QAAQ,GAAGT,gBAAgB;;EAI1C,MAAMU,OAAO,GAAG,WAAK,aAALb,KAAK,uBAALA,KAAK,CAAEa,OAAO,mCAAIT,eAAe;EACjD,MAAMU,YAAY,GAAG,WAAK,aAALd,KAAK,uBAALA,KAAK,CAAEc,YAAY,mCAAIT,oBAAoB;EAEhE,IAAIJ,YAAY,CAACW,QAAQ,EAAE;IACzB,IAAIC,OAAO,EAAE;MACX,MAAM,IAAIE,KAAK,CACb,yDAAyD,GACvD,4EAA4E,CAC/E;;IAEH,IAAID,YAAY,EAAE;MAChB,MAAM,IAAIC,KAAK,CACb,8DAA8D,GAC5D,iFAAiF,CACpF;;GAEJ,MAAM,IAAIF,OAAO,EAAE;IAKlBZ,YAAY,CAACW,QAAQ,GAAGE,YAAY,GAChC,GAAGD,OAAO,IAAIC,YAAY,EAAE,GAC5BD,OAAO;;EAGb,OAAOZ,YAAY;AACrB;AA7DAe","names":["determineApolloConfig","input","apolloConfig","APOLLO_KEY","APOLLO_GRAPH_REF","APOLLO_GRAPH_ID","APOLLO_GRAPH_VARIANT","process","env","key","keyHash","update","digest","graphRef","graphId","graphVariant","Error","exports"],"sources":["C:\\Users\\Admin\\Documents\\Web\\GRAPHQL\\node_modules\\apollo-server-core\\src\\determineApolloConfig.ts"],"sourcesContent":["import type { ApolloConfig, ApolloConfigInput } from 'apollo-server-types';\nimport createSHA from './utils/createSHA';\n\n// This function combines the `apollo` constructor argument and some environment\n// variables to come up with a full ApolloConfig.\nexport function determineApolloConfig(\n  input: ApolloConfigInput | undefined,\n): ApolloConfig {\n  const apolloConfig: ApolloConfig = {};\n\n  const {\n    APOLLO_KEY,\n    APOLLO_GRAPH_REF,\n    APOLLO_GRAPH_ID,\n    APOLLO_GRAPH_VARIANT,\n  } = process.env;\n\n  // Determine key.\n  if (input?.key) {\n    apolloConfig.key = input.key;\n  } else if (APOLLO_KEY) {\n    apolloConfig.key = APOLLO_KEY;\n  }\n\n  // Determine key hash.\n  if (apolloConfig.key) {\n    apolloConfig.keyHash = createSHA('sha512')\n      .update(apolloConfig.key)\n      .digest('hex');\n  }\n\n  // Determine graph ref, if provided together.\n  if (input?.graphRef) {\n    apolloConfig.graphRef = input.graphRef;\n  } else if (APOLLO_GRAPH_REF) {\n    apolloConfig.graphRef = APOLLO_GRAPH_REF;\n  }\n\n  // See if graph ID and variant were provided separately.\n  const graphId = input?.graphId ?? APOLLO_GRAPH_ID;\n  const graphVariant = input?.graphVariant ?? APOLLO_GRAPH_VARIANT;\n\n  if (apolloConfig.graphRef) {\n    if (graphId) {\n      throw new Error(\n        'Cannot specify both graph ref and graph ID. Please use ' +\n          '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.',\n      );\n    }\n    if (graphVariant) {\n      throw new Error(\n        'Cannot specify both graph ref and graph variant. Please use ' +\n          '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph variant.',\n      );\n    }\n  } else if (graphId) {\n    // Graph ref is not specified, but the ID is. We can construct the ref\n    // from the ID and variant. Note that after this, we stop tracking the ID\n    // and variant, because Apollo Server 3 does not assume that all graph refs\n    // can be decomposed into ID and variant (except in the op reg plugin).\n    apolloConfig.graphRef = graphVariant\n      ? `${graphId}@${graphVariant}`\n      : graphId;\n  }\n\n  return apolloConfig;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}